{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/fire.js","path":"js/fire.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","path":"lib/canvas-ribbon/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","path":"lib/canvas-ribbon/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","path":"lib/pjax/CHANGELOG.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/LICENSE","path":"lib/pjax/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/README.md","path":"lib/pjax/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.d.ts","path":"lib/pjax/index.d.ts","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.js","path":"lib/pjax/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/package.json","path":"lib/pjax/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.min.js","path":"lib/pjax/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/renovate.json","path":"lib/three/renovate.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three_waves/LICENSE","path":"lib/three_waves/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three_waves/README.md","path":"lib/three_waves/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three_waves/canvas-nest-nomobile.min.js","path":"lib/three_waves/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three_waves/canvas-nest.min.js","path":"lib/three_waves/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/forms.html","path":"lib/pjax/example/forms.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/example.js","path":"lib/pjax/example/example.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/index.html","path":"lib/pjax/example/index.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page2.html","path":"lib/pjax/example/page2.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page3.html","path":"lib/pjax/example/page3.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","path":"lib/pjax/lib/abort-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","path":"lib/pjax/lib/eval-script.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","path":"lib/pjax/lib/execute-scripts.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","path":"lib/pjax/lib/foreach-els.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","path":"lib/pjax/lib/foreach-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","path":"lib/pjax/lib/is-supported.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","path":"lib/pjax/lib/parse-options.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","path":"lib/pjax/lib/send-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","path":"lib/pjax/lib/switches-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches.js","path":"lib/pjax/lib/switches.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","path":"lib/pjax/lib/uniqueid.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/setup.js","path":"lib/pjax/tests/setup.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/test.ts","path":"lib/pjax/tests/test.ts","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","path":"lib/pjax/lib/events/off.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","path":"lib/pjax/lib/events/on.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","path":"lib/pjax/lib/events/trigger.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","path":"lib/pjax/lib/proto/attach-form.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","path":"lib/pjax/lib/proto/attach-link.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","path":"lib/pjax/lib/proto/handle-response.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","path":"lib/pjax/lib/proto/log.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","path":"lib/pjax/lib/proto/parse-element.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","path":"lib/pjax/lib/util/clone.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","path":"lib/pjax/lib/util/contains.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","path":"lib/pjax/lib/util/noop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","path":"lib/pjax/lib/util/extend.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","path":"lib/pjax/lib/util/update-query-string.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","path":"lib/pjax/tests/lib/eval-scripts.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","path":"lib/pjax/tests/lib/abort-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","path":"lib/pjax/tests/lib/events.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","path":"lib/pjax/tests/lib/execute-scripts.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","path":"lib/pjax/tests/lib/foreach-els.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","path":"lib/pjax/tests/lib/foreach-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","path":"lib/pjax/tests/lib/is-supported.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","path":"lib/pjax/tests/lib/parse-options.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","path":"lib/pjax/tests/lib/send-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","path":"lib/pjax/tests/lib/switch-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","path":"lib/pjax/tests/lib/switches.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","path":"lib/pjax/tests/lib/uniqueid.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","path":"lib/pjax/tests/lib/proto/attach-form.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","path":"lib/pjax/tests/lib/proto/handle-response.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","path":"lib/pjax/tests/lib/util/clone.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","path":"lib/pjax/tests/lib/proto/attach-link.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","path":"lib/pjax/tests/lib/util/contains.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","path":"lib/pjax/tests/lib/proto/parse-element.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","path":"lib/pjax/tests/lib/util/extend.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","path":"lib/pjax/tests/lib/util/update-query-string.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","path":"lib/pjax/tests/lib/util/noop.js","modified":0,"renderable":1},{"_id":"source/dongtai/foot.txt","path":"dongtai/foot.txt","modified":0,"renderable":0},{"_id":"source/dongtai/head.txt","path":"dongtai/head.txt","modified":0,"renderable":0},{"_id":"source/dongtai/说说.py","path":"dongtai/说说.py","modified":0,"renderable":0},{"_id":"source/dongtai/my.txt","path":"dongtai/my.txt","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/b.jpg","path":"images/b.jpg","modified":0,"renderable":0},{"_id":"source/images/scroll.png","path":"images/scroll.png","modified":0,"renderable":0},{"_id":"source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/styles.styl","hash":"580a205500cc70f7d75f13ddb63db633d870e6b6","modified":1598413530000},{"_id":"source/_data/styles - 副本.styl","hash":"4c0bd0d46be53f5da1919bd74eb4ee3d1008db35","modified":1596343384000},{"_id":"source/_posts/C语言的一些记录.md","hash":"4a3e012ffccab24281d0101d304bacbf5e08e7d6","modified":1617775743369},{"_id":"source/_posts/haskell-hw.md","hash":"1a7199338f1f94aa76f4bb6cbdf3997aada3e015","modified":1599208854000},{"_id":"source/_posts/haskell.md","hash":"f652576ef14c9b428964ec7a5188e050752b41d6","modified":1599214272000},{"_id":"source/_posts/SVD.md","hash":"3f84d626bf1f0eae0769907a98383d7f13d89bb7","modified":1621683700435},{"_id":"source/_posts/jvm.md","hash":"4823e1b978e253d2437e93431bc8edae41011602","modified":1596696516000},{"_id":"source/_posts/关于Ubuntu.md","hash":"fbf1d3662b461f4c896fac4e1230b49f8d9ad140","modified":1599318590000},{"_id":"source/_posts/关于本站.md","hash":"96aecd37346c3f46d124ce8d5017a864c5001628","modified":1596637720000},{"_id":"source/_posts/曲率驱动.md","hash":"09c34126bde5ab1c49ac20a7849fea1e34e13b4e","modified":1598361790000},{"_id":"source/_posts/前端杂项.md","hash":"ae6603dbeed1da8e1a1e37e781a17b2904603916","modified":1596701632000},{"_id":"source/_posts/决策树-随机森林.md","hash":"5ff017fd10fce24413f2ee085b51618e031a3566","modified":1608355431250},{"_id":"source/_posts/百度之星2018复赛.md","hash":"3fc65954fd04d2d49f737e0bdf7fa3232823dc4c","modified":1596877128000},{"_id":"source/_posts/百度之星2020.md","hash":"be3f5b04dbc857c46bf62eb1912045e3898beeb5","modified":1608356127103},{"_id":"source/categories/index.md","hash":"948c4534aada04b095b8c378d3d728e4af9db5cd","modified":1596247084000},{"_id":"source/_posts/胡言乱语.md","hash":"c3574a6d3e763001c566f786143ac440d605e9e0","modified":1603777616000},{"_id":"source/dongtai/说说.py","hash":"a4868a985b7177ad3d0cf41d5616a5ce5cd44fd7","modified":1597486256000},{"_id":"source/dongtai/head.txt","hash":"af770b49377e3744e7fd9e1c4e77c531d1aff4e6","modified":1596525468000},{"_id":"source/dongtai/foot.txt","hash":"6ecbf7302a29bbd8f47e12ae3915fc98fed03458","modified":1597486282000},{"_id":"source/dongtai/index.md","hash":"6a09a09bd57718573c0556c0799ff2483ae87f2e","modified":1597486282000},{"_id":"source/dongtai/my.txt","hash":"7d78f703c8df5c34a17ce8e52f1163f1fd3a2fd9","modified":1597486176000},{"_id":"source/about/index.md","hash":"449c6f7afc8b9544526542207afda02b78d19862","modified":1596357874000},{"_id":"source/images/avatar.jpg","hash":"1a6ee155a232c2359b26c537ea2f027270d0ca6d","modified":1596247764000},{"_id":"source/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1596429064000},{"_id":"source/photos/index.md","hash":"edfdf521a7a722c2186881b7c517f41f5c4899d7","modified":1596357494000},{"_id":"source/tags/index.md","hash":"df7648f42872706d5eca6507dd23b5bbc893d28e","modified":1596275410000},{"_id":"source/_posts/jvm/jvmdata.png","hash":"052631e0795c4815a9c4a1533447a0b071993038","modified":1596616738000},{"_id":"source/_posts/jvm/javastack1.png","hash":"c4d667efac0db22041ef64befeb44ae123b54594","modified":1596693648000},{"_id":"source/_posts/jvm/javastack.png","hash":"54b7d62cf8b6ebc34e0a13140720d856f1f474d6","modified":1596693640000},{"_id":"source/_posts/关于本站/test.jpg","hash":"d71fdab883e00b0135ea8b8b3ccc4b2d4f08b1e5","modified":1596332524000},{"_id":"source/_posts/百度之星2020/公式1.png","hash":"c30e3b8d3077fb33bd80ebfd6f91bca0b0bf83c5","modified":1597030280000},{"_id":"source/_posts/百度之星2020/公式2.png","hash":"8da2d92db5598ca8846515046211e27bd26b96de","modified":1597030378000},{"_id":"source/images/b.jpg","hash":"c8a1174883e7954526818643f7213e1425603550","modified":1596347180000},{"_id":"source/images/background.jpg","hash":"3ca56b373a9662b58b635c20fddcc5c5013ad1e8","modified":1596260584000},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1596415940000},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1597213566000},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1596415940000},{"_id":"themes/next/.gitignore","hash":"03012748b175434345643bfe11515b4ad22a5be8","modified":1596415940000},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1596415940000},{"_id":"themes/next/.npmignore","hash":"e726ec1241bfaed670bc6059172e048a53ad970d","modified":1596415940000},{"_id":"themes/next/LICENSE.md","hash":"2f8a566ace11a7042e18555041625017242d969e","modified":1596415940000},{"_id":"themes/next/README.md","hash":"179370fd0a75e0d44a6254ad493ac03b4fa32893","modified":1597213566000},{"_id":"themes/next/_config.yml","hash":"dcc19fac7a4d513a093fc417ee6cf9bdc6ee40cf","modified":1621681936785},{"_id":"themes/next/_vendors.yml","hash":"9103f37cd70d1a10c929aa5858727b717e57775a","modified":1597213566000},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1596415940000},{"_id":"themes/next/package.json","hash":"fdc7c1f4a6800c1f5ea5d577f4640db0e5e206be","modified":1597213566000},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1596415940000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21a29e519823840b7fe254f19e42ac265d15e3ae","modified":1596415940000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"c9d0cd34590e07b42e2e44728e448205e15b2906","modified":1597213566000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"8e2135c86a1c5cd283c82a425a52cb5e5fbe64db","modified":1596415940000},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1596415940000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1596415940000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"33a6dcca75afa87e4ac2c2e18cd28a1f0e8a5d83","modified":1597213566000},{"_id":"themes/next/.github/labeler.yml","hash":"8c85edfe39afb306b1b4d511ad72d1bb9c74bf8f","modified":1596415940000},{"_id":"themes/next/.github/stale.yml","hash":"51a5f14367d141914113b43d07571ffb623815d7","modified":1597213566000},{"_id":"themes/next/.github/release-drafter.yml","hash":"6737b76b184d8e73dcd96972e47edbfcbedbfaa4","modified":1596415940000},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1596415940000},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1596415940000},{"_id":"themes/next/docs/LICENSE.txt","hash":"71bcc7017bd259ac52f171b23530ab35ce810f6c","modified":1596415940000},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1597213566000},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1596415940000},{"_id":"themes/next/languages/de.yml","hash":"1182965c709f06d416ca4e815b1154e4193af2b6","modified":1596415940000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1596415940000},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1596415940000},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1596415940000},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1596415940000},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1596415940000},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1596415940000},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1596415940000},{"_id":"themes/next/languages/ja.yml","hash":"f9c00d9fda3707ba57a01b174e233c565d7ba2d9","modified":1596415940000},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1596415940000},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1596415940000},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1596415940000},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1596415940000},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1596415940000},{"_id":"themes/next/languages/tr.yml","hash":"8b00ca99ad063d81908b2c2f5bf3b683c1515f80","modified":1596415940000},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1596415940000},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1596415940000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fb7c2d9da4124f9b6bf8b12db6d41666e61478aa","modified":1597213582000},{"_id":"themes/next/languages/zh-HK.yml","hash":"b7e45ef40835e6b0e32fc93bbd255b902bff6c41","modified":1596415940000},{"_id":"themes/next/languages/zh-TW.yml","hash":"363419eb08086215714cfe93092b0fadd5693112","modified":1596415940000},{"_id":"themes/next/layout/_layout.njk","hash":"224713322e957898897fa2ab2b6aa4761a3b1570","modified":1597213582000},{"_id":"themes/next/layout/archive.njk","hash":"c76d344cde19a5a67429d1402228ce33086e5c33","modified":1596415940000},{"_id":"themes/next/layout/category.njk","hash":"222fc92c4b9f5721a1d477d53cd0cf98535dd26c","modified":1596415940000},{"_id":"themes/next/layout/index.njk","hash":"a5e09e4406286ce7cb82f792f627218f9a3258b5","modified":1596415940000},{"_id":"themes/next/layout/page.njk","hash":"0bdaf1ed4aab19fa7c01a5145272bdc42ce9cd24","modified":1597213566000},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1596415940000},{"_id":"themes/next/layout/tag.njk","hash":"185b2aa3492773156dd9bc44fed50005d108dce4","modified":1596415940000},{"_id":"themes/next/scripts/renderer.js","hash":"478275ebf0a8867b473b172dda812ea3d18a3518","modified":1596415940000},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1596415940000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"a56d75bb5aea8bdd1642f84372e011e21ca21ad9","modified":1596415940000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"3d0eb79d1430dd785aecad40b08ed199130cd463","modified":1596415940000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"1b5c6f126e4e1a1f02d41072ad68b120a455f3ca","modified":1596415940000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"f3fd4fa1e51c661dbaea954b7e59d228b2208159","modified":1596415940000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"ce3f611dbd35306ef15332da0356a0943cd6fd24","modified":1596415940000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"a1c997c4987ece0696fc4e00fae3f53e96e86099","modified":1596415940000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"c14c2cee4ac921f9f1dbdda47e013baa657688c8","modified":1596415940000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"8198c68a613d1a1e2a09f2cbecd0a53697b61962","modified":1596415940000},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1596415940000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"1f4f24bad91b1cb483c78c80e69ff467173b8aec","modified":1596415940000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"582f5f6b839a21e7498ca523c8c83178a0fda51b","modified":1596415940000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"c1ba78b246349f79adcf06a940961bba8a8350cb","modified":1597213566000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0707ca4b6bf9cf697f4f12fea659fca02217c120","modified":1597213566000},{"_id":"themes/next/docs/ru/README.md","hash":"adac6b2aa723d0b468e5bdec2a957a157e71e002","modified":1597213566000},{"_id":"themes/next/layout/_macro/post - 副本.njk","hash":"8ecb0c8ebbbb18a954371a0e201473398d2963d2","modified":1596418702000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"c9d756ac33bf63e0a4ba96b79616f08846bcc53c","modified":1597213566000},{"_id":"themes/next/layout/_macro/post.njk","hash":"1aee7a8b5f507897d425cef5cd6cd832659a9652","modified":1597213582000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"b3eb3b67859ddf15c7d2e23be373678249ad5c1e","modified":1597213566000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"5e6d77ed00be8a0533fe2d7f7fc1daf79e961578","modified":1597213566000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"aff79f64ebcdae67bdaabdfc1e19bbcc1a6d1a46","modified":1596415940000},{"_id":"themes/next/layout/_partials/languages.njk","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1596415940000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1596415940000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"84801a0e858618eab1d352c76a89534766fcdbf7","modified":1597213566000},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"8da7b29b265669465fa77896384207d60e0f6e02","modified":1596415940000},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"0ab99e210c6c3446e7bcebdc2422f8acde035428","modified":1597213566000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"6914d0bbba2bdc1fedbb30a8a17f539d75e2a047","modified":1596415940000},{"_id":"themes/next/layout/_third-party/baidu-push.njk","hash":"bd9ba0bf60cc3008ee14339fa395ee6af188e879","modified":1596415940000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"42a81c4224663d6b4348957062ea62cfa049bd6f","modified":1596415940000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"28060f7bd99cc5d61521ecb6894ce5d63244c2a5","modified":1597213566000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"aceb0e3646501036b52a426e4f0c0bd474d5717c","modified":1597213566000},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1596415940000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1597213566000},{"_id":"themes/next/scripts/filters/locals.js","hash":"e84d39780608dd72ea82b59e3fa893c6a7f10f4e","modified":1597213566000},{"_id":"themes/next/scripts/filters/minify.js","hash":"0626a00515b424c0f2f4bc2ed4d4564121adde98","modified":1597213566000},{"_id":"themes/next/scripts/filters/post.js","hash":"11f64f95837d0d44245768e0b72dc97b7e56d01f","modified":1596415940000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"ab4bc06cd07fac50024c23acdd4a2bf027ac5264","modified":1597213566000},{"_id":"themes/next/scripts/helpers/font.js","hash":"45490ac0527ca4e613d8dd950e24501744e24942","modified":1596415940000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"6720973ce5d51ce136454133492a890922c7675a","modified":1596415940000},{"_id":"themes/next/scripts/events/index.js","hash":"fb3feea03bacd679bccc1ec0a1ddeede5d2703df","modified":1596415940000},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1596415940000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1597213566000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1596415940000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"a7fcf6e89fe195893ad9a924421d459b06d74b91","modified":1596415940000},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1596415940000},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1597213566000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"2ad94d9d9ea349f87ad53870abb032a8a4fab2fb","modified":1597213566000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"feaa18a130eb8a9ef798d5ee3850a32340975d35","modified":1596415940000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"9ecce323df3361d20731573b27b1e6e804dfdf92","modified":1596415940000},{"_id":"themes/next/scripts/tags/note.js","hash":"b8669e3afc97188df46ca31997b6b205b79b6943","modified":1596415940000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"ce3ea97dc80a9813f50a8db707063656c552ce89","modified":1596415940000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"7cfc7a582f44594be3a194917bc4e95b05f9dd4e","modified":1596415940000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"95735f652c974f9ed6849476a8375f9d7888a625","modified":1596415940000},{"_id":"themes/next/scripts/tags/video.js","hash":"2b075ad9eff9456c3b875ca60339b41e6714a3f3","modified":1596415940000},{"_id":"themes/next/source/css/_colors.styl","hash":"f3368760774a02969bca9f99a97b5650be7daa88","modified":1596415940000},{"_id":"themes/next/source/css/_mixins.styl","hash":"fe9cdeed3489d493e53c81762ba2cd231309fa8c","modified":1597213566000},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1596415940000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1596415940000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1596415940000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1596415940000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1596415940000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1596415940000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1596415940000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1596415940000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1596415940000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1596415940000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1596415940000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1596415940000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1596415940000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1596415940000},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1596209748000},{"_id":"themes/next/source/js/algolia-search.js","hash":"3eece72c7964f1355c0c7fb31be1b88e42430e6f","modified":1597213566000},{"_id":"themes/next/source/js/bookmark.js","hash":"e808854cb650f5cd8b4ed97f41df122328b5bf08","modified":1596415940000},{"_id":"themes/next/source/js/fire.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1596411112000},{"_id":"themes/next/source/js/local-search.js","hash":"7fd6a9d1409c523a8f4a8a93087d37a9a9e0a542","modified":1597213566000},{"_id":"themes/next/source/js/motion.js","hash":"20b979ebe3671cb415e6e7171485d65cc347086e","modified":1596415940000},{"_id":"themes/next/source/js/next-boot.js","hash":"dbdb886c44f48255c8ff3859e55a1d3cac50bbf2","modified":1596415940000},{"_id":"themes/next/source/js/schedule.js","hash":"57645470647bdd1c6bb1c339404e40f4231a5595","modified":1597213566000},{"_id":"themes/next/source/js/utils.js","hash":"00b5bb73cbbf46810bc7c64629e35ef3adfb3d76","modified":1597213566000},{"_id":"themes/next/test/helpers/font.js","hash":"7e44ac17d0f8efce19c38bfff332439cf8a2eb30","modified":1596415940000},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1596415940000},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1596415940000},{"_id":"themes/next/test/helpers/next-url.js","hash":"2dd87fe2acb9554ec5cf0ff6b818207c3a48efdb","modified":1596415940000},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1596415940000},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1596415940000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"498e9563f2d03e51726a305523d9a0cc4c55d8e2","modified":1596415940000},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1596415940000},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1597213566000},{"_id":"themes/next/test/tags/link-grid.js","hash":"05c368349a5ebb385a0e6382ad19cab5e3d6528b","modified":1596415940000},{"_id":"themes/next/test/tags/mermaid.js","hash":"e1864bfef9a673b012dba0c5b3d096ee6b15cc91","modified":1596415940000},{"_id":"themes/next/test/tags/note.js","hash":"d1d918fa0c52efe3b4763927460310e752f5b8e0","modified":1596415940000},{"_id":"themes/next/test/tags/pdf.js","hash":"161285ef5750de45c8ae5a3e01ad5c5abab5c6d9","modified":1596415940000},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1596415940000},{"_id":"themes/next/test/tags/video.js","hash":"246f9f212259f4eaa3f510c78f40a622bd67ec98","modified":1596415940000},{"_id":"themes/next/test/validate/index.js","hash":"e02ff921a05dfd6e5bae7558ca14705db9f57846","modified":1596415940000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"424c285832681150191336c5771512813e808dfc","modified":1597213566000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"7b5429d77b499c416c7ae8bfd8e4ab3e84ee6570","modified":1596415940000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"111f2a1fcbc52738ba0dc86b0e6e20169db6ad42","modified":1596415940000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"2f550b53372ec150c2538f216399995b8c003a21","modified":1596415940000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"cb841a7a5db322dacd18c23074be300460aa6353","modified":1597213566000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1596415940000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"940cad08a67e6c361214045096bd3cdffdf44fcf","modified":1597213566000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"622f2e5f2496ede4408b9d8e4bcd333e7fdeb58e","modified":1597213566000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1597213566000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1596415940000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"ff156aaa0ffa313500ea1f21ec81a0391e57b258","modified":1596415940000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1596415940000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"681c3f9f12ac4b6c807f8511d6bec6beab51733a","modified":1597213566000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1597213566000},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1596415940000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1596415940000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"5aeaf419691695705ef5af2681870186c5432489","modified":1597213566000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1596415940000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1596415940000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1596415940000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"693bd3f472d4080ba5a46b8671e5c04e2d88a6f7","modified":1596415940000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1596415940000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1596415940000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"df02e478cebee56dcae1ce6db9513e859e591227","modified":1596415940000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"71c728a386b8423b0926baea2de844943b5d77d8","modified":1596415940000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"bd483e33585e511b4f2729a363813da395e49cad","modified":1596415940000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"7a542a566a6d7da4ff0a16c2aaff8e144879a438","modified":1596415940000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b2e31a508277d67d645bb9f7146c978a08954c3","modified":1596415940000},{"_id":"themes/next/layout/_third-party/comments/valine.njk","hash":"ed618be764132377502f10aaca0213d08c7b649f","modified":1596415940000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"743875cea82cb9d6191bf63f608c448a288dabca","modified":1597213566000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"49f5572022b96aa23fac9525e1ae7a956fd0ab3d","modified":1597213566000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"5a4b1cd1ffd5fd042c3d0db4a7374371eedac553","modified":1596415940000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"88576252a95eb46390c8546f6746fca8b47d8ef1","modified":1597213566000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"5bdaeb104371b0184062d4a8ad1b820eb12f2ba5","modified":1596415940000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"6eb39df7c30a17f1800897701cfc25403745fe49","modified":1596415940000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"6e18ca65d1e9fda1a708fba18fc4c5e3e7c869b3","modified":1597213566000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1596415940000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"f84eaab792ce5a929d781483597782eddb4d1495","modified":1596415940000},{"_id":"themes/next/layout/_third-party/search/swiftype.njk","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1596415940000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"55a07dae094045c50cc2b0bf6bb4a1554dfac6f2","modified":1596415940000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1596415940000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1596415940000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"fcb3ae62c0dff03e79ac109bfdcea85b5430e3aa","modified":1596415940000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"e0b77118de4d262a388ed919eb0b57fbbdbba380","modified":1596415940000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1596415940000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1596415940000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"c4e7c0e15412707ca104b40fa463b9d407a7114e","modified":1597213566000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"6f5135856163282c093fe54aa56fcbb5f920eb4d","modified":1596415940000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"21e8a183c516ccfc05651da64a55331416792d57","modified":1596415940000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"f1bce775e4408aac5dd4efc8942acf2928645282","modified":1597213566000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"fb4bad3574c1f737d7a9f016ab7cd75d506a66d3","modified":1596415940000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"1d9cb9dec0ec4e26d9ef3ae36e11b38e9cec7383","modified":1596415940000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"df5a9998231008fd22bc903daa30a5453dd15ebd","modified":1596415940000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"226e9d63bb34aca7e266c3ee9ceda9b8a0944a2f","modified":1597213566000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"f6e61b13c10b4237cfd129a9317fdbba39ed2c31","modified":1597213566000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1597213566000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"a150d57c6373a7cac7a18606d127173ee3d71884","modified":1597213566000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"e3543af65817b31ed8c78289487bff0c0aae5af0","modified":1597213566000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"87b3a02899f41aafbb59dfa9525daf384c054ccd","modified":1597213566000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1596415940000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c0c22796b550de5ec657d97aec23cb4300445334","modified":1596415940000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1596415940000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9a74e42ec096fc838337c27f65c4b138d11dbd5c","modified":1596415940000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1596415940000},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","hash":"da243fc43315d5953438dab71eb59dc3961c33e3","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"62ff1ba692f3153d0288c514c42c6c92cc17e9b6","modified":1596265198000},{"_id":"themes/next/source/lib/pjax/.editorconfig","hash":"8c81c4efc1ebde69b4c084c370c29071af62ed2f","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/.eslintignore","hash":"72a528c49453bc417123c12a5482f9a3dec8e1a5","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/.eslintrc.json","hash":"37eb8287500c9f2d4e1b887bec1c7636791a31dc","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/.gitignore","hash":"37a0d5efc8a1eaa132681e1c2bf9f68333c2fbff","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/.prettierignore","hash":"72a528c49453bc417123c12a5482f9a3dec8e1a5","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/.travis.yml","hash":"a8afaf403ef826c018803df13ed5a36943320983","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","hash":"c6bec1421c73c2b33eb0f2974566351968eac342","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/LICENSE","hash":"2c7168814d9d35ea9500809b0904962f511eb4a8","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/README.md","hash":"f3f023db70ec08d0e8602e091c9aee621978a23d","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/index.d.ts","hash":"c452cd6e990eeeea10f7dbf17fefbc6845585bf6","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/index.js","hash":"e6fc3fb4501520bae1505c5d95214d3318810c2d","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/pjax.js","hash":"39b3063839a090bf3224c0c4776ffcedf2faf327","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/package.json","hash":"c3670a3576aa4bc6d0818edda3723e034b647e52","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/pjax.min.js","hash":"68d0c6ad28f042c78fc18a6e9d782a7047c01905","modified":1596293618000},{"_id":"themes/next/source/lib/three/.gitignore","hash":"5767276045f60da2350895a59aa6e138b0e83294","modified":1596259288000},{"_id":"themes/next/source/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1596259288000},{"_id":"themes/next/source/lib/three/README.md","hash":"76071f107e07113ccb23192680782577a15c5350","modified":1596259288000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"558838e0821f76c1e6d58add25116853caa1976c","modified":1596259288000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"1b371d908c6729f15877601792583e25cc4e6091","modified":1596259288000},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"8667c49d81292b55e4ec8c0ec9f8eb42f4ababab","modified":1596259288000},{"_id":"themes/next/source/lib/three/package.json","hash":"ff493a283c04f87a272abdffa8aa29fb4368b803","modified":1596259288000},{"_id":"themes/next/source/lib/three/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1596259288000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"62fe85b767c525a07bbec1193c0840ee924dad9a","modified":1596259288000},{"_id":"themes/next/source/lib/three_waves/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/README.md","hash":"6964aecdc62466e6b529f6887558669925a36bc6","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/canvas-nest-nomobile.min.js","hash":"6b4437a9cd8aa04329cc6220a595acfe1fb9b598","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1596258656000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1596209748000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1596209748000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"7bcb48dcb4145cf16d4b7720cd8e140b4b4e0d72","modified":1597213566000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1596209748000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ad044edaf6d3d9402559129841061e3eaea173cb","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"90fc140917c49285bfa873b1f5b590405b851c23","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"151e5821defb9d43339b33ef2815782f7bf2230d","modified":1597213566000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"e7d321f804f577a021673d8c5bc31a765f96c9fd","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"b39a58d63606be5076bbbb2d9e20300a5dcfcde2","modified":1597213566000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"fbf20cea2fc1b4507b11254845a095b9ed67dd4b","modified":1597213566000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"166300c5bcab8dec0fc37c5a8a9193569281bb76","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"1d3e11d1b39cf3d3196b74f83dbfe6de0f4209bc","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bb97940c1a5a66079e23985c21f625d11eacd07c","modified":1597213566000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"e2e80bf0ede7a913ddd824f6c9c8ad65041a3eb8","modified":1597213566000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b0c959561487976131edf28b1a487f5b283b09f5","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"d369ec6137f37169b7232d1c7f89d2d717f9bedd","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"9f3780cfabcd2b5c30e54c53a5e07b4a5034d529","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"a82b22d9ba07af65e3583230b6e213e3509b5dd3","modified":1597213566000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"eaec2d883d45e22ae73c0a5514d03e6ac68a9a97","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"07fb7aba11843d43835e4de078492c848a508283","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"1969aa07e989abc3d88d730ab3cc89a6a61cc181","modified":1597213566000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1597213566000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"411b6b5802a4a1c68765b93c6632f5163567e985","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d677e7e792db20291f2e8f092f1e2a37e3d7f790","modified":1597213582000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"03228ff5ccb4236b99f33dbaeb848283252210a7","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"970e5cbf9b8a8a0ab8787c5c63bac79293435802","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"4dbedfec61cdb75cc54662ca8d721cb18c068729","modified":1596415940000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1ee6aa4000bc0667e67725b30529417f5ea3c8e7","modified":1597213566000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/config","hash":"859dd85203388dc5f882e8b78019889577e2dbb2","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/index","hash":"4fa9f721f78316cbc7fd09281bb2c17cc0a8fe95","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/packed-refs","hash":"1a669ea6243f62a7f4c02d82225d6a49fdadb567","modified":1596265198000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1596209748000},{"_id":"themes/next/source/lib/pjax/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1596293618000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1596209748000},{"_id":"themes/next/source/lib/pjax/.git/config","hash":"010b0a17841ab64c111503876d0d06bafdd7ef62","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/index","hash":"9480e17491b252caa1459e575148204d393a57a9","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/.git/packed-refs","hash":"edbdf218d3ec5dca511b8e29e88aebcf725d68ad","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/example/forms.html","hash":"35769b826750d64ad649f93ee2272961d65a61c7","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/example/example.js","hash":"4d9fea820f1a91590b0d49099e8a79d3984ba9bf","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/example/index.html","hash":"1cc0a16040597669b26e8a7168a620520c98f4a1","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/example/page2.html","hash":"5396196c9179746716ef02833504b1172332243f","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/example/page3.html","hash":"703e2d34011c3d8918ba811ead26f1734d4d74fb","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","hash":"a6eae74d5b80dccde2ee4485ee427aca39dbe66b","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","hash":"773d5fddaad11e76df9354f3cf8078f26ad760ff","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","hash":"b16da782b37eb0538ac267f4ec4d478e79e96fa6","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","hash":"95df8390d94be89f23f50e2acbde8e08a6264096","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","hash":"e79ce0bccb20e9245605ae7b2d7dc35fa4213c45","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","hash":"dea4eb52b70fd285ba3df161b51496d30677d9e9","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","hash":"0b29aa13306a0462d5c6ba0761acd75e65bb1691","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","hash":"ca86271d363eecd1abc854bf03491130101b427d","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","hash":"1348fec349076f4ccf72bb6f01999988764bdafd","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/switches.js","hash":"29ea82638d566d41dc6562873fb3d58310ca34d0","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","hash":"643336dc475999234b7843b1e7b38c60a48041bc","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/setup.js","hash":"de561f5d8212d10ae79188b294c94264e6f96386","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/test.ts","hash":"5fc54ab37b36965037b2476e62adbc684cdd5537","modified":1596293618000},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/config","hash":"c9c13087a3f33e6f46cd35a93c8b9bdf27618852","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/index","hash":"f4aef95471ad05f24e006adbf38294cc74232b6a","modified":1596259288000},{"_id":"themes/next/source/lib/three/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"51439496ae6791f8b002584e71f5d10f4f1a1f71","modified":1596259288000},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"10795d7f1e5393b2b5e1529b017ee4e0ffe82ac9","modified":1596259288000},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"71141daa39bbcedcf14ae95c05023a57828a5a43","modified":1596259288000},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"69725cd0af6868c5aa059343cc6e18e0c10b2f2e","modified":1596259288000},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"8381c792b161001a1b5cf39613c6d48e2588b3ce","modified":1596259288000},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"ac382962d408f16acf07b925b94bb15495b5207c","modified":1596259288000},{"_id":"themes/next/source/lib/three_waves/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/config","hash":"78c4459d066ad795856608d603d780b53488073d","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/index","hash":"dff71ee215af7c423762490ed9785687b616667d","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/packed-refs","hash":"80eecf0c5c7f21b2678dc1c329f74de19b6a3a67","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1596258656000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"1411f325a8e5c907b02eba576533047cd0f4413f","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"d9409fee88f44901896d636761ea89226285eb20","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e56c5f475ed450becba48b19f2531e074538f2ec","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"d5039344c977b41365310b52c924deabe5f4af4f","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"46567765e0617189e09893ce017db01526bf3d2c","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1596209748000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8a204edd922332a196ef4ed1ce6c6bffb3ee4803","modified":1597213566000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"af223db94a0785a2b308e222c5bb538f800a7a2f","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"146bac96eea5f035e3fddb677c84b4412759e164","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a9df1a22a0225a96face4a5360de5ef485216e73","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"3e48bed4d04339e9b2637481d2aff11454665317","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"6e042da2fbae43cdc42e333e625464c41baca96a","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"9f63c87bc2825102f93d025c45eb3d52969f3dfb","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1597213566000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4937269a511484c368c45b86ac98283722cad2fc","modified":1597213566000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"017e0b0554c8107766b12afe727d31fdbefe826c","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"430418a1a9c15dbb24d966ebc223d063a3e9b781","modified":1597213566000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2ce8d9b01e7ee52de4d2ac6956b5f7280b3ec356","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"6cb3b8e3d9b2751985ff429fbbadfed75879e7b0","modified":1597213566000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"d42685ed9ac9222435b36ea8b0b14e5005ec9634","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"9e1d2760486c20c430190036b4c74434ca8abded","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"782b06aad720a6225776a0c72e4a8b04633606ae","modified":1597213566000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"9c2feb2a446856bb6abcae32567a1d0c80fee2ad","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"88f1b0e9034f6ef0a78ab61c7cbc02f4d65a4d83","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"5601535203f2913d9f3446aba96805a7a9f989ed","modified":1596415940000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"432a92fe9962c0babaf40f4c68c593459d5dd1b3","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"fdba57be0d4f0e17f4b34ef81932caf2316d0a2c","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1596209748000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"38d7669843a36e37042e9a8e62993bfd51bff06d","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1596209748000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"fe0f1edf277b0cd23a8a4635cb0f476d165c17b7","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"899fed183460e4648f1ffc5fab16909c70c022b7","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1597213566000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"c0ba6b40bdb1b757cfe7e9c7fd256e88b946f281","modified":1597213566000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"474669399c6b4cca9f7a6c638eee196f4c8d479d","modified":1596415940000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"93dd1ea94fc4f2b2337b5ae5f0a8f7772b45b93e","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"2ca413420f1ce534f08ada8d23215df0afa21ee7","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2109f6cc249e9b504c9f9df1511e31a9cad0a740","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"b2082ff4535d6d5b7ab3b84ad1590127844374bf","modified":1596415940000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"1a020d6cb9b88e9d3b3013c335fb3fcd112f73f1","modified":1596415940000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/update.sample","hash":"92e81cca38312414b140f52b9de0655ee232f65f","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1596265186000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/HEAD","hash":"82506a69e20b760caf43500737b5f6d9f238c2af","modified":1596265198000},{"_id":"themes/next/source/lib/pjax/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/hooks/update.sample","hash":"92e81cca38312414b140f52b9de0655ee232f65f","modified":1596293612000},{"_id":"themes/next/source/lib/pjax/.git/logs/HEAD","hash":"1b437a8dc8e0f752745bd5d4c8eb1cb896d458c5","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","hash":"edc5309f813bc323a0f470836d763aa54d996042","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","hash":"c8d6059a8117c61e64e10e65a977e6d82b866af8","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","hash":"1e8b098cc0ff96a964fe90595bcf65b7d6ca1792","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","hash":"65db8791b8914ab29f2bad44202d2ee20cfaac1f","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","hash":"de0d6d91ecb8650e0cb49dc40470233c4bab57e9","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","hash":"43bff3061ccc910c86247735c6059ff489310a81","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","hash":"a61b7223e6af70a075bb7c6c5f6ebfa4adbc5f31","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","hash":"fa128f4b896c22c48c748b41cd6886ac7325a2d4","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","hash":"862544f772345622927de6a4bcb27e4ef18aec3e","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","hash":"77fd6688fb2c1818d9b35f17b6d3b6a70cc492f7","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","hash":"674eb07958489875f1d449b7864511f6bc70ee45","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","hash":"bfd842a1c6b091b9a231652cc9aa4b59bcc4ea6f","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","hash":"d505d78906844c180503c63767083d599bfbbfa8","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","hash":"3a11fd9978ccc4c5b5ca91699a55336633173d33","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","hash":"edb7512db755a13b963510914152b53aaf490e40","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","hash":"6c4e2b245605bf78d84fcd596034680f6e483dee","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","hash":"2419bf5111e717b720643dbf5f89e49f301b4ac0","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","hash":"a94e48ceede2b4543e82f74ed0f2b2da3fb8357f","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","hash":"2ca80242a94d2aab40fd0e25d91a6db4991802ce","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","hash":"19f819a9508f4ce2ce11ad8f27979fa84d7a2a52","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","hash":"65baba099b1074521287a10f5ff3f4e99cf8f8ee","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","hash":"b8fd6112a0d908c0f4c64ec898578bedbd23ed70","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","hash":"b3f170dd24a1d4a9aefbb5cdfbaad16dfafa6c80","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","hash":"0274886c7f0985da381c234a3ddca510e1a8cc0f","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","hash":"e0bc8cf01dcc15eb72a856c4f0734f02790e3275","modified":1596293618000},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"92e81cca38312414b140f52b9de0655ee232f65f","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1596259238000},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"cc17d9b072263919c108eaa1f855750b8fecc1d7","modified":1596259288000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/hooks/update.sample","hash":"92e81cca38312414b140f52b9de0655ee232f65f","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1596258652000},{"_id":"themes/next/source/lib/three_waves/.git/logs/HEAD","hash":"2d5af2984d3486b473dcbf2911a7969107f7faca","modified":1596258656000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/02/5cf882fc75a324b1d71b0921eb52ea427387fd","hash":"4a0f15d00f50c629f01c2274e26ef05b3779b6c6","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/15/9cfb8a3050111dfb3e6635e3f37fe68de2ab30","hash":"f4e1752896135edd6c9a36164b45893a59839548","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/25/3593d429ba9f66eb536d2577e4aa8b74ed7dfa","hash":"b68bb1519d36e82753367a811009e5850db4ddce","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/20/47d8728f7950fcc2276c339ee199302805838d","hash":"813e7f6c3b8954c40b250e6ba592d6bac7874397","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/25/3acc9a19f8a5047f053ea8b4a62684a4204939","hash":"d2210d7c39aa3801a198b38651a3f013d27bdd46","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/2b/41ae14433eb4a13cd99ac9736635723e813c32","hash":"0e30e5106b7021432c917699f60684276e727eb9","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/39/ea36a17ae4ce235f97d0cc1993cc51f932aa16","hash":"d3b328e06996ff12a2cf1f546bb78ab37a0b3b50","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/56/4913335d11e112ac80e8d550c8347016007f6d","hash":"50e9db730ceac6b2d0c8e8d5a3fec450290fdd8e","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/57/6d268825c6e7b3892828b61b9b408600faa1f2","hash":"2ca9617d2459b9e010e71b3b221fec42d76cae32","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/58/76c74f8c24cb9306189bf49fdf937b955c065c","hash":"283c92c40dc84fa11eba7c8b2ee8c5234dbf7ee6","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/58/b315e0ea2584550eebcda4f1c17a9a7f2bea16","hash":"c7dc07b78ad53f0f515b3243a0ff09fb8ddb8235","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/5d/93512df328612ac84d124d0a64f78ddcd7ec28","hash":"94dc5692c542e87ed40ce00ab5e5d72d4ae78f23","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/6c/34e310dd41c6bfa8db842190388ab83e6d4fa2","hash":"b327c0ce763240a6a8bd2f3fb55ace6b9e3df671","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/7e/871dba93cad35ffcec76a936259ae9a3641bc7","hash":"957e9e7db09ee72fc49ca852d3cc67242567fa45","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/a2/822bd3b1fad40e718ded64ddfac693c4ac24c4","hash":"14b60f650711229ee8301f49e8403bb4bb991e09","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/a5/b8ea74a3afbc760b01b6d4bd432f4f1ace013e","hash":"afdcce658085edbf16ce7f4719bec0cb5536e77f","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/a4/14bc6b6b6deb276c361d14724cdc6aa9b65b84","hash":"5252d85b51d1de339004b7f6b2cd9efce16730c8","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/ab/2197a6f5baffdd1d2895c169f4777921cc4027","hash":"81a75ca40bcfd278d6a9d67dedc8d61d959e2baa","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/b9/07949515b208cc605b513ff9d5b8153cbe2fe1","hash":"8fb6e8f2e6b4df8787239335ef9777a6c888d3c0","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c6/d0381e6cd08086561110f76b5f921bf81a6f87","hash":"be98eb9329c91132e90d942a44d05a41c78b4470","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/bc/43844047aa08d2b58a40fe3915a8382214a588","hash":"34086f267f92f39ea9819a5eafc04921661467d7","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c5/8416b72bd371aaf3bc8952f819c1afd3e4c0b4","hash":"aa8e6e340697fc6d9697c1ab8213ee40aca4ea82","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/heads/master","hash":"16bd947558482613ed699f6cd50bfef39a7837da","modified":1596265198000},{"_id":"themes/next/source/lib/pjax/.git/refs/heads/master","hash":"3c8414e83b32974579667c4c79e04af7d699edde","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-c44afb8b14583aea8a946bf5944820752f2a752d.idx","hash":"db4f698e84be1b114c7d29712172449b3183c286","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","hash":"93675412f1c9e4008ab5c64edcb9a08b549bb477","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","hash":"1dbbfa86a360c1109fc1153bea363cfd57d05afe","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","hash":"306d6430ddcddf7c67c1d76ed784036713cd86a1","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","hash":"9b1b047dc1d1d3d114540438511afcedb5b86528","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","hash":"c8b155c78944368f37715f9631115769ea1f645b","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","hash":"942486a70ec1f582f456834df4f22effa2603a87","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","hash":"f46afc9bf5c2ebe3766ffeb0ee638ac610e70332","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","hash":"ffd39a45f445e2f2d20593415ef31280bff7dfdd","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","hash":"ed2fb792fe378b9b92cf7854a3e395fc6eec21bf","modified":1596293618000},{"_id":"themes/next/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/0e/f76c758387d59ca0221cd50564e9edf7080c99","hash":"874d6d28ce21ce2873016183dd9e22b91f71c750","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/15/e42465bbd9589d2112d7fe3328bd7f85c6b24f","hash":"c28f5e24b9b15ecfddd666711c6d6ef57317cb29","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/19/65ef0ba0e2c1ad938cffdcbebed63048751ac6","hash":"75921c60b65a5606a85ab5cec185f430d844048d","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/1a/f9d30697fd2194a4132a3a6647722be2eb75dc","hash":"0f686b4e26b1e751509ded8a2db697b1d7938004","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/1f/354734edae8d1fa1af07d20573698512589c4e","hash":"9f1bb3baf74e25329b553704be0a3c64e194df8c","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/21/cbdd0d76bb18019bcb47aeec029fb13e211b09","hash":"c4466a47cecee06641b74dca59ed92665c24a5d7","modified":1596259276000},{"_id":"themes/next/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/34/cbb2a80da03e4d233dcfa3f11fed64894b2de5","hash":"ddf0c1fdb72ed14c50b1d1718a122f5f2a38a3ed","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/3a/ae52073909b7ccdbd43538ee6c814691935c57","hash":"652619b1d76f267c1646b6167de80f58a520525e","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/3e/4151e56ef50d7ff46a1ce73156c35ac6f1224d","hash":"a47d2e1895903aa7e1b51d35731f212ffc6a1718","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1596259286000},{"_id":"themes/next/source/lib/three/.git/objects/42/d67e32b0d5f676f7462ad5b013f4eb8cad2486","hash":"fb1c4d377401f2145cc721d96fdf40d89ac23434","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/4f/f48fd861ac49dd98ce52052bf6214f0a91facf","hash":"ae4d7b9a38e8913c055d37a6f129378d089bfd65","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/53/c865f8ff0aaa7ae2c8da7324dce73756ffe7c0","hash":"2d1c2dcfa342f46910a5698023b2c208bf3336e0","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/64/d845d3aed3dce9eab9de39793f1c4d1d6e0deb","hash":"1c7346386e8c3d8830bf36bff7011976ba326b3e","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/6f/f9f6347d48d4bc18b07a813f9140d7287df7aa","hash":"46232e003a90f98c78af21c4898ab37c66fda385","modified":1596259276000},{"_id":"themes/next/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/7d/2bcbb026e4a38ab45317d8b78bfed70ba25c51","hash":"05394b260c2c58ee38b7224bb4ecb52df1e7f354","modified":1596259276000},{"_id":"themes/next/source/lib/three/.git/objects/7b/a927a3390f9a6345039cdb5bc54c6a54297f69","hash":"0d10f821d9e61a27c3f9d9e03e923265693d68ab","modified":1596259276000},{"_id":"themes/next/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/80/5e5d92b903742c45e359b26a06cf86376301d8","hash":"6d39f5d10ed1e3acaaef5ac5999945b65ab12b88","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/81/d7d11db23df8681d1a8242fb27252a9d2d7062","hash":"a294b374bb129cc8aaec9c01bf1df1c5addafe9d","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/8e/985e4c70f87248ecc33d93410d80d1632c552f","hash":"a1d2084dd43e026f1b93027221629f5cbb135c88","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/90/e94cbdbfd33fea8606d447d01011ff657478f1","hash":"df922aee3bc7eb3266134797efb6f888743c6a12","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/94/1060002b98395a31cb47a33166f5568a20d4b5","hash":"c345981cd6097743cbb6f44d61b33ed37b110b31","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/9d/b082c6081a7d8b8b752bc35ebcba85073f5fac","hash":"c240b76ccdb8552d6d4c75e55d5c4c93807756af","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/a9/27aca23c7f27f5d1ebf2c4baea3aa5d8676143","hash":"dc3e5c853a502fbe7ea3e35c2f7a2bf94318ade4","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/bc/e19792442b36a0560e50adf61e86ef7ecbb50a","hash":"10f1b5f7fc7fd8b01ea9c5a5d1efad0464dd03ca","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/c3/e49d5369de034ff0788d11519bd9150b67ce74","hash":"256a3f0a7054a3e2cde1fc58f027565c87ad3d1b","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1596259276000},{"_id":"themes/next/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/db/fc5bb53f0ee561f55b18c9796e1e03a9781153","hash":"3cda0d28ce918db5b722db817e69ea522a4db9ce","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1596259258000},{"_id":"themes/next/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/ef/45fc381ccdb38fd03bb02c4e761d08275049c2","hash":"2eb89702aa19a302e38aff842b6ad1e22c3fbb93","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1596259260000},{"_id":"themes/next/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1596259286000},{"_id":"themes/next/source/lib/three/.git/objects/fa/be1d6949c228188d07df0f4b99b217c7b7f92e","hash":"de53b76740aff0953bcd79853d8addfabfc29f95","modified":1596259276000},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"dcb9d54aa64c8a682ca5ca209370022b8a8dc843","modified":1596259288000},{"_id":"themes/next/source/lib/three_waves/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/22/504fa21ce1b75e3f898ffafc8d2a8bed8d00c9","hash":"7c6ee7a38812c72e52ecb5c2ad725a9f103923a6","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/17/9eb5d6cd5f44ba3dd9e08b4ffcd83bb26db80a","hash":"03d593c92c9fad045d298f58afdbbcfbde923999","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/4b/2975337cf280e5555ca7a82dc7c2d4b437c5b0","hash":"d36f2c2b52c48d7f7cd0d0beb42be2ecd7534287","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/50/306daa49b7b24c4759a4e832bfba3531c53f49","hash":"32aa9d96315007f8d79cd162bc77398addfa6ddf","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/8b/66994be5014f18d17347ff32232c91d51ad08c","hash":"a22da1680018e1ab95118216eb88115d2947930a","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/8c/150fefb741be4edee07810003c8a845113e209","hash":"067de29d5efa0a46cdc8f9f113820e5e09bfa50a","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/ab/45cbef9bc70ceff60f1ed52f2a5c34f6ad5725","hash":"ee2fa8f3df0de9092a4fce015cefd76ea18f4cfd","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/b3/5fc481f71dd08037f6b9febb5ec02c790f843b","hash":"ed5aa3a748675544aaa141c182a317453dd1e774","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/d1/b8c85241243a80f16d56e7a50244d3695f6e6e","hash":"baf56a83286c72af11667786dc59e7c58d30e427","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/d6/5de52977302632417c21e015956fb3dab8cabd","hash":"e0c8f0483b20434e63748a649ca4afbb417997f4","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/e1/5c0793114874195462829db04d021face6640e","hash":"ff6c6d9f05b171ba67b44564ae3574d16eae6222","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/objects/fd/3e2cc9301ef9c1978ace2bd0aee99f47176661","hash":"09b27ad6cf69d4dcb926389e16913daccb5d2972","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/refs/heads/master","hash":"473e30291eac5f6d120dfe823b29ad4b2218f05a","modified":1596258656000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/heads/master","hash":"82506a69e20b760caf43500737b5f6d9f238c2af","modified":1596265198000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1596265198000},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/heads/master","hash":"1b437a8dc8e0f752745bd5d4c8eb1cb896d458c5","modified":1596293618000},{"_id":"themes/next/source/lib/pjax/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1596293618000},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"cc17d9b072263919c108eaa1f855750b8fecc1d7","modified":1596259288000},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1596259288000},{"_id":"themes/next/source/lib/three_waves/.git/logs/refs/heads/master","hash":"2d5af2984d3486b473dcbf2911a7969107f7faca","modified":1596258656000},{"_id":"themes/next/source/lib/three_waves/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1596258656000},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/remotes/origin/HEAD","hash":"82506a69e20b760caf43500737b5f6d9f238c2af","modified":1596265198000},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/remotes/origin/HEAD","hash":"1b437a8dc8e0f752745bd5d4c8eb1cb896d458c5","modified":1596293618000},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"cc17d9b072263919c108eaa1f855750b8fecc1d7","modified":1596259288000},{"_id":"themes/next/source/lib/three_waves/.git/logs/refs/remotes/origin/HEAD","hash":"2d5af2984d3486b473dcbf2911a7969107f7faca","modified":1596258656000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1596209748000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1596209748000},{"_id":"themes/next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1596259272000},{"_id":"themes/next/source/images/background.jpg","hash":"3ca56b373a9662b58b635c20fddcc5c5013ad1e8","modified":1596260584000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1596259288000},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-c44afb8b14583aea8a946bf5944820752f2a752d.pack","hash":"c1012ba4ce7f42ed478471cc6dd0c20153bfc19f","modified":1596293618000},{"_id":"source/_posts/前端杂项/htm.jpg","hash":"2cea73ad4265695d1ae855cbe0dc81d2f82f0b76","modified":1596519818000},{"_id":"public/search.xml","hash":"d47c2aebddf5c0d5c9f66e8e0e2fba9aaf213377","modified":1622089305190},{"_id":"public/categories/index.html","hash":"ebc05145f5b04a896087b78e3b04d85596c45283","modified":1622089305190},{"_id":"public/about/index.html","hash":"d74115c3557a433f5e54e1fdfb6060691e93f82e","modified":1622089305190},{"_id":"public/photos/index.html","hash":"1e7a458dc980b43e7552fef40050025df419f51e","modified":1622089305190},{"_id":"public/tags/index.html","hash":"098340a932cffd650a7bee8a0c80c0d37ee4181e","modified":1622089305190},{"_id":"public/archives/page/2/index.html","hash":"7e29075ddae1f4fb89c91ab5d62c51f2c36ea72f","modified":1622089305190},{"_id":"public/archives/2020/page/2/index.html","hash":"59df606436a433638dc15fceb08b62ad63d57411","modified":1622089305190},{"_id":"public/archives/2020/08/page/2/index.html","hash":"1ee90b35e9b42dd8e00d47607f8c75780b0fb63b","modified":1622089305190},{"_id":"public/archives/2020/12/index.html","hash":"70594c5d26e0be3da6999d74fd992bd3dabd4b91","modified":1622089305190},{"_id":"public/tags/C语言/index.html","hash":"9c74ef3d40e316b5939847db71044f552f1bbd82","modified":1622089305190},{"_id":"public/tags/数学/index.html","hash":"0b073bcd1c26ee656a8c0f5b784f6c90147bb06f","modified":1622089305190},{"_id":"public/tags/haskell/index.html","hash":"8c510a727eef2b122f199d39f1520b8dd441b6f9","modified":1622089305190},{"_id":"public/tags/jvm/index.html","hash":"18ee9ce945852baa7ec05e0b4fdca8e594665ba0","modified":1622089305190},{"_id":"public/tags/ubuntu/index.html","hash":"a8159e0ed84991776ced272f2403b5babb1e45b2","modified":1622089305190},{"_id":"public/tags/机器学习/index.html","hash":"fb264d2406ee7fae77e79d121a3c109d3face19c","modified":1622089305190},{"_id":"public/tags/前端/index.html","hash":"0dcb817a0cfe0ad2f9d10fb8c52e64e405ec6543","modified":1622089305190},{"_id":"public/tags/随笔/index.html","hash":"cdb0fc284bf1d7ac9ce90c74bd45aacc851d61ab","modified":1622089305190},{"_id":"public/tags/题解/index.html","hash":"bfe0d0f02b1c8db9761b2df38f52852fa4417804","modified":1622089305190},{"_id":"public/tags/关于本站/index.html","hash":"5804603b3f5887df0eb915085e25e0c8529835b6","modified":1622089305190},{"_id":"public/dongtai/index.html","hash":"4947d354e27bf48ba843ecc3b3e09d627d935044","modified":1622089305190},{"_id":"public/2020/12/19/决策树-随机森林/index.html","hash":"58e5f0a7b0210a1960e581fe11d2153ff84310c1","modified":1622089305190},{"_id":"public/2020/08/27/haskell-hw/index.html","hash":"b8e4c6cec86acf8a7f5609cd44c09480139c7e8c","modified":1622089305190},{"_id":"public/2020/08/27/haskell/index.html","hash":"213f4259da6f1ecb93fa8a70b9ffc259a61a03a5","modified":1622089305190},{"_id":"public/2020/08/21/C语言的一些记录/index.html","hash":"eee440ebbb5ff003606ca6ace1802eaf20e877ae","modified":1622089305190},{"_id":"public/2020/08/16/曲率驱动/index.html","hash":"db10cbfbae8b85f4a3b0572cdc5a8814932643a7","modified":1622089305190},{"_id":"public/2020/08/11/关于Ubuntu/index.html","hash":"2a65f21c19d9a183def72da19eb2fcf601c5856c","modified":1622089305190},{"_id":"public/2020/08/09/百度之星2020/index.html","hash":"49da1581eafcb83e210e2a21789afded72417b75","modified":1622089305190},{"_id":"public/2020/08/08/百度之星2018复赛/index.html","hash":"55b04c3350a29452c688f85b2bf503301ea9c4df","modified":1622089305190},{"_id":"public/2020/08/06/SVD/index.html","hash":"e8cec55e85ec1d33a8fc875f0243ad8e5bef72df","modified":1622089305190},{"_id":"public/2020/08/05/jvm/index.html","hash":"e8dce0f9740ba258a00e749d49c5c3b99d537956","modified":1622089305190},{"_id":"public/2020/08/03/前端杂项/index.html","hash":"df3c927af1b7b7fd2879280b9e2ad8485b138eef","modified":1622089305190},{"_id":"public/2020/08/02/关于本站/index.html","hash":"ee9a6f8daadd3cc095c02291b996930303377729","modified":1622089305190},{"_id":"public/2020/08/01/胡言乱语/index.html","hash":"82f36df80dbdc4ec6d0686ebdb5d699c3faf6c0a","modified":1622089305190},{"_id":"public/archives/index.html","hash":"d9c6570e39d726572e9997473dbe29822f87c837","modified":1622089305190},{"_id":"public/archives/2020/index.html","hash":"3669fab04fa2d97cc566d442ff54b123a4694b51","modified":1622089305190},{"_id":"public/archives/2020/08/index.html","hash":"09e3a452d2297583c0f6ae29398ab60c52f36b78","modified":1622089305190},{"_id":"public/index.html","hash":"d081d738a66cf7342d952a81221f1e4fabb33703","modified":1622089305190},{"_id":"public/page/2/index.html","hash":"340dfb151468e0cbf7fe0b0db28f2ed0898eafbe","modified":1622089305190},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1608356140030},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1608356140030},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1608356140030},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1608356140030},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1608356140030},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1608356140030},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1608356140030},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1608356140030},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1608356140030},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1608356140030},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1608356140030},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1608356140030},{"_id":"public/lib/canvas-ribbon/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1608356140030},{"_id":"public/lib/pjax/LICENSE","hash":"2c7168814d9d35ea9500809b0904962f511eb4a8","modified":1608356140030},{"_id":"public/lib/pjax/index.d.ts","hash":"c452cd6e990eeeea10f7dbf17fefbc6845585bf6","modified":1608356140030},{"_id":"public/lib/three/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1608356140030},{"_id":"public/lib/three_waves/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1608356140030},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1608356140030},{"_id":"public/lib/pjax/tests/test.ts","hash":"5fc54ab37b36965037b2476e62adbc684cdd5537","modified":1608356140030},{"_id":"public/dongtai/foot.txt","hash":"6ecbf7302a29bbd8f47e12ae3915fc98fed03458","modified":1608356140030},{"_id":"public/dongtai/head.txt","hash":"af770b49377e3744e7fd9e1c4e77c531d1aff4e6","modified":1608356140030},{"_id":"public/dongtai/说说.py","hash":"a4868a985b7177ad3d0cf41d5616a5ce5cd44fd7","modified":1608356140030},{"_id":"public/dongtai/my.txt","hash":"7d78f703c8df5c34a17ce8e52f1163f1fd3a2fd9","modified":1608356140030},{"_id":"public/images/avatar.jpg","hash":"1a6ee155a232c2359b26c537ea2f027270d0ca6d","modified":1608356140030},{"_id":"public/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1608356140030},{"_id":"public/2020/08/05/jvm/jvmdata.png","hash":"052631e0795c4815a9c4a1533447a0b071993038","modified":1608356140030},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1608356140030},{"_id":"public/lib/blog-encrypt.js","hash":"785f2f93e63a7302df623febc143d9630918a222","modified":1608356140030},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1608356140030},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1608356140030},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1608356140030},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1608356140030},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1608356140030},{"_id":"public/2020/08/05/jvm/javastack.png","hash":"54b7d62cf8b6ebc34e0a13140720d856f1f474d6","modified":1608356140030},{"_id":"public/2020/08/05/jvm/javastack1.png","hash":"c4d667efac0db22041ef64befeb44ae123b54594","modified":1608356140030},{"_id":"public/2020/08/09/百度之星2020/公式1.png","hash":"c30e3b8d3077fb33bd80ebfd6f91bca0b0bf83c5","modified":1608356140030},{"_id":"public/2020/08/02/关于本站/test.jpg","hash":"d71fdab883e00b0135ea8b8b3ccc4b2d4f08b1e5","modified":1608356140030},{"_id":"public/2020/08/09/百度之星2020/公式2.png","hash":"8da2d92db5598ca8846515046211e27bd26b96de","modified":1608356140030},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1608356140030},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1608356140030},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1608356140030},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1608356140030},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1608356140030},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1608356140030},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1608356140030},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1608356140030},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1608356140030},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1608356140030},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1608356140030},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1608356140030},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1608356140030},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1608356140030},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1608356140030},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1608356140030},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1608356140030},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1608356140030},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1608356140030},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1608356140030},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1608356140030},{"_id":"public/images/b.jpg","hash":"c8a1174883e7954526818643f7213e1425603550","modified":1608356140030},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1608356140030},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1608356140030},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1608356140030},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1608356140030},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1608356140030},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1608356140030},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1608356140030},{"_id":"public/js/algolia-search.js","hash":"2cefa4101ef97a6de31574f2fcbca4448cdec723","modified":1608356140030},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1608356140030},{"_id":"public/js/fire.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1608356140030},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1608356140030},{"_id":"public/js/local-search.js","hash":"30e55cd06e4fd46827318edd1355b8e8af4e9c92","modified":1608356140030},{"_id":"public/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1608356140030},{"_id":"public/js/utils.js","hash":"3e28448b22da3831fe6e460e675e197ad1936d3c","modified":1608356140030},{"_id":"public/js/next-boot.js","hash":"3d64244a158b96a10f7ad7605597bc3a7eeff540","modified":1608356140030},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1608356140030},{"_id":"public/lib/canvas-ribbon/README.html","hash":"cbd2ebb4be869d420343199ee5c73e763b7afce1","modified":1608356140030},{"_id":"public/lib/pjax/CHANGELOG.html","hash":"1646dbdd1b80dcdb9b8704b1fcfe81345f5fcd6d","modified":1608356140030},{"_id":"public/lib/pjax/index.js","hash":"4af61bcf253ce67d67bb0f524b441869301de9a5","modified":1608356140030},{"_id":"public/lib/pjax/package.json","hash":"da55143475b12cb91a44aeb5a995c53879fe3326","modified":1608356140030},{"_id":"public/lib/three/README.html","hash":"4924f2ad2a8ca86e5646a0e28198af8791816907","modified":1608356140030},{"_id":"public/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1608356140030},{"_id":"public/lib/three/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1608356140030},{"_id":"public/lib/three/package.json","hash":"3e6a0c56ec47a38c0bf7b404f6e46965ec7d2e3d","modified":1608356140030},{"_id":"public/lib/three_waves/README.html","hash":"4e20cd8831f1cce4864388a8ac0966b5f7a59cfd","modified":1608356140030},{"_id":"public/lib/three_waves/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1608356140030},{"_id":"public/lib/three_waves/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1608356140030},{"_id":"public/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1608356140030},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1608356140030},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1608356140030},{"_id":"public/lib/pjax/example/forms.html","hash":"aa62fc6e697e17e16a947eb0176dc24e2e42d72c","modified":1608356140030},{"_id":"public/lib/pjax/example/example.js","hash":"48b27c93eb351d2fa91247c35038a9f1627e971a","modified":1608356140030},{"_id":"public/lib/pjax/example/index.html","hash":"4a00b556253eeb11fc10013c8c3940a019154001","modified":1608356140030},{"_id":"public/lib/pjax/example/page2.html","hash":"7654e0a5a471bec5d74fb88d9f2f218817afdd52","modified":1608356140030},{"_id":"public/lib/pjax/example/page3.html","hash":"8d1d6a9afd80caf29e5b22f10a849b23a864a6a4","modified":1608356140030},{"_id":"public/lib/pjax/lib/abort-request.js","hash":"cbae038c94f70163340801cb608f4e503640b88d","modified":1608356140030},{"_id":"public/lib/pjax/lib/eval-script.js","hash":"d5980b3c5f3c1a95427eab0d7d2263324fb72bca","modified":1608356140030},{"_id":"public/lib/pjax/lib/execute-scripts.js","hash":"8c7c18b14c11af7e2d8dd0146b7df428bf8149bb","modified":1608356140030},{"_id":"public/lib/pjax/lib/foreach-els.js","hash":"d8e50967878930891112f4acb46f47697ddc3ad7","modified":1608356140030},{"_id":"public/lib/pjax/lib/foreach-selectors.js","hash":"b11d36344a7a6aa36d533a335785772c9bfb6bc9","modified":1608356140030},{"_id":"public/lib/pjax/lib/is-supported.js","hash":"62ede7268080ab7efddd64fced8b3e79af2901f6","modified":1608356140030},{"_id":"public/lib/pjax/lib/parse-options.js","hash":"054a902e9f350f7414b80f62419da004dd90aa37","modified":1608356140030},{"_id":"public/lib/pjax/lib/send-request.js","hash":"15c341d066b0d60879ef3ca5ff858103381fb378","modified":1608356140030},{"_id":"public/lib/pjax/lib/switches-selectors.js","hash":"f31b4af163db3d9a5b3bb7c7534a4a2dd5543435","modified":1608356140030},{"_id":"public/lib/pjax/lib/uniqueid.js","hash":"eb127cf8936e5bdcaa7459cf5bd042ff96b5a387","modified":1608356140030},{"_id":"public/lib/pjax/lib/switches.js","hash":"4e283f667c10e0fea15e269f1c73ccb699979bb4","modified":1608356140030},{"_id":"public/lib/pjax/tests/setup.js","hash":"4a9489e72cbe98527931d95d68b68e2d6a9bff6e","modified":1608356140030},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1608356140030},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1608356140030},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1608356140030},{"_id":"public/lib/pjax/lib/events/off.js","hash":"79920b24246e150f1c73511f1a271b93b9c5d9c8","modified":1608356140030},{"_id":"public/lib/pjax/lib/events/on.js","hash":"111fba16cc4ca701aefedea2589c832b60af303d","modified":1608356140030},{"_id":"public/lib/pjax/lib/proto/attach-form.js","hash":"b41c66e58897e6371fbd04cd2b9eb7bae10e0d89","modified":1608356140030},{"_id":"public/lib/pjax/lib/events/trigger.js","hash":"c05ba73199c5e2c7682655491ed37743bd451751","modified":1608356140030},{"_id":"public/lib/pjax/lib/proto/handle-response.js","hash":"f68bab958cce4dbbcb91920d7a8aba55b9066b41","modified":1608356140030},{"_id":"public/lib/pjax/lib/proto/attach-link.js","hash":"d15a61235aa8c1615e60ea34d9bbee834be804d0","modified":1608356140030},{"_id":"public/lib/pjax/lib/proto/log.js","hash":"c728730594aed7d81509787c5bb487af014415e1","modified":1608356140030},{"_id":"public/lib/pjax/lib/proto/parse-element.js","hash":"52bef8a845aab0d54907f73875fa58b4084019be","modified":1608356140030},{"_id":"public/lib/pjax/lib/util/clone.js","hash":"55027b88e007818c6963205fcd0090a61af8237c","modified":1608356140030},{"_id":"public/lib/pjax/lib/util/contains.js","hash":"fcc9be0477d941b7c4ba71de328773e556ded7ce","modified":1608356140030},{"_id":"public/lib/pjax/lib/util/noop.js","hash":"2c9f7e231af1a62db195875ca62df7edc253c3c4","modified":1608356140030},{"_id":"public/lib/pjax/lib/util/extend.js","hash":"e599aaef93e3a00ccbd92cd87df09898d712e398","modified":1608356140030},{"_id":"public/lib/pjax/lib/util/update-query-string.js","hash":"eefcbff322f8c607865d47ee8fa49f1c8bfa8d7a","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/eval-scripts.js","hash":"3c9125a04cec9d511f16f9311656533ef6a115d1","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/abort-request.js","hash":"96d7a604ca275455199bd94d16b9cdc254bee9b9","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/events.js","hash":"70ca7ec140d1dcf8c4958e7b6788b09ef2b60181","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/foreach-els.js","hash":"85995dd27d0d866cfaf5c560732fab8b0099938c","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/execute-scripts.js","hash":"2d02a0151ead9924516cdae9308f8667b27a7ea7","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/foreach-selectors.js","hash":"898b48ef191719070488f16a54fba8a794b10057","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/is-supported.js","hash":"e25c7e69c8b7a64a44affcae317adb2b3889aee6","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/parse-options.js","hash":"45ab302da33e5457a71fd22bbd082e51f5b06b49","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/send-request.js","hash":"d6adad7f95754c53b9885c0999a5118995fdc76f","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/switch-selectors.js","hash":"993dd67b1b629288feb8d167fb12b602626cf1d5","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/switches.js","hash":"f5dfdf57bafd2b4edd5f854d70837b5fe760756e","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/proto/attach-form.js","hash":"3614a962e3185b354a2e0d987bcecdef4a209da6","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/uniqueid.js","hash":"430550f31b9e6356c2e3a033c1b418bd6acd9667","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/proto/handle-response.js","hash":"26e0e334f0b20ff2fe75b3ab12a93ce44a5823f0","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/util/clone.js","hash":"4b0e62bd0f4eef3549b0da70987f63ce4953bef0","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/proto/attach-link.js","hash":"9d283cb0b09730e932673c73a3352a2d2e8939fa","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/util/contains.js","hash":"bc0c8be855e9736cb256a2aa44fd46f3a7d1d6c5","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/proto/parse-element.js","hash":"474edc8844028de67cbad054da79c05727620785","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/util/extend.js","hash":"d45488ff6f8e3e1b59a62d0c88c86b750fe50ed4","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/util/update-query-string.js","hash":"4158dcd877c5f229400417e0da22eb4c5b8e8e38","modified":1608356140030},{"_id":"public/lib/pjax/tests/lib/util/noop.js","hash":"6959a4c02c41453a5edfa4163e36752fcfa3edf9","modified":1608356140030},{"_id":"public/css/main.css","hash":"b487d9c497308f0309f5291f5ad023944c8f217b","modified":1608356140030},{"_id":"public/images/background.jpg","hash":"3ca56b373a9662b58b635c20fddcc5c5013ad1e8","modified":1608356140030},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1608356140030},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1608356140030},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1608356140030},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1608356140030},{"_id":"public/lib/pjax/README.html","hash":"792ead2152f45db8cfccfe2b003fa87b588c4df3","modified":1608356140030},{"_id":"public/lib/pjax/pjax.min.js","hash":"68d0c6ad28f042c78fc18a6e9d782a7047c01905","modified":1608356140030},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1608356140030},{"_id":"public/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1608356140030},{"_id":"public/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1608356140030},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1608356140030},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1608356140030},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1608356140030},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1608356140030},{"_id":"public/lib/pjax/pjax.js","hash":"e973e2c6ffb6f6d7b4a1730ba0ed6d3628b2b39f","modified":1608356140030},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1608356140030},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1608356140030},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1608356140030},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1608356140030},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1608356140030},{"_id":"public/2020/08/03/前端杂项/htm.jpg","hash":"2cea73ad4265695d1ae855cbe0dc81d2f82f0b76","modified":1608356140030},{"_id":"source/_posts/just-for-test.md","hash":"4a0a2c3406f0646fe6c202eefaffabe2c6fe94cd","modified":1608359276847},{"_id":"public/2020/12/19/just-for-test/index.html","hash":"edf8913f7fa76650e2a92f8736825923500939e8","modified":1608359335071},{"_id":"source/_posts/多终端操作.md","hash":"0133ad65653c854f6fd141b54e039c9ee8c80314","modified":1621682476765},{"_id":"public/2020/12/19/多终端操作/index.html","hash":"2297055d29a2a86630f01045554f12bd5356c245","modified":1622089305190},{"_id":"source/_posts/AtCoderRegularContest111.md","hash":"5ba5058b9ad6e9d3652888b7bf0d12cc5c4ee374","modified":1610203150120},{"_id":"source/_posts/AtCoderRegularContest111/new-year-5798330__340.png","hash":"d2c67df5a2a9bab55c80aa0dfbf46f862f159f40","modified":1610202528121},{"_id":"public/archives/2021/index.html","hash":"92d7016e21780c92f88cf6ceb43bf24ddf42d2ea","modified":1622089305190},{"_id":"public/archives/2021/01/index.html","hash":"9dc7b10e995d3aa3a4837f7e13743e79080bac78","modified":1622089305190},{"_id":"public/2021/01/09/AtCoderRegularContest111/index.html","hash":"65ca27e3529db1713a32ba4630a77b8554655f81","modified":1622089305190},{"_id":"public/2021/01/09/AtCoderRegularContest111/new-year-5798330__340.png","hash":"d2c67df5a2a9bab55c80aa0dfbf46f862f159f40","modified":1610202687447},{"_id":"source/_posts/CMOS.md","hash":"86ec10b8e87c5d69a2430d94a18651aaf3800d05","modified":1611234946112},{"_id":"public/2021/01/21/CMOS/index.html","hash":"4195543daf619dc8c8083a09b6e28f89ab7deab2","modified":1622089305190},{"_id":"public/tags/OS/index.html","hash":"11d76cd7392aa8b8c2c610b9f7bf8ab67acb5831","modified":1622089305190},{"_id":"source/_posts/Make-and-Signal.md","hash":"4fda60c555c371e93dc4dea75d70a83ddb9f7cad","modified":1617774927414},{"_id":"public/archives/2021/02/index.html","hash":"9818c39fb75dccab37bcb0818bd894b7f8644612","modified":1622089305190},{"_id":"public/tags/os/index.html","hash":"15cf8e1cb1d8ebe8530546630633789bd52c34df","modified":1622089305190},{"_id":"public/2021/02/02/Make-and-Signal/index.html","hash":"aa46d7e18ac1c77a79987a769165711c5092a370","modified":1622089305190},{"_id":"source/_posts/防止条件丢失.md","hash":"0e0722eb3d88fbde6f9e97e05040625ecf335b96","modified":1622089132016},{"_id":"public/archives/2021/04/index.html","hash":"68bc01844a8abb64cd6983caa91d0d082fba0c05","modified":1622089305190},{"_id":"public/2021/04/08/防止条件丢失/index.html","hash":"cdf5c76d2bace9eaf1d77dcf734521fd3665662e","modified":1622089305190},{"_id":"source/_posts/iterator.md","hash":"9eb803a15660373a7e3f12f5f0ebbefce1ddffe2","modified":1622089046008},{"_id":"public/2021/04/16/iterator/index.html","hash":"e3e7be7fbe26aca8ef7f967714447d46661898f7","modified":1622089305190},{"_id":"public/tags/C/index.html","hash":"c69df12bdc3a1700327c5ef46be40dea88ed0a0d","modified":1622089305190},{"_id":"source/_posts/网络.md","hash":"4f6602ad57e49616e15600d7ef5a741f70e127ee","modified":1622033919484},{"_id":"source/_posts/操作系统.md","hash":"3b7e290afbb05ac42c43f3a3bb4e16006470e78d","modified":1621998114646},{"_id":"source/_posts/网络/img1.png","hash":"f98c57a206146e8949fce1345709ced7c6ceea7c","modified":1622031209517},{"_id":"source/_posts/防止条件丢失/campaign-6269159.jpg","hash":"9afe00b6766c99567e159e7fb3f6c3f5b9b7fced","modified":1622088837531},{"_id":"source/_posts/iterator/lake-6256628.jpg","hash":"97d82f04656db03988363f1fc4a0a53798cd8063","modified":1622088680207},{"_id":"public/archives/page/3/index.html","hash":"6ac178a2ec12022d83846f2571b1ef6f41f87a0f","modified":1622089305190},{"_id":"public/archives/2021/05/index.html","hash":"ec652097715efc763b2b1d90ca1528c765adad7d","modified":1622089305190},{"_id":"public/2021/05/26/操作系统/index.html","hash":"b6214845cc6eb1a2af15442ed06b7c3ffe103e97","modified":1622089305190},{"_id":"public/2021/05/24/网络/index.html","hash":"8ad41de5eff86b39544b09c8a7fe9122fb3bae70","modified":1622089305190},{"_id":"public/page/3/index.html","hash":"8fc90b689e1b98a9a8bf5f8b1d9c650e0dd78b90","modified":1622089305190},{"_id":"public/2021/05/24/网络/img1.png","hash":"f98c57a206146e8949fce1345709ced7c6ceea7c","modified":1622089305190},{"_id":"public/2021/04/08/防止条件丢失/campaign-6269159.jpg","hash":"9afe00b6766c99567e159e7fb3f6c3f5b9b7fced","modified":1622089305190},{"_id":"public/2021/04/16/iterator/lake-6256628.jpg","hash":"97d82f04656db03988363f1fc4a0a53798cd8063","modified":1622089305190}],"Category":[],"Data":[{"_id":"styles","data":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n"},{"_id":"styles - 副本","data":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}],"Page":[{"title":"categories","date":"2020-08-01T01:56:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-08-01 09:56:39\ntype: \"categories\"\n---\n","updated":"2020-08-01T01:58:04.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckiv9pxdb0000rouj2zmwbwm6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"","more":""},{"title":"动态","date":"2020-08-04T02:20:04.000Z","type":"dongtai","_content":"<style>\n#scontent {\nbackground-color: #fff;\npadding: 10px;\nmin-height: 500px;\n}\n\n\nbody.theme-dark .ctmline::before {\nbackground: RGBA(255, 255, 255, 0.06);\n}\n\nul.ctmline {\npadding: 0;\n}\n\ndiv class.ctmlabel > li .cbp_tmlabel {\nmargin-bottom: 0;\n}\n\n.ctmline {\nmargin: 30px 0 0 0;\npadding: 0;\nlist-style: none;\nposition: relative;\n}\n/* The line */\n\n.ctmline:before {\ncontent: '';\nposition: absolute;\ntop: 0;\nbottom: 0;\nwidth: 4px;\nbackground: RGBA(0, 0, 0, 0.02);\nleft: 80px;\nmargin-left: 10px;\n}\n\n.ctmline > li .cbp_tmtime {\ndisplay: block;\nmax-width: 70px;\nposition: absolute;\n}\n\n.ctmline > li .cbp_tmtime span {\ndisplay: block;\ntext-align: right;\n}\n\n.ctmline > li .cbp_tmtime span:first-child {\nfont-size: 0.9em;\ncolor: #f2f22a;\n}\n\n.ctmline > li .cbp_tmtime span:last-child {\nfont-size: 1.2em;\ncolor: #7afdfa;\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmtime span:last-child {\ncolor: RGBA(102,102,102, 0.75);\n}\n\ndiv.cbp_tmlabel > p {\nmargin-bottom: 0;\n}\n\n.ctmline > li .cbp_tmlabel {\nmargin: 0 0 45px 65px;\n/*background: #9BCD9B;*/\nbackground: #666666;\ncolor: #fff;\npadding: .8em 1.2em .4em 1.2em;\n/* font-size: 1.2em; */\nfont-weight: 300;\nline-height: 1.4;\nposition: relative;\nborder-radius: 5px;\ntransition: all 0.3s ease 0s;\nbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\ncursor: pointer;\ndisplay: block;\n}\n\n.cbp_tmlabel:hover {\n/* transform:scale(1.05); */\ntransform: translateY(-3px);\nz-index: 1;\nbox-shadow: 0 15px 32px rgba(0, 0, 0, 0.15) !important\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmlabel {\nbackground: RGBA(102,102,102, 0.75);\n}\n\n.ctmline > li .cbp_tmlabel:after {\nright: 100%;\nborder: solid transparent;\ncontent: \" \";\nheight: 0;\nwidth: 0;\nposition: absolute;\npointer-events: none;\nborder-right-color: #666666;\nborder-width: 10px;\ntop: 4px;\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmlabel:after {\nborder-right-color: RGBA(102,102,102, 0.75);\n}\n\np.shuoshuo_time {\nmargin-top: 10px;\nborder-top: 1px dashed #fff;\npadding-top: 5px;\n}\n/* Media */\n\n@media screen and (max-width: 65.375em) {\n.ctmline > li .cbp_tmtime span:last-child {\nfont-size: 1.2em;\n}\n}\n\n.touxiang img {\nborder: 1px solid #ddd;\npadding: 2px;\nfloat: left;\nborder-radius: 64px;\ntransition: all 1.0s;\n}\n\n.avatar {\nborder-radius: 100% !important;\n-moz-border-radius: 100% !important;\nbox-shadow: inset 0 -1px 0 3333sf;\n-webkit-box-shadow: inset 0 -1px 0 3333sf;\n-webkit-transition: 0.4s;\n-webkit-transition: -webkit-transform 0.4s ease-out;\ntransition: transform 0.4s ease-out;\n-moz-transition: -moz-transform 0.4s ease-out;\n}\n\n.zhuan {\ntransform: rotateZ(720deg);\n-webkit-transform: rotateZ(720deg);\n-moz-transform: rotateZ(720deg);\n}\n</style>\n\n\n\n<div id=\"scontent\">\n<ul class=\"ctmline\">\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>游客是你，风景是我。</p>\n<p></p>\n<iframe frameborder='no' border='0' marginwidth='0' marginheight='0' width=340 height=86 src='//music.163.com/outchain/player?type=2&id=316510&auto=0&height=66'></iframe>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-15 18:11:20\n</p></a></li>\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>欢迎来玩呀~</p>\n<p></p>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-04 12:15:30\n</p></a></li>\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>小站开张了。</p>\n<p></p>\n<p> <img src='https://wx1.sbimg.cn/2020/08/04/PfRkU.jpg'></p>\n<p></p>\n<iframe frameborder='no' border='0' marginwidth='0' marginheight='0' width=340 height=86 src='//music.163.com/outchain/player?type=2&id=1456495375&auto=0&height=66'></iframe>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-04 12:00:27\n</p></a></li>\n</ul></div>\n","source":"dongtai/index.md","raw":"---\ntitle: 动态\ndate: 2020-08-04 10:20:04\ntype: dongtai\n---\n<style>\n#scontent {\nbackground-color: #fff;\npadding: 10px;\nmin-height: 500px;\n}\n\n\nbody.theme-dark .ctmline::before {\nbackground: RGBA(255, 255, 255, 0.06);\n}\n\nul.ctmline {\npadding: 0;\n}\n\ndiv class.ctmlabel > li .cbp_tmlabel {\nmargin-bottom: 0;\n}\n\n.ctmline {\nmargin: 30px 0 0 0;\npadding: 0;\nlist-style: none;\nposition: relative;\n}\n/* The line */\n\n.ctmline:before {\ncontent: '';\nposition: absolute;\ntop: 0;\nbottom: 0;\nwidth: 4px;\nbackground: RGBA(0, 0, 0, 0.02);\nleft: 80px;\nmargin-left: 10px;\n}\n\n.ctmline > li .cbp_tmtime {\ndisplay: block;\nmax-width: 70px;\nposition: absolute;\n}\n\n.ctmline > li .cbp_tmtime span {\ndisplay: block;\ntext-align: right;\n}\n\n.ctmline > li .cbp_tmtime span:first-child {\nfont-size: 0.9em;\ncolor: #f2f22a;\n}\n\n.ctmline > li .cbp_tmtime span:last-child {\nfont-size: 1.2em;\ncolor: #7afdfa;\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmtime span:last-child {\ncolor: RGBA(102,102,102, 0.75);\n}\n\ndiv.cbp_tmlabel > p {\nmargin-bottom: 0;\n}\n\n.ctmline > li .cbp_tmlabel {\nmargin: 0 0 45px 65px;\n/*background: #9BCD9B;*/\nbackground: #666666;\ncolor: #fff;\npadding: .8em 1.2em .4em 1.2em;\n/* font-size: 1.2em; */\nfont-weight: 300;\nline-height: 1.4;\nposition: relative;\nborder-radius: 5px;\ntransition: all 0.3s ease 0s;\nbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\ncursor: pointer;\ndisplay: block;\n}\n\n.cbp_tmlabel:hover {\n/* transform:scale(1.05); */\ntransform: translateY(-3px);\nz-index: 1;\nbox-shadow: 0 15px 32px rgba(0, 0, 0, 0.15) !important\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmlabel {\nbackground: RGBA(102,102,102, 0.75);\n}\n\n.ctmline > li .cbp_tmlabel:after {\nright: 100%;\nborder: solid transparent;\ncontent: \" \";\nheight: 0;\nwidth: 0;\nposition: absolute;\npointer-events: none;\nborder-right-color: #666666;\nborder-width: 10px;\ntop: 4px;\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmlabel:after {\nborder-right-color: RGBA(102,102,102, 0.75);\n}\n\np.shuoshuo_time {\nmargin-top: 10px;\nborder-top: 1px dashed #fff;\npadding-top: 5px;\n}\n/* Media */\n\n@media screen and (max-width: 65.375em) {\n.ctmline > li .cbp_tmtime span:last-child {\nfont-size: 1.2em;\n}\n}\n\n.touxiang img {\nborder: 1px solid #ddd;\npadding: 2px;\nfloat: left;\nborder-radius: 64px;\ntransition: all 1.0s;\n}\n\n.avatar {\nborder-radius: 100% !important;\n-moz-border-radius: 100% !important;\nbox-shadow: inset 0 -1px 0 3333sf;\n-webkit-box-shadow: inset 0 -1px 0 3333sf;\n-webkit-transition: 0.4s;\n-webkit-transition: -webkit-transform 0.4s ease-out;\ntransition: transform 0.4s ease-out;\n-moz-transition: -moz-transform 0.4s ease-out;\n}\n\n.zhuan {\ntransform: rotateZ(720deg);\n-webkit-transform: rotateZ(720deg);\n-moz-transform: rotateZ(720deg);\n}\n</style>\n\n\n\n<div id=\"scontent\">\n<ul class=\"ctmline\">\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>游客是你，风景是我。</p>\n<p></p>\n<iframe frameborder='no' border='0' marginwidth='0' marginheight='0' width=340 height=86 src='//music.163.com/outchain/player?type=2&id=316510&auto=0&height=66'></iframe>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-15 18:11:20\n</p></a></li>\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>欢迎来玩呀~</p>\n<p></p>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-04 12:15:30\n</p></a></li>\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>小站开张了。</p>\n<p></p>\n<p> <img src='https://wx1.sbimg.cn/2020/08/04/PfRkU.jpg'></p>\n<p></p>\n<iframe frameborder='no' border='0' marginwidth='0' marginheight='0' width=340 height=86 src='//music.163.com/outchain/player?type=2&id=1456495375&auto=0&height=66'></iframe>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-04 12:00:27\n</p></a></li>\n</ul></div>\n","updated":"2020-08-15T10:11:22.000Z","path":"dongtai/index.html","comments":1,"layout":"page","_id":"ckiv9pxdf0002rouje7i58z9o","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><style>\n#scontent {\nbackground-color: #fff;\npadding: 10px;\nmin-height: 500px;\n}\n\n\nbody.theme-dark .ctmline::before {\nbackground: RGBA(255, 255, 255, 0.06);\n}\n\nul.ctmline {\npadding: 0;\n}\n\ndiv class.ctmlabel > li .cbp_tmlabel {\nmargin-bottom: 0;\n}\n\n.ctmline {\nmargin: 30px 0 0 0;\npadding: 0;\nlist-style: none;\nposition: relative;\n}\n/* The line */\n\n.ctmline:before {\ncontent: '';\nposition: absolute;\ntop: 0;\nbottom: 0;\nwidth: 4px;\nbackground: RGBA(0, 0, 0, 0.02);\nleft: 80px;\nmargin-left: 10px;\n}\n\n.ctmline > li .cbp_tmtime {\ndisplay: block;\nmax-width: 70px;\nposition: absolute;\n}\n\n.ctmline > li .cbp_tmtime span {\ndisplay: block;\ntext-align: right;\n}\n\n.ctmline > li .cbp_tmtime span:first-child {\nfont-size: 0.9em;\ncolor: #f2f22a;\n}\n\n.ctmline > li .cbp_tmtime span:last-child {\nfont-size: 1.2em;\ncolor: #7afdfa;\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmtime span:last-child {\ncolor: RGBA(102,102,102, 0.75);\n}\n\ndiv.cbp_tmlabel > p {\nmargin-bottom: 0;\n}\n\n.ctmline > li .cbp_tmlabel {\nmargin: 0 0 45px 65px;\n/*background: #9BCD9B;*/\nbackground: #666666;\ncolor: #fff;\npadding: .8em 1.2em .4em 1.2em;\n/* font-size: 1.2em; */\nfont-weight: 300;\nline-height: 1.4;\nposition: relative;\nborder-radius: 5px;\ntransition: all 0.3s ease 0s;\nbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\ncursor: pointer;\ndisplay: block;\n}\n\n.cbp_tmlabel:hover {\n/* transform:scale(1.05); */\ntransform: translateY(-3px);\nz-index: 1;\nbox-shadow: 0 15px 32px rgba(0, 0, 0, 0.15) !important\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmlabel {\nbackground: RGBA(102,102,102, 0.75);\n}\n\n.ctmline > li .cbp_tmlabel:after {\nright: 100%;\nborder: solid transparent;\ncontent: \" \";\nheight: 0;\nwidth: 0;\nposition: absolute;\npointer-events: none;\nborder-right-color: #666666;\nborder-width: 10px;\ntop: 4px;\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmlabel:after {\nborder-right-color: RGBA(102,102,102, 0.75);\n}\n\np.shuoshuo_time {\nmargin-top: 10px;\nborder-top: 1px dashed #fff;\npadding-top: 5px;\n}\n/* Media */\n\n@media screen and (max-width: 65.375em) {\n.ctmline > li .cbp_tmtime span:last-child {\nfont-size: 1.2em;\n}\n}\n\n.touxiang img {\nborder: 1px solid #ddd;\npadding: 2px;\nfloat: left;\nborder-radius: 64px;\ntransition: all 1.0s;\n}\n\n.avatar {\nborder-radius: 100% !important;\n-moz-border-radius: 100% !important;\nbox-shadow: inset 0 -1px 0 3333sf;\n-webkit-box-shadow: inset 0 -1px 0 3333sf;\n-webkit-transition: 0.4s;\n-webkit-transition: -webkit-transform 0.4s ease-out;\ntransition: transform 0.4s ease-out;\n-moz-transition: -moz-transform 0.4s ease-out;\n}\n\n.zhuan {\ntransform: rotateZ(720deg);\n-webkit-transform: rotateZ(720deg);\n-moz-transform: rotateZ(720deg);\n}\n</style>\n\n\n\n<div id=\"scontent\">\n<ul class=\"ctmline\">\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>游客是你，风景是我。</p>\n<p></p>\n<iframe frameborder='no' border='0' marginwidth='0' marginheight='0' width=340 height=86 src='//music.163.com/outchain/player?type=2&id=316510&auto=0&height=66'></iframe>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-15 18:11:20\n</p></a></li>\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>欢迎来玩呀~</p>\n<p></p>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-04 12:15:30\n</p></a></li>\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>小站开张了。</p>\n<p></p>\n<p> <img src='https://wx1.sbimg.cn/2020/08/04/PfRkU.jpg'></p>\n<p></p>\n<iframe frameborder='no' border='0' marginwidth='0' marginheight='0' width=340 height=86 src='//music.163.com/outchain/player?type=2&id=1456495375&auto=0&height=66'></iframe>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-04 12:00:27\n</p></a></li>\n</ul></div>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"","more":"<style>\n#scontent {\nbackground-color: #fff;\npadding: 10px;\nmin-height: 500px;\n}\n\n\nbody.theme-dark .ctmline::before {\nbackground: RGBA(255, 255, 255, 0.06);\n}\n\nul.ctmline {\npadding: 0;\n}\n\ndiv class.ctmlabel > li .cbp_tmlabel {\nmargin-bottom: 0;\n}\n\n.ctmline {\nmargin: 30px 0 0 0;\npadding: 0;\nlist-style: none;\nposition: relative;\n}\n/* The line */\n\n.ctmline:before {\ncontent: '';\nposition: absolute;\ntop: 0;\nbottom: 0;\nwidth: 4px;\nbackground: RGBA(0, 0, 0, 0.02);\nleft: 80px;\nmargin-left: 10px;\n}\n\n.ctmline > li .cbp_tmtime {\ndisplay: block;\nmax-width: 70px;\nposition: absolute;\n}\n\n.ctmline > li .cbp_tmtime span {\ndisplay: block;\ntext-align: right;\n}\n\n.ctmline > li .cbp_tmtime span:first-child {\nfont-size: 0.9em;\ncolor: #f2f22a;\n}\n\n.ctmline > li .cbp_tmtime span:last-child {\nfont-size: 1.2em;\ncolor: #7afdfa;\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmtime span:last-child {\ncolor: RGBA(102,102,102, 0.75);\n}\n\ndiv.cbp_tmlabel > p {\nmargin-bottom: 0;\n}\n\n.ctmline > li .cbp_tmlabel {\nmargin: 0 0 45px 65px;\n/*background: #9BCD9B;*/\nbackground: #666666;\ncolor: #fff;\npadding: .8em 1.2em .4em 1.2em;\n/* font-size: 1.2em; */\nfont-weight: 300;\nline-height: 1.4;\nposition: relative;\nborder-radius: 5px;\ntransition: all 0.3s ease 0s;\nbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\ncursor: pointer;\ndisplay: block;\n}\n\n.cbp_tmlabel:hover {\n/* transform:scale(1.05); */\ntransform: translateY(-3px);\nz-index: 1;\nbox-shadow: 0 15px 32px rgba(0, 0, 0, 0.15) !important\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmlabel {\nbackground: RGBA(102,102,102, 0.75);\n}\n\n.ctmline > li .cbp_tmlabel:after {\nright: 100%;\nborder: solid transparent;\ncontent: \" \";\nheight: 0;\nwidth: 0;\nposition: absolute;\npointer-events: none;\nborder-right-color: #666666;\nborder-width: 10px;\ntop: 4px;\n}\n\n.ctmline > li:nth-child(odd) .cbp_tmlabel:after {\nborder-right-color: RGBA(102,102,102, 0.75);\n}\n\np.shuoshuo_time {\nmargin-top: 10px;\nborder-top: 1px dashed #fff;\npadding-top: 5px;\n}\n/* Media */\n\n@media screen and (max-width: 65.375em) {\n.ctmline > li .cbp_tmtime span:last-child {\nfont-size: 1.2em;\n}\n}\n\n.touxiang img {\nborder: 1px solid #ddd;\npadding: 2px;\nfloat: left;\nborder-radius: 64px;\ntransition: all 1.0s;\n}\n\n.avatar {\nborder-radius: 100% !important;\n-moz-border-radius: 100% !important;\nbox-shadow: inset 0 -1px 0 3333sf;\n-webkit-box-shadow: inset 0 -1px 0 3333sf;\n-webkit-transition: 0.4s;\n-webkit-transition: -webkit-transform 0.4s ease-out;\ntransition: transform 0.4s ease-out;\n-moz-transition: -moz-transform 0.4s ease-out;\n}\n\n.zhuan {\ntransform: rotateZ(720deg);\n-webkit-transform: rotateZ(720deg);\n-moz-transform: rotateZ(720deg);\n}\n</style>\n\n\n\n<div id=\"scontent\">\n<ul class=\"ctmline\">\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>游客是你，风景是我。</p>\n<p></p>\n<iframe frameborder='no' border='0' marginwidth='0' marginheight='0' width=340 height=86 src='//music.163.com/outchain/player?type=2&id=316510&auto=0&height=66'></iframe>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-15 18:11:20\n</p></a></li>\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>欢迎来玩呀~</p>\n<p></p>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-04 12:15:30\n</p></a></li>\n<li> <span class ='touxiang'> <img src='https://wx2.sbimg.cn/2020/08/04/PfKBn.jpg' class ='avatar avatar-48 zhuan' width='48' height='48'> </span>\n<a class ='cbp_tmlabel' href=''>\n<p></p>\n<p>小站开张了。</p>\n<p></p>\n<p> <img src='https://wx1.sbimg.cn/2020/08/04/PfRkU.jpg'></p>\n<p></p>\n<iframe frameborder='no' border='0' marginwidth='0' marginheight='0' width=340 height=86 src='//music.163.com/outchain/player?type=2&id=1456495375&auto=0&height=66'></iframe>\n<p>&nbsp;</p>\n<p class='shuoshuo_time'><i class='fa fa-clock-o'></i>\n2020-08-04 12:00:27\n</p></a></li>\n</ul></div>\n"},{"title":"留言板","date":"2020-08-01T01:56:51.000Z","type":"about","comments":1,"_content":"","source":"about/index.md","raw":"---\ntitle: 留言板\ndate: 2020-08-01 09:56:51\ntype: \"about\"\ncomments: true\n---\n","updated":"2020-08-02T08:44:34.000Z","path":"about/index.html","layout":"page","_id":"ckiv9pxdi0005roujfkcy7en9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"","more":""},{"title":"photos","date":"2020-08-02T08:38:12.000Z","_content":"","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2020-08-02 16:38:12\n---\n","updated":"2020-08-02T08:38:14.000Z","path":"photos/index.html","comments":1,"layout":"page","_id":"ckiv9pxdj0007rouj6j7398fm","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"","more":""},{"title":"tags","date":"2020-08-01T01:56:25.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-08-01 09:56:25\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-08-01T09:50:10.000Z","path":"tags/index.html","layout":"page","_id":"ckiv9pxdj0008rouj1q0j0naq","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"","more":""}],"Post":[{"title":"C语言的一些记录","date":"2020-08-21T15:00:15.000Z","_content":"\n* 指针类型大小都为8\n* 文件指针不关闭会导致内存泄漏\n<!--More-->\n```cpp\n//test.cpp\n#include<stdio.h>\nint main()\n{\n  FILE *f = fopen(\"a.txt\",\"r\");\n  return 0;\n}\n```\n\n```bash\nvalgrind --leak-check=full --show-reachable=yes --trace-children=yes   ./test\n```\n```bash\n==333== Memcheck, a memory error detector\n==333== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==333== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\n==333== Command: ./test\n==333==\n==333== error calling PR_SET_PTRACER, vgdb might block\n==333==\n==333== HEAP SUMMARY:\n==333==     in use at exit: 472 bytes in 1 blocks\n==333==   total heap usage: 1 allocs, 0 frees, 472 bytes allocated\n==333==\n==333== 472 bytes in 1 blocks are still reachable in loss record 1 of 1\n==333==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\n==333==    by 0x48E0AAD: __fopen_internal (iofopen.c:65)\n==333==    by 0x48E0AAD: fopen@@GLIBC_2.2.5 (iofopen.c:86)\n==333==\n==333== LEAK SUMMARY:\n==333==    definitely lost: 0 bytes in 0 blocks\n==333==    indirectly lost: 0 bytes in 0 blocks\n==333==      possibly lost: 0 bytes in 0 blocks\n==333==    still reachable: 472 bytes in 1 blocks\n==333==         suppressed: 0 bytes in 0 blocks\n==333==\n==333== For lists of detected and suppressed errors, rerun with: -s\n==333== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n```\n### C语言判断文件是否存在\naccess函数判断文件夹或者文件是否存在\n```C\nint access(const char *filename, int mode);\n\nfilename：可以填写文件夹路径或者文件路径\n\nmode：0 （F_OK） 只判断是否存在\n      2 （R_OK） 判断写入权限\n      4 （W_OK） 判断读取权限\n      6 （X_OK） 判断执行权限\n```\n用于判断文件夹是否存在的时候，mode取0，判断文件是否存在的时候，mode可以取0、2、4、6。 若存在或者具有权限，返回值为0；\n不存在或者无权限，返回值为-1。\nfopen函数判断文件是否存在\n\n函数原型：FILE *fopen (char *filename, char *type);\n\nfilename：文件路径\n\ntype：打开文件的方式（有r、w、r+、w+、a、rb、wb等等）\n\n用于判断文件是否存在可以使用 r 或者 rb ，因为使用其它方式的话，可能会自动建立文件。 返回值为NULL（打不开）和正数（能打开）。\n\n### unlink函数\n```C\n#include<unistd.h>\nint unlink(const char *pathname);\n\nif(unlink(\"test.txt\") < 0)\n{\n        printf(\"unlink errpr!\\n\");\n}\n```\n\n\n* 结构体定义在`xx.c`文件，其他文件通过`#include \"xx.h\"`使用该结构体会报错：不允许使用不完整类型\n只能把结构体定义在.h文件里面\n\n* 把数据内容type a存入char数组s\nmemcpy(s,&a,sizeof(type))\n\n* 不能对宏定义的常量进行取地址操作\n\n### 编译相关\n* gcc 生成文件跟在-o后面就行\n* 编译含math库函数时，要加-lm\n\n### 多进程相关\n* 创建n个进程\n```C\nint i;\nfor(i = 0; i < n; i++){\n   pid = fork();\n   if(pid == 0)break;\n}\n```\n* 子进程会拷贝fork语句之前的内容\n* 共享内存\n```C\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/shm.h>  // for using shared memory\n\nint size_bytes = length * sizeof(int);\nint shmid = shmget(IPC_PRIVATE, size_bytes, 0666 | IPC_CREAT);\nint * arr = shmat(shmid, 0, 0);\n```\n* 信号\n```C\n#include <sys/wait.h>\n#include <unistd.h>\n\n//向进程pid发送信号\nkill(pid,SIGCONT);\n\n//接收信号并处理,handler 为处理函数，只带一个int参数，返回值为void\nsignal(SIGCONT,handler);\n```\n\n* 访问临界数据必须加互斥锁\n* 指针 + 1产生的偏移量取决于指针类型\n* sizeof(size_t) == 8\n\n### 杂项\n\nQ:使用#ifndef在头文件中定义全局变量，然后两个.c文件分别访问(#include)，编译时就会出现multiple definition的提示，但是已经使用了条件编译，理论上第二次应该跳过定义过程，这是为什么呢？\n\nA:这类条件编译是为了防止同一个.c文件包含同一个头文件多次。\n每一个.c文件最后都会编译生成对应的.obj文件的。所以你的两个.c文件对应的两个.obj文件都会有你说的那个全局变量的，链接的时候，链接器就会发现有定义了两个同名变量，于是就报multiple definition错误。\n正确的做法是：是其中一个.c文件定义这个变量，在另外一个.c文件用extern声明,确保只定义一次，而声明则可以多次\n因为头文件很容易被不同的.c文件include，生成多个.obj目标文件，因此正确的做法就是不要在头文件中定义全局变量，而应该在.c/.cpp文件中定义\n\n\n\n安装libreadline-dev\n\n```bash\nsudo apt-get install libreadline-dev\n```\n\n使用：\n\n```bash\n#include <readline/readline.h>\ncc -g -Wall -fPIC -DLOGGER=1  history.o shell.o ui.o -o crash -lm -lreadline\n```\n\n* 没懂为什么-lreadline要放最后面？\n\n\n\n一些函数：\n\n```c\n#include <unistd.h>\n//获取用户名\nchar *getlogin(void);\n//获取hostname\nint gethostname(char *name, size_t len);\nint sethostname(const char *name, size_t len);\n/*\nchar *name = malloc(sizeof(char)*20);\ngethostname(name,15);\n*/\n//获取当前工作目录\nchar * getcwd(char * buf, size_t size);\n\n//相当于cd\nint chdir(const char *path);\n#include <pwd.h>\n//get pwd 相关信息\nstruct passwd *getpwuid(uid_t uid);\n\nstruct passwd {\nchar *pw_name; /*user name */\nchar *pw_passwd; /*user password */\nuid_t pw_uid; /*user id */\ngid_t pw_gid; /*group id */\nchar *pw_gecos; /*user real name */\nchar *pw_dir; /*home directory */\nchar *pw_shell; /*shell program */\n};\n/*\nstruct passwd *pwd =  getpwuid(getuid());\n*/\n\n```\n\n","source":"_posts/C语言的一些记录.md","raw":"---\n\ntitle: C语言的一些记录\ndate: 2020-08-21 23:00:15\ntags: C语言\n---\n\n* 指针类型大小都为8\n* 文件指针不关闭会导致内存泄漏\n<!--More-->\n```cpp\n//test.cpp\n#include<stdio.h>\nint main()\n{\n  FILE *f = fopen(\"a.txt\",\"r\");\n  return 0;\n}\n```\n\n```bash\nvalgrind --leak-check=full --show-reachable=yes --trace-children=yes   ./test\n```\n```bash\n==333== Memcheck, a memory error detector\n==333== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==333== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\n==333== Command: ./test\n==333==\n==333== error calling PR_SET_PTRACER, vgdb might block\n==333==\n==333== HEAP SUMMARY:\n==333==     in use at exit: 472 bytes in 1 blocks\n==333==   total heap usage: 1 allocs, 0 frees, 472 bytes allocated\n==333==\n==333== 472 bytes in 1 blocks are still reachable in loss record 1 of 1\n==333==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\n==333==    by 0x48E0AAD: __fopen_internal (iofopen.c:65)\n==333==    by 0x48E0AAD: fopen@@GLIBC_2.2.5 (iofopen.c:86)\n==333==\n==333== LEAK SUMMARY:\n==333==    definitely lost: 0 bytes in 0 blocks\n==333==    indirectly lost: 0 bytes in 0 blocks\n==333==      possibly lost: 0 bytes in 0 blocks\n==333==    still reachable: 472 bytes in 1 blocks\n==333==         suppressed: 0 bytes in 0 blocks\n==333==\n==333== For lists of detected and suppressed errors, rerun with: -s\n==333== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n```\n### C语言判断文件是否存在\naccess函数判断文件夹或者文件是否存在\n```C\nint access(const char *filename, int mode);\n\nfilename：可以填写文件夹路径或者文件路径\n\nmode：0 （F_OK） 只判断是否存在\n      2 （R_OK） 判断写入权限\n      4 （W_OK） 判断读取权限\n      6 （X_OK） 判断执行权限\n```\n用于判断文件夹是否存在的时候，mode取0，判断文件是否存在的时候，mode可以取0、2、4、6。 若存在或者具有权限，返回值为0；\n不存在或者无权限，返回值为-1。\nfopen函数判断文件是否存在\n\n函数原型：FILE *fopen (char *filename, char *type);\n\nfilename：文件路径\n\ntype：打开文件的方式（有r、w、r+、w+、a、rb、wb等等）\n\n用于判断文件是否存在可以使用 r 或者 rb ，因为使用其它方式的话，可能会自动建立文件。 返回值为NULL（打不开）和正数（能打开）。\n\n### unlink函数\n```C\n#include<unistd.h>\nint unlink(const char *pathname);\n\nif(unlink(\"test.txt\") < 0)\n{\n        printf(\"unlink errpr!\\n\");\n}\n```\n\n\n* 结构体定义在`xx.c`文件，其他文件通过`#include \"xx.h\"`使用该结构体会报错：不允许使用不完整类型\n只能把结构体定义在.h文件里面\n\n* 把数据内容type a存入char数组s\nmemcpy(s,&a,sizeof(type))\n\n* 不能对宏定义的常量进行取地址操作\n\n### 编译相关\n* gcc 生成文件跟在-o后面就行\n* 编译含math库函数时，要加-lm\n\n### 多进程相关\n* 创建n个进程\n```C\nint i;\nfor(i = 0; i < n; i++){\n   pid = fork();\n   if(pid == 0)break;\n}\n```\n* 子进程会拷贝fork语句之前的内容\n* 共享内存\n```C\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/shm.h>  // for using shared memory\n\nint size_bytes = length * sizeof(int);\nint shmid = shmget(IPC_PRIVATE, size_bytes, 0666 | IPC_CREAT);\nint * arr = shmat(shmid, 0, 0);\n```\n* 信号\n```C\n#include <sys/wait.h>\n#include <unistd.h>\n\n//向进程pid发送信号\nkill(pid,SIGCONT);\n\n//接收信号并处理,handler 为处理函数，只带一个int参数，返回值为void\nsignal(SIGCONT,handler);\n```\n\n* 访问临界数据必须加互斥锁\n* 指针 + 1产生的偏移量取决于指针类型\n* sizeof(size_t) == 8\n\n### 杂项\n\nQ:使用#ifndef在头文件中定义全局变量，然后两个.c文件分别访问(#include)，编译时就会出现multiple definition的提示，但是已经使用了条件编译，理论上第二次应该跳过定义过程，这是为什么呢？\n\nA:这类条件编译是为了防止同一个.c文件包含同一个头文件多次。\n每一个.c文件最后都会编译生成对应的.obj文件的。所以你的两个.c文件对应的两个.obj文件都会有你说的那个全局变量的，链接的时候，链接器就会发现有定义了两个同名变量，于是就报multiple definition错误。\n正确的做法是：是其中一个.c文件定义这个变量，在另外一个.c文件用extern声明,确保只定义一次，而声明则可以多次\n因为头文件很容易被不同的.c文件include，生成多个.obj目标文件，因此正确的做法就是不要在头文件中定义全局变量，而应该在.c/.cpp文件中定义\n\n\n\n安装libreadline-dev\n\n```bash\nsudo apt-get install libreadline-dev\n```\n\n使用：\n\n```bash\n#include <readline/readline.h>\ncc -g -Wall -fPIC -DLOGGER=1  history.o shell.o ui.o -o crash -lm -lreadline\n```\n\n* 没懂为什么-lreadline要放最后面？\n\n\n\n一些函数：\n\n```c\n#include <unistd.h>\n//获取用户名\nchar *getlogin(void);\n//获取hostname\nint gethostname(char *name, size_t len);\nint sethostname(const char *name, size_t len);\n/*\nchar *name = malloc(sizeof(char)*20);\ngethostname(name,15);\n*/\n//获取当前工作目录\nchar * getcwd(char * buf, size_t size);\n\n//相当于cd\nint chdir(const char *path);\n#include <pwd.h>\n//get pwd 相关信息\nstruct passwd *getpwuid(uid_t uid);\n\nstruct passwd {\nchar *pw_name; /*user name */\nchar *pw_passwd; /*user password */\nuid_t pw_uid; /*user id */\ngid_t pw_gid; /*group id */\nchar *pw_gecos; /*user real name */\nchar *pw_dir; /*home directory */\nchar *pw_shell; /*shell program */\n};\n/*\nstruct passwd *pwd =  getpwuid(getuid());\n*/\n\n```\n\n","slug":"C语言的一些记录","published":1,"updated":"2021-04-07T06:09:03.369Z","_id":"ckiv9pxdd0001rouj8zjmaivz","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><ul>\n<li>指针类型大小都为8</li>\n<li>文件指针不关闭会导致内存泄漏<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  FILE *f = fopen(<span class=\"string\">&quot;a.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valgrind --leak-check=full --show-reachable=yes --trace-children=yes   ./<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==333== Memcheck, a memory error detector</span><br><span class=\"line\">==333== Copyright (C) 2002-2017, and GNU GPL<span class=\"string\">&#x27;d, by Julian Seward et al.</span></span><br><span class=\"line\"><span class=\"string\">==333== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info</span></span><br><span class=\"line\"><span class=\"string\">==333== Command: ./test</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== error calling PR_SET_PTRACER, vgdb might block</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== HEAP SUMMARY:</span></span><br><span class=\"line\"><span class=\"string\">==333==     in use at exit: 472 bytes in 1 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==   total heap usage: 1 allocs, 0 frees, 472 bytes allocated</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== 472 bytes in 1 blocks are still reachable in loss record 1 of 1</span></span><br><span class=\"line\"><span class=\"string\">==333==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)</span></span><br><span class=\"line\"><span class=\"string\">==333==    by 0x48E0AAD: __fopen_internal (iofopen.c:65)</span></span><br><span class=\"line\"><span class=\"string\">==333==    by 0x48E0AAD: fopen@@GLIBC_2.2.5 (iofopen.c:86)</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== LEAK SUMMARY:</span></span><br><span class=\"line\"><span class=\"string\">==333==    definitely lost: 0 bytes in 0 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==    indirectly lost: 0 bytes in 0 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==      possibly lost: 0 bytes in 0 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==    still reachable: 472 bytes in 1 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==         suppressed: 0 bytes in 0 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== For lists of detected and suppressed errors, rerun with: -s</span></span><br><span class=\"line\"><span class=\"string\">==333== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"C语言判断文件是否存在\"><a href=\"#C语言判断文件是否存在\" class=\"headerlink\" title=\"C语言判断文件是否存在\"></a>C语言判断文件是否存在</h3>access函数判断文件夹或者文件是否存在<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">int</span> mode)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">filename：可以填写文件夹路径或者文件路径</span><br><span class=\"line\"></span><br><span class=\"line\">mode：<span class=\"number\">0</span> （F_OK） 只判断是否存在</span><br><span class=\"line\">      <span class=\"number\">2</span> （R_OK） 判断写入权限</span><br><span class=\"line\">      <span class=\"number\">4</span> （W_OK） 判断读取权限</span><br><span class=\"line\">      <span class=\"number\">6</span> （X_OK） 判断执行权限</span><br></pre></td></tr></table></figure>\n用于判断文件夹是否存在的时候，mode取0，判断文件是否存在的时候，mode可以取0、2、4、6。 若存在或者具有权限，返回值为0；<br>不存在或者无权限，返回值为-1。<br>fopen函数判断文件是否存在</li>\n</ul>\n<p>函数原型：FILE <em>fopen (char </em>filename, char *type);</p>\n<p>filename：文件路径</p>\n<p>type：打开文件的方式（有r、w、r+、w+、a、rb、wb等等）</p>\n<p>用于判断文件是否存在可以使用 r 或者 rb ，因为使用其它方式的话，可能会自动建立文件。 返回值为NULL（打不开）和正数（能打开）。</p>\n<h3 id=\"unlink函数\"><a href=\"#unlink函数\" class=\"headerlink\" title=\"unlink函数\"></a>unlink函数</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">unlink</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pathname)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(unlink(<span class=\"string\">&quot;test.txt&quot;</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;unlink errpr!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>结构体定义在<code>xx.c</code>文件，其他文件通过<code>#include &quot;xx.h&quot;</code>使用该结构体会报错：不允许使用不完整类型<br>只能把结构体定义在.h文件里面</p>\n</li>\n<li><p>把数据内容type a存入char数组s<br>memcpy(s,&amp;a,sizeof(type))</p>\n</li>\n<li><p>不能对宏定义的常量进行取地址操作</p>\n</li>\n</ul>\n<h3 id=\"编译相关\"><a href=\"#编译相关\" class=\"headerlink\" title=\"编译相关\"></a>编译相关</h3><ul>\n<li>gcc 生成文件跟在-o后面就行</li>\n<li>编译含math库函数时，要加-lm</li>\n</ul>\n<h3 id=\"多进程相关\"><a href=\"#多进程相关\" class=\"headerlink\" title=\"多进程相关\"></a>多进程相关</h3><ul>\n<li>创建n个进程<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">   pid = fork();</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>子进程会拷贝fork语句之前的内容</li>\n<li>共享内存<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/shm.h&gt;  // for using shared memory</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> size_bytes = length * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> shmid = shmget(IPC_PRIVATE, size_bytes, <span class=\"number\">0666</span> | IPC_CREAT);</span><br><span class=\"line\"><span class=\"keyword\">int</span> * arr = shmat(shmid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></li>\n<li>信号<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向进程pid发送信号</span></span><br><span class=\"line\">kill(pid,SIGCONT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收信号并处理,handler 为处理函数，只带一个int参数，返回值为void</span></span><br><span class=\"line\">signal(SIGCONT,handler);</span><br></pre></td></tr></table></figure></li>\n<li>访问临界数据必须加互斥锁</li>\n<li>指针 + 1产生的偏移量取决于指针类型</li>\n<li>sizeof(size_t) == 8</li>\n</ul>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><p>Q:使用#ifndef在头文件中定义全局变量，然后两个.c文件分别访问(#include)，编译时就会出现multiple definition的提示，但是已经使用了条件编译，理论上第二次应该跳过定义过程，这是为什么呢？</p>\n<p>A:这类条件编译是为了防止同一个.c文件包含同一个头文件多次。<br>每一个.c文件最后都会编译生成对应的.obj文件的。所以你的两个.c文件对应的两个.obj文件都会有你说的那个全局变量的，链接的时候，链接器就会发现有定义了两个同名变量，于是就报multiple definition错误。<br>正确的做法是：是其中一个.c文件定义这个变量，在另外一个.c文件用extern声明,确保只定义一次，而声明则可以多次<br>因为头文件很容易被不同的.c文件include，生成多个.obj目标文件，因此正确的做法就是不要在头文件中定义全局变量，而应该在.c/.cpp文件中定义</p>\n<p>安装libreadline-dev</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libreadline-dev</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;readline/readline.h&gt;</span></span><br><span class=\"line\">cc -g -Wall -fPIC -DLOGGER=1  history.o shell.o ui.o -o crash -lm -lreadline</span><br></pre></td></tr></table></figure>\n<ul>\n<li>没懂为什么-lreadline要放最后面？</li>\n</ul>\n<p>一些函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//获取用户名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">getlogin</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//获取hostname</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gethostname</span><span class=\"params\">(<span class=\"keyword\">char</span> *name, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sethostname</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">char *name = malloc(sizeof(char)*20);</span></span><br><span class=\"line\"><span class=\"comment\">gethostname(name,15);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//获取当前工作目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">getcwd</span><span class=\"params\">(<span class=\"keyword\">char</span> * buf, <span class=\"keyword\">size_t</span> size)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于cd</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chdir</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pwd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//get pwd 相关信息</span></span><br><span class=\"line\"><span class=\"function\">struct passwd *<span class=\"title\">getpwuid</span><span class=\"params\">(<span class=\"keyword\">uid_t</span> uid)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">passwd</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_name; <span class=\"comment\">/*user name */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_passwd; <span class=\"comment\">/*user password */</span></span><br><span class=\"line\"><span class=\"keyword\">uid_t</span> pw_uid; <span class=\"comment\">/*user id */</span></span><br><span class=\"line\"><span class=\"keyword\">gid_t</span> pw_gid; <span class=\"comment\">/*group id */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_gecos; <span class=\"comment\">/*user real name */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_dir; <span class=\"comment\">/*home directory */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_shell; <span class=\"comment\">/*shell program */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">struct passwd *pwd =  getpwuid(getuid());</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<ul>\n<li>指针类型大小都为8</li>\n<li>文件指针不关闭会导致内存泄漏","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  FILE *f = fopen(<span class=\"string\">&quot;a.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valgrind --leak-check=full --show-reachable=yes --trace-children=yes   ./<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==333== Memcheck, a memory error detector</span><br><span class=\"line\">==333== Copyright (C) 2002-2017, and GNU GPL<span class=\"string\">&#x27;d, by Julian Seward et al.</span></span><br><span class=\"line\"><span class=\"string\">==333== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info</span></span><br><span class=\"line\"><span class=\"string\">==333== Command: ./test</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== error calling PR_SET_PTRACER, vgdb might block</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== HEAP SUMMARY:</span></span><br><span class=\"line\"><span class=\"string\">==333==     in use at exit: 472 bytes in 1 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==   total heap usage: 1 allocs, 0 frees, 472 bytes allocated</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== 472 bytes in 1 blocks are still reachable in loss record 1 of 1</span></span><br><span class=\"line\"><span class=\"string\">==333==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)</span></span><br><span class=\"line\"><span class=\"string\">==333==    by 0x48E0AAD: __fopen_internal (iofopen.c:65)</span></span><br><span class=\"line\"><span class=\"string\">==333==    by 0x48E0AAD: fopen@@GLIBC_2.2.5 (iofopen.c:86)</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== LEAK SUMMARY:</span></span><br><span class=\"line\"><span class=\"string\">==333==    definitely lost: 0 bytes in 0 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==    indirectly lost: 0 bytes in 0 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==      possibly lost: 0 bytes in 0 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==    still reachable: 472 bytes in 1 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==         suppressed: 0 bytes in 0 blocks</span></span><br><span class=\"line\"><span class=\"string\">==333==</span></span><br><span class=\"line\"><span class=\"string\">==333== For lists of detected and suppressed errors, rerun with: -s</span></span><br><span class=\"line\"><span class=\"string\">==333== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"C语言判断文件是否存在\"><a href=\"#C语言判断文件是否存在\" class=\"headerlink\" title=\"C语言判断文件是否存在\"></a>C语言判断文件是否存在</h3>access函数判断文件夹或者文件是否存在<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">int</span> mode)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">filename：可以填写文件夹路径或者文件路径</span><br><span class=\"line\"></span><br><span class=\"line\">mode：<span class=\"number\">0</span> （F_OK） 只判断是否存在</span><br><span class=\"line\">      <span class=\"number\">2</span> （R_OK） 判断写入权限</span><br><span class=\"line\">      <span class=\"number\">4</span> （W_OK） 判断读取权限</span><br><span class=\"line\">      <span class=\"number\">6</span> （X_OK） 判断执行权限</span><br></pre></td></tr></table></figure>\n用于判断文件夹是否存在的时候，mode取0，判断文件是否存在的时候，mode可以取0、2、4、6。 若存在或者具有权限，返回值为0；<br>不存在或者无权限，返回值为-1。<br>fopen函数判断文件是否存在</li>\n</ul>\n<p>函数原型：FILE <em>fopen (char </em>filename, char *type);</p>\n<p>filename：文件路径</p>\n<p>type：打开文件的方式（有r、w、r+、w+、a、rb、wb等等）</p>\n<p>用于判断文件是否存在可以使用 r 或者 rb ，因为使用其它方式的话，可能会自动建立文件。 返回值为NULL（打不开）和正数（能打开）。</p>\n<h3 id=\"unlink函数\"><a href=\"#unlink函数\" class=\"headerlink\" title=\"unlink函数\"></a>unlink函数</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">unlink</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pathname)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(unlink(<span class=\"string\">&quot;test.txt&quot;</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;unlink errpr!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>结构体定义在<code>xx.c</code>文件，其他文件通过<code>#include &quot;xx.h&quot;</code>使用该结构体会报错：不允许使用不完整类型<br>只能把结构体定义在.h文件里面</p>\n</li>\n<li><p>把数据内容type a存入char数组s<br>memcpy(s,&amp;a,sizeof(type))</p>\n</li>\n<li><p>不能对宏定义的常量进行取地址操作</p>\n</li>\n</ul>\n<h3 id=\"编译相关\"><a href=\"#编译相关\" class=\"headerlink\" title=\"编译相关\"></a>编译相关</h3><ul>\n<li>gcc 生成文件跟在-o后面就行</li>\n<li>编译含math库函数时，要加-lm</li>\n</ul>\n<h3 id=\"多进程相关\"><a href=\"#多进程相关\" class=\"headerlink\" title=\"多进程相关\"></a>多进程相关</h3><ul>\n<li>创建n个进程<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">   pid = fork();</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>子进程会拷贝fork语句之前的内容</li>\n<li>共享内存<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/shm.h&gt;  // for using shared memory</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> size_bytes = length * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> shmid = shmget(IPC_PRIVATE, size_bytes, <span class=\"number\">0666</span> | IPC_CREAT);</span><br><span class=\"line\"><span class=\"keyword\">int</span> * arr = shmat(shmid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></li>\n<li>信号<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向进程pid发送信号</span></span><br><span class=\"line\">kill(pid,SIGCONT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收信号并处理,handler 为处理函数，只带一个int参数，返回值为void</span></span><br><span class=\"line\">signal(SIGCONT,handler);</span><br></pre></td></tr></table></figure></li>\n<li>访问临界数据必须加互斥锁</li>\n<li>指针 + 1产生的偏移量取决于指针类型</li>\n<li>sizeof(size_t) == 8</li>\n</ul>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><p>Q:使用#ifndef在头文件中定义全局变量，然后两个.c文件分别访问(#include)，编译时就会出现multiple definition的提示，但是已经使用了条件编译，理论上第二次应该跳过定义过程，这是为什么呢？</p>\n<p>A:这类条件编译是为了防止同一个.c文件包含同一个头文件多次。<br>每一个.c文件最后都会编译生成对应的.obj文件的。所以你的两个.c文件对应的两个.obj文件都会有你说的那个全局变量的，链接的时候，链接器就会发现有定义了两个同名变量，于是就报multiple definition错误。<br>正确的做法是：是其中一个.c文件定义这个变量，在另外一个.c文件用extern声明,确保只定义一次，而声明则可以多次<br>因为头文件很容易被不同的.c文件include，生成多个.obj目标文件，因此正确的做法就是不要在头文件中定义全局变量，而应该在.c/.cpp文件中定义</p>\n<p>安装libreadline-dev</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libreadline-dev</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;readline/readline.h&gt;</span></span><br><span class=\"line\">cc -g -Wall -fPIC -DLOGGER=1  history.o shell.o ui.o -o crash -lm -lreadline</span><br></pre></td></tr></table></figure>\n<ul>\n<li>没懂为什么-lreadline要放最后面？</li>\n</ul>\n<p>一些函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//获取用户名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">getlogin</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//获取hostname</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gethostname</span><span class=\"params\">(<span class=\"keyword\">char</span> *name, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sethostname</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">char *name = malloc(sizeof(char)*20);</span></span><br><span class=\"line\"><span class=\"comment\">gethostname(name,15);</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//获取当前工作目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">getcwd</span><span class=\"params\">(<span class=\"keyword\">char</span> * buf, <span class=\"keyword\">size_t</span> size)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于cd</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chdir</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pwd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//get pwd 相关信息</span></span><br><span class=\"line\"><span class=\"function\">struct passwd *<span class=\"title\">getpwuid</span><span class=\"params\">(<span class=\"keyword\">uid_t</span> uid)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">passwd</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_name; <span class=\"comment\">/*user name */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_passwd; <span class=\"comment\">/*user password */</span></span><br><span class=\"line\"><span class=\"keyword\">uid_t</span> pw_uid; <span class=\"comment\">/*user id */</span></span><br><span class=\"line\"><span class=\"keyword\">gid_t</span> pw_gid; <span class=\"comment\">/*group id */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_gecos; <span class=\"comment\">/*user real name */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_dir; <span class=\"comment\">/*home directory */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *pw_shell; <span class=\"comment\">/*shell program */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">struct passwd *pwd =  getpwuid(getuid());</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"SVD","date":"2020-08-06T14:42:45.000Z","mathjax":true,"_content":"## 一些结论\n\n---\n$rank(A) = rank(A^{T}A)$\n\n只需说明$AX = 0$ 与 $A^{T}AX =0$同解.\n\n若$X$满足$AX = 0$,显然有$A^{T}AX = 0$成立.\n\n反之，若$A^{T}AX = 0$,左乘$X^{T}$,有$X^{T}A^{T}AX = 0$. \n\n即$(AX)^{T}AX = 0$,令$Y=AX$,有$Y^{T}Y = 0$,$Y = AX = 0$.\n<!-- More -->\n\n---\n\n实矩阵$A_{m\\times n}$, $A^{T}A$的特征值都为非负实数。\n\n设$\\lambda$ 为$A^{T}A$的复特征值，有$AX=\\lambda X$\n\n记$\\overline{\\lambda}$为$\\lambda$的共轭，有\n\n$A\\overline{X} = \\overline{A}\\overline{X} = \\overline{AX} = \\overline{\\lambda X} = \\overline{\\lambda} \\overline{X} $.\n\n从而\n\n$\\overline{X}^{T}AX = \\overline{X}^{T} \\lambda X = \\lambda \\overline{X}^{T} X$.\n\n和\n\n$\\overline{X}^{T}AX = \\overline{X}^{T}\\overline{A}^{T}X = \\overline{AX}^{T}X = (\\overline{\\lambda} \\overline{X})^{T}X = \\overline{\\lambda} \\overline{X}^{T}X $.\n\n进而有$(\\lambda - \\overline{\\lambda})\\overline{X}^{T}X = 0$,\n\n所以$\\lambda - \\overline{\\lambda} = 0$，即$\\lambda$为实数.\n\n\n设$\\lambda$为$A^{T}A$的特征值，有\n\n$\\left \\| AX \\right \\|^{2} = X^{T}A^{T}AX = \\lambda X^{T}X = \\lambda \\left \\\\| X\\right \\\\|^{2}$.\n\n所以$\\lambda = \\frac{\\left \\| AX\\right \\|^{2}}{\\left \\| X\\right\\|^{2}} \\geq 0$.\n\n---\n\n$A \\in \\mathbb{R}^{m\\times n}$ 则$A$存在奇异值分解：\n\n$A = U\\Sigma V^{T}$,其中$U$是$m$阶正交矩阵,$V$是$n$阶正交矩阵,$\\Sigma$是$m\\times n$矩形对角矩阵,其对角线元素非负,且按降序排列.\n\n证明: $A^{T}A$的特征值都为实数，因而存在有正交矩阵$V$，使得$V^{T}(A^{T}A)V = \\Lambda$ 成立.\n\n其中$\\Lambda$为对角矩阵，对角线元素为$A^{T}A$的特征值,调整特征值的顺序，使其按降序排列，满足\n\n$\\lambda_{1} \\geq \\lambda_{2} \\geq \\lambda_{3}\\cdots \\geq \\lambda_{n} \\geq 0$.\n\n令 $V_{1} = \\begin{bmatrix} \\nu _{1} & \\nu_{2}  & \\cdots  & \\nu_{r} \\end{bmatrix}$,\n\n$V_{2} = \\begin{bmatrix} \\nu _{r+1}  & \\cdots  & \\nu_{n} \\end{bmatrix}$\n\n其中$\\nu_{1} \\cdots \\nu_{r}$为$A^{T}A$正特征值对应的特征向量，$\\nu_{r+1} \\cdots \\nu_{n}$为$A^{T}A$零特征值的对应的特征向量.\n\n$V = \\begin{bmatrix} V_{1} & V_{2} \\end{bmatrix}$即为奇异值分解中的$V$.\n\n记$\\sigma_{i} = \\sqrt\\lambda_{i}$,令\n\n$\\Sigma _{1} = \\begin{bmatrix} \\sigma_{1} &  &  & \n\\\\\\ &\\sigma_{2}  &  & \n\\\\\\  &  &\\ddots   & \n\\\\\\  &  &  & \\sigma_{r} \\end{bmatrix}$\n\n于是$m\\times n$对角矩阵可以表示为$\\Sigma = \\begin{bmatrix}\\Sigma_{1} & 0 \n\\\\\\ 0 & 0 \\end{bmatrix}$.\n\n构造$U$,令$u_{j} = \\frac{1}{\\sigma_{j}}A\\nu_{j}$,\n\n\n$U_{1} = \\begin{bmatrix} u_{1} & u_{2} & \\cdots & u_{r} \\end{bmatrix}$,有$AV_{1} = U_{1}\\Sigma_{1}$\n\n$u_{i}^{T}u_{j} = (\\frac{1}{\\sigma_{i}}\\nu_{i}^{T}A^{T})(\\frac{1}{\\sigma_{j}}A\\nu_{j}) = \\frac{1}{\\sigma_{i}\\sigma_{j}}\\nu_{i}^{T}(A^{T}A\\nu_{j}) = \\frac{\\sigma_{j}}{\\sigma_{i}}\\nu_{i}\\nu_{j}$\n所以$u_{1},u_{2},\\cdots,u_{r}$构成一组标准正交基.\n\n令$U_{2} = u_{r+1},\\cdots,u_{n}$为$R(A)^{\\perp }$的一组标准正交基,记$U = \\begin{bmatrix} U_{1} & U_{2} \\end{bmatrix}$\n\n$U\\Sigma V^{T} = \\begin{bmatrix}U_{1} & U_{2} \\end{bmatrix}\\begin{bmatrix}\\Sigma_{1} & 0\\\\\\ 0 & 0 \\end{bmatrix}\\begin{bmatrix}V_{1}^{T}\\\\\\ \n                 V_{2}^{T}\\end{bmatrix}=U_{1}\\Sigma_{1}V_{1}^{T} = AV_{1}V_{1}^{T} = A$.\n                                                              \n\n","source":"_posts/SVD.md","raw":"---\ntitle: SVD\ndate: 2020-08-06 22:42:45\ntags: 数学\nmathjax: true\n---\n## 一些结论\n\n---\n$rank(A) = rank(A^{T}A)$\n\n只需说明$AX = 0$ 与 $A^{T}AX =0$同解.\n\n若$X$满足$AX = 0$,显然有$A^{T}AX = 0$成立.\n\n反之，若$A^{T}AX = 0$,左乘$X^{T}$,有$X^{T}A^{T}AX = 0$. \n\n即$(AX)^{T}AX = 0$,令$Y=AX$,有$Y^{T}Y = 0$,$Y = AX = 0$.\n<!-- More -->\n\n---\n\n实矩阵$A_{m\\times n}$, $A^{T}A$的特征值都为非负实数。\n\n设$\\lambda$ 为$A^{T}A$的复特征值，有$AX=\\lambda X$\n\n记$\\overline{\\lambda}$为$\\lambda$的共轭，有\n\n$A\\overline{X} = \\overline{A}\\overline{X} = \\overline{AX} = \\overline{\\lambda X} = \\overline{\\lambda} \\overline{X} $.\n\n从而\n\n$\\overline{X}^{T}AX = \\overline{X}^{T} \\lambda X = \\lambda \\overline{X}^{T} X$.\n\n和\n\n$\\overline{X}^{T}AX = \\overline{X}^{T}\\overline{A}^{T}X = \\overline{AX}^{T}X = (\\overline{\\lambda} \\overline{X})^{T}X = \\overline{\\lambda} \\overline{X}^{T}X $.\n\n进而有$(\\lambda - \\overline{\\lambda})\\overline{X}^{T}X = 0$,\n\n所以$\\lambda - \\overline{\\lambda} = 0$，即$\\lambda$为实数.\n\n\n设$\\lambda$为$A^{T}A$的特征值，有\n\n$\\left \\| AX \\right \\|^{2} = X^{T}A^{T}AX = \\lambda X^{T}X = \\lambda \\left \\\\| X\\right \\\\|^{2}$.\n\n所以$\\lambda = \\frac{\\left \\| AX\\right \\|^{2}}{\\left \\| X\\right\\|^{2}} \\geq 0$.\n\n---\n\n$A \\in \\mathbb{R}^{m\\times n}$ 则$A$存在奇异值分解：\n\n$A = U\\Sigma V^{T}$,其中$U$是$m$阶正交矩阵,$V$是$n$阶正交矩阵,$\\Sigma$是$m\\times n$矩形对角矩阵,其对角线元素非负,且按降序排列.\n\n证明: $A^{T}A$的特征值都为实数，因而存在有正交矩阵$V$，使得$V^{T}(A^{T}A)V = \\Lambda$ 成立.\n\n其中$\\Lambda$为对角矩阵，对角线元素为$A^{T}A$的特征值,调整特征值的顺序，使其按降序排列，满足\n\n$\\lambda_{1} \\geq \\lambda_{2} \\geq \\lambda_{3}\\cdots \\geq \\lambda_{n} \\geq 0$.\n\n令 $V_{1} = \\begin{bmatrix} \\nu _{1} & \\nu_{2}  & \\cdots  & \\nu_{r} \\end{bmatrix}$,\n\n$V_{2} = \\begin{bmatrix} \\nu _{r+1}  & \\cdots  & \\nu_{n} \\end{bmatrix}$\n\n其中$\\nu_{1} \\cdots \\nu_{r}$为$A^{T}A$正特征值对应的特征向量，$\\nu_{r+1} \\cdots \\nu_{n}$为$A^{T}A$零特征值的对应的特征向量.\n\n$V = \\begin{bmatrix} V_{1} & V_{2} \\end{bmatrix}$即为奇异值分解中的$V$.\n\n记$\\sigma_{i} = \\sqrt\\lambda_{i}$,令\n\n$\\Sigma _{1} = \\begin{bmatrix} \\sigma_{1} &  &  & \n\\\\\\ &\\sigma_{2}  &  & \n\\\\\\  &  &\\ddots   & \n\\\\\\  &  &  & \\sigma_{r} \\end{bmatrix}$\n\n于是$m\\times n$对角矩阵可以表示为$\\Sigma = \\begin{bmatrix}\\Sigma_{1} & 0 \n\\\\\\ 0 & 0 \\end{bmatrix}$.\n\n构造$U$,令$u_{j} = \\frac{1}{\\sigma_{j}}A\\nu_{j}$,\n\n\n$U_{1} = \\begin{bmatrix} u_{1} & u_{2} & \\cdots & u_{r} \\end{bmatrix}$,有$AV_{1} = U_{1}\\Sigma_{1}$\n\n$u_{i}^{T}u_{j} = (\\frac{1}{\\sigma_{i}}\\nu_{i}^{T}A^{T})(\\frac{1}{\\sigma_{j}}A\\nu_{j}) = \\frac{1}{\\sigma_{i}\\sigma_{j}}\\nu_{i}^{T}(A^{T}A\\nu_{j}) = \\frac{\\sigma_{j}}{\\sigma_{i}}\\nu_{i}\\nu_{j}$\n所以$u_{1},u_{2},\\cdots,u_{r}$构成一组标准正交基.\n\n令$U_{2} = u_{r+1},\\cdots,u_{n}$为$R(A)^{\\perp }$的一组标准正交基,记$U = \\begin{bmatrix} U_{1} & U_{2} \\end{bmatrix}$\n\n$U\\Sigma V^{T} = \\begin{bmatrix}U_{1} & U_{2} \\end{bmatrix}\\begin{bmatrix}\\Sigma_{1} & 0\\\\\\ 0 & 0 \\end{bmatrix}\\begin{bmatrix}V_{1}^{T}\\\\\\ \n                 V_{2}^{T}\\end{bmatrix}=U_{1}\\Sigma_{1}V_{1}^{T} = AV_{1}V_{1}^{T} = A$.\n                                                              \n\n","slug":"SVD","published":1,"updated":"2021-05-22T11:41:40.435Z","_id":"ckiv9pxdg0003rouj4zfa0yuw","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"一些结论\"><a href=\"#一些结论\" class=\"headerlink\" title=\"一些结论\"></a>一些结论</h2><hr>\n<p>$rank(A) = rank(A^{T}A)$</p>\n<p>只需说明$AX = 0$ 与 $A^{T}AX =0$同解.</p>\n<p>若$X$满足$AX = 0$,显然有$A^{T}AX = 0$成立.</p>\n<p>反之，若$A^{T}AX = 0$,左乘$X^{T}$,有$X^{T}A^{T}AX = 0$. </p>\n<p>即$(AX)^{T}AX = 0$,令$Y=AX$,有$Y^{T}Y = 0$,$Y = AX = 0$.<br><a id=\"more\"></a></p>\n<hr>\n<p>实矩阵$A_{m\\times n}$, $A^{T}A$的特征值都为非负实数。</p>\n<p>设$\\lambda$ 为$A^{T}A$的复特征值，有$AX=\\lambda X$</p>\n<p>记$\\overline{\\lambda}$为$\\lambda$的共轭，有</p>\n<p>$A\\overline{X} = \\overline{A}\\overline{X} = \\overline{AX} = \\overline{\\lambda X} = \\overline{\\lambda} \\overline{X} $.</p>\n<p>从而</p>\n<p>$\\overline{X}^{T}AX = \\overline{X}^{T} \\lambda X = \\lambda \\overline{X}^{T} X$.</p>\n<p>和</p>\n<p>$\\overline{X}^{T}AX = \\overline{X}^{T}\\overline{A}^{T}X = \\overline{AX}^{T}X = (\\overline{\\lambda} \\overline{X})^{T}X = \\overline{\\lambda} \\overline{X}^{T}X $.</p>\n<p>进而有$(\\lambda - \\overline{\\lambda})\\overline{X}^{T}X = 0$,</p>\n<p>所以$\\lambda - \\overline{\\lambda} = 0$，即$\\lambda$为实数.</p>\n<p>设$\\lambda$为$A^{T}A$的特征值，有</p>\n<p>$\\left | AX \\right |^{2} = X^{T}A^{T}AX = \\lambda X^{T}X = \\lambda \\left \\| X\\right \\|^{2}$.</p>\n<p>所以$\\lambda = \\frac{\\left | AX\\right |^{2}}{\\left | X\\right|^{2}} \\geq 0$.</p>\n<hr>\n<p>$A \\in \\mathbb{R}^{m\\times n}$ 则$A$存在奇异值分解：</p>\n<p>$A = U\\Sigma V^{T}$,其中$U$是$m$阶正交矩阵,$V$是$n$阶正交矩阵,$\\Sigma$是$m\\times n$矩形对角矩阵,其对角线元素非负,且按降序排列.</p>\n<p>证明: $A^{T}A$的特征值都为实数，因而存在有正交矩阵$V$，使得$V^{T}(A^{T}A)V = \\Lambda$ 成立.</p>\n<p>其中$\\Lambda$为对角矩阵，对角线元素为$A^{T}A$的特征值,调整特征值的顺序，使其按降序排列，满足</p>\n<p>$\\lambda<em>{1} \\geq \\lambda</em>{2} \\geq \\lambda<em>{3}\\cdots \\geq \\lambda</em>{n} \\geq 0$.</p>\n<p>令 $V<em>{1} = \\begin{bmatrix} \\nu </em>{1} &amp; \\nu<em>{2}  &amp; \\cdots  &amp; \\nu</em>{r} \\end{bmatrix}$,</p>\n<p>$V<em>{2} = \\begin{bmatrix} \\nu </em>{r+1}  &amp; \\cdots  &amp; \\nu_{n} \\end{bmatrix}$</p>\n<p>其中$\\nu<em>{1} \\cdots \\nu</em>{r}$为$A^{T}A$正特征值对应的特征向量，$\\nu<em>{r+1} \\cdots \\nu</em>{n}$为$A^{T}A$零特征值的对应的特征向量.</p>\n<p>$V = \\begin{bmatrix} V<em>{1} &amp; V</em>{2} \\end{bmatrix}$即为奇异值分解中的$V$.</p>\n<p>记$\\sigma<em>{i} = \\sqrt\\lambda</em>{i}$,令</p>\n<p>$\\Sigma <em>{1} = \\begin{bmatrix} \\sigma</em>{1} &amp;  &amp;  &amp;<br>\\\\ &amp;\\sigma<em>{2}  &amp;  &amp;<br>\\\\  &amp;  &amp;\\ddots   &amp;<br>\\\\  &amp;  &amp;  &amp; \\sigma</em>{r} \\end{bmatrix}$</p>\n<p>于是$m\\times n$对角矩阵可以表示为$\\Sigma = \\begin{bmatrix}\\Sigma_{1} &amp; 0<br>\\\\ 0 &amp; 0 \\end{bmatrix}$.</p>\n<p>构造$U$,令$u<em>{j} = \\frac{1}{\\sigma</em>{j}}A\\nu_{j}$,</p>\n<p>$U<em>{1} = \\begin{bmatrix} u</em>{1} &amp; u<em>{2} &amp; \\cdots &amp; u</em>{r} \\end{bmatrix}$,有$AV<em>{1} = U</em>{1}\\Sigma_{1}$</p>\n<p>$u<em>{i}^{T}u</em>{j} = (\\frac{1}{\\sigma<em>{i}}\\nu</em>{i}^{T}A^{T})(\\frac{1}{\\sigma<em>{j}}A\\nu</em>{j}) = \\frac{1}{\\sigma<em>{i}\\sigma</em>{j}}\\nu<em>{i}^{T}(A^{T}A\\nu</em>{j}) = \\frac{\\sigma<em>{j}}{\\sigma</em>{i}}\\nu<em>{i}\\nu</em>{j}$<br>所以$u<em>{1},u</em>{2},\\cdots,u_{r}$构成一组标准正交基.</p>\n<p>令$U<em>{2} = u</em>{r+1},\\cdots,u<em>{n}$为$R(A)^{\\perp }$的一组标准正交基,记$U = \\begin{bmatrix} U</em>{1} &amp; U_{2} \\end{bmatrix}$</p>\n<p>$U\\Sigma V^{T} = \\begin{bmatrix}U<em>{1} &amp; U</em>{2} \\end{bmatrix}\\begin{bmatrix}\\Sigma<em>{1} &amp; 0\\\\ 0 &amp; 0 \\end{bmatrix}\\begin{bmatrix}V</em>{1}^{T}\\\\<br>                 V<em>{2}^{T}\\end{bmatrix}=U</em>{1}\\Sigma<em>{1}V</em>{1}^{T} = AV<em>{1}V</em>{1}^{T} = A$.</p>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<h2 id=\"一些结论\"><a href=\"#一些结论\" class=\"headerlink\" title=\"一些结论\"></a>一些结论</h2><hr>\n<p>$rank(A) = rank(A^{T}A)$</p>\n<p>只需说明$AX = 0$ 与 $A^{T}AX =0$同解.</p>\n<p>若$X$满足$AX = 0$,显然有$A^{T}AX = 0$成立.</p>\n<p>反之，若$A^{T}AX = 0$,左乘$X^{T}$,有$X^{T}A^{T}AX = 0$. </p>\n<p>即$(AX)^{T}AX = 0$,令$Y=AX$,有$Y^{T}Y = 0$,$Y = AX = 0$.<br>","more":"</p>\n<hr>\n<p>实矩阵$A_{m\\times n}$, $A^{T}A$的特征值都为非负实数。</p>\n<p>设$\\lambda$ 为$A^{T}A$的复特征值，有$AX=\\lambda X$</p>\n<p>记$\\overline{\\lambda}$为$\\lambda$的共轭，有</p>\n<p>$A\\overline{X} = \\overline{A}\\overline{X} = \\overline{AX} = \\overline{\\lambda X} = \\overline{\\lambda} \\overline{X} $.</p>\n<p>从而</p>\n<p>$\\overline{X}^{T}AX = \\overline{X}^{T} \\lambda X = \\lambda \\overline{X}^{T} X$.</p>\n<p>和</p>\n<p>$\\overline{X}^{T}AX = \\overline{X}^{T}\\overline{A}^{T}X = \\overline{AX}^{T}X = (\\overline{\\lambda} \\overline{X})^{T}X = \\overline{\\lambda} \\overline{X}^{T}X $.</p>\n<p>进而有$(\\lambda - \\overline{\\lambda})\\overline{X}^{T}X = 0$,</p>\n<p>所以$\\lambda - \\overline{\\lambda} = 0$，即$\\lambda$为实数.</p>\n<p>设$\\lambda$为$A^{T}A$的特征值，有</p>\n<p>$\\left | AX \\right |^{2} = X^{T}A^{T}AX = \\lambda X^{T}X = \\lambda \\left \\| X\\right \\|^{2}$.</p>\n<p>所以$\\lambda = \\frac{\\left | AX\\right |^{2}}{\\left | X\\right|^{2}} \\geq 0$.</p>\n<hr>\n<p>$A \\in \\mathbb{R}^{m\\times n}$ 则$A$存在奇异值分解：</p>\n<p>$A = U\\Sigma V^{T}$,其中$U$是$m$阶正交矩阵,$V$是$n$阶正交矩阵,$\\Sigma$是$m\\times n$矩形对角矩阵,其对角线元素非负,且按降序排列.</p>\n<p>证明: $A^{T}A$的特征值都为实数，因而存在有正交矩阵$V$，使得$V^{T}(A^{T}A)V = \\Lambda$ 成立.</p>\n<p>其中$\\Lambda$为对角矩阵，对角线元素为$A^{T}A$的特征值,调整特征值的顺序，使其按降序排列，满足</p>\n<p>$\\lambda<em>{1} \\geq \\lambda</em>{2} \\geq \\lambda<em>{3}\\cdots \\geq \\lambda</em>{n} \\geq 0$.</p>\n<p>令 $V<em>{1} = \\begin{bmatrix} \\nu </em>{1} &amp; \\nu<em>{2}  &amp; \\cdots  &amp; \\nu</em>{r} \\end{bmatrix}$,</p>\n<p>$V<em>{2} = \\begin{bmatrix} \\nu </em>{r+1}  &amp; \\cdots  &amp; \\nu_{n} \\end{bmatrix}$</p>\n<p>其中$\\nu<em>{1} \\cdots \\nu</em>{r}$为$A^{T}A$正特征值对应的特征向量，$\\nu<em>{r+1} \\cdots \\nu</em>{n}$为$A^{T}A$零特征值的对应的特征向量.</p>\n<p>$V = \\begin{bmatrix} V<em>{1} &amp; V</em>{2} \\end{bmatrix}$即为奇异值分解中的$V$.</p>\n<p>记$\\sigma<em>{i} = \\sqrt\\lambda</em>{i}$,令</p>\n<p>$\\Sigma <em>{1} = \\begin{bmatrix} \\sigma</em>{1} &amp;  &amp;  &amp;<br>\\\\ &amp;\\sigma<em>{2}  &amp;  &amp;<br>\\\\  &amp;  &amp;\\ddots   &amp;<br>\\\\  &amp;  &amp;  &amp; \\sigma</em>{r} \\end{bmatrix}$</p>\n<p>于是$m\\times n$对角矩阵可以表示为$\\Sigma = \\begin{bmatrix}\\Sigma_{1} &amp; 0<br>\\\\ 0 &amp; 0 \\end{bmatrix}$.</p>\n<p>构造$U$,令$u<em>{j} = \\frac{1}{\\sigma</em>{j}}A\\nu_{j}$,</p>\n<p>$U<em>{1} = \\begin{bmatrix} u</em>{1} &amp; u<em>{2} &amp; \\cdots &amp; u</em>{r} \\end{bmatrix}$,有$AV<em>{1} = U</em>{1}\\Sigma_{1}$</p>\n<p>$u<em>{i}^{T}u</em>{j} = (\\frac{1}{\\sigma<em>{i}}\\nu</em>{i}^{T}A^{T})(\\frac{1}{\\sigma<em>{j}}A\\nu</em>{j}) = \\frac{1}{\\sigma<em>{i}\\sigma</em>{j}}\\nu<em>{i}^{T}(A^{T}A\\nu</em>{j}) = \\frac{\\sigma<em>{j}}{\\sigma</em>{i}}\\nu<em>{i}\\nu</em>{j}$<br>所以$u<em>{1},u</em>{2},\\cdots,u_{r}$构成一组标准正交基.</p>\n<p>令$U<em>{2} = u</em>{r+1},\\cdots,u<em>{n}$为$R(A)^{\\perp }$的一组标准正交基,记$U = \\begin{bmatrix} U</em>{1} &amp; U_{2} \\end{bmatrix}$</p>\n<p>$U\\Sigma V^{T} = \\begin{bmatrix}U<em>{1} &amp; U</em>{2} \\end{bmatrix}\\begin{bmatrix}\\Sigma<em>{1} &amp; 0\\\\ 0 &amp; 0 \\end{bmatrix}\\begin{bmatrix}V</em>{1}^{T}\\\\<br>                 V<em>{2}^{T}\\end{bmatrix}=U</em>{1}\\Sigma<em>{1}V</em>{1}^{T} = AV<em>{1}V</em>{1}^{T} = A$.</p>"},{"title":"haskell-hw","date":"2020-08-27T10:07:23.000Z","_content":"homework of CIS194\n## [hw1](https://www.seas.upenn.edu/~cis194/spring13/hw/01-intro.pdf)\n<!--More-->\n```haskell\n-- Exercise 01\ntoDigits :: Integer -> [Integer]\ntoDigits x\n   | x >= 0 && x < 10 = [x]\n   | x > 10 = toDigits (x `div` 10) ++ [x `mod` 10]\n   | otherwise = []\n\ntoDigitsRev :: Integer -> [Integer]\ntoDigitsRev x\n   | x >= 0 && x < 10 = [x]\n   | x > 10 = (x `mod` 10):toDigitsRev(x `div` 10)\n   | otherwise = []\n\n\n-- Exercise 02\nlen :: [Integer] -> Integer\nlen [] = 0\nlen (_:y) = 1 + len(y)\n\n\ndoubleEveryOther :: [Integer] -> [Integer]\ndoubleEveryOther [] = []\ndoubleEveryOther (x:[])= [x]\ndoubleEveryOther (x:y:z)= if(len(z) `mod` 2 == 0) then (x*2 : y : doubleEveryOther(z)) else (x:y*2:doubleEveryOther(z))\n\n-- Exercise 3\nsumDigit :: Integer -> Integer\nsumDigit x\n    | x < 10  = x\n    | otherwise = (x `mod` 10) + sumDigit (x `div` 10) \n\nsumDigits :: [Integer] -> Integer\nsumDigits [] = 0\nsumDigits (x:y) = sumDigit(x) + sumDigits(y)\n\n-- Exercise 4\nvalidate :: Integer -> Bool\nvalidate num\n   | sumDigits(doubleEveryOther(toDigits(num))) `mod` 10 == 0 = True\n   | otherwise = False\n\n-- Exercise 5\ntype Peg = String\ntype Move = (Peg, Peg)\nhanoi :: Integer -> Peg -> Peg -> Peg -> [Move]\nhanoi n a b c\n     | n == 1 = [(a,b)]\n     | otherwise = (hanoi (n-1) a c b) ++ [(a,b)] ++ (hanoi (n-1) c b a)\n\n-- Exercise 6\n\nlen2 :: [Move] -> Integer\nlen2 [] = 0\nlen2 (_:y) = 1 + len2 y\n\nhanoi2 :: Integer -> Peg -> Peg -> Peg -> Peg -> [Move]\nhanoi2 n a b c d\n     | n == 1 = [(a,b)]\n     | n == 2 = [(a,d),(a,b),(d,b)]\n     | otherwise = (hanoi2 (n-2) a c b d) ++[(a,d),(a,b),(d,b)] ++ (hanoi2 (n-2) c b a d)\n\n\n```\n## [hw2](https://www.seas.upenn.edu/~cis194/spring13/hw/02-ADTs.pdf)\n```haskell\n{-# OPTIONS_GHC -Wall #-}\nmodule LogAnalysis where\n\nimport Log\n\n-- Exercise 1\n\nparseMessage :: String -> LogMessage\nparseMessage msg\n      |msg!!0 == 'I' = LogMessage Info (read ((words msg)!!1)::Int)  (unwords(drop 2 (words msg)))\n      |msg!!0 == 'W' = LogMessage Warning (read ((words msg)!!1)::Int)  (unwords(drop 2(words msg)))\n      |msg!!0 == 'E' = LogMessage (Error (read ((words msg)!!1)::Int)) (read ((words msg)!!2)::Int)  (unwords(drop 3 (words msg)))\n      |otherwise = Unknown msg\n\n\n\nparse :: String -> [LogMessage]\nparse msg\n     |msg == \"\" = []\n     |otherwise = [parseMessage ((lines msg)!!0)] ++ parse(unlines(tail(lines msg)))\n\n-- Exercise 2\n\ninsert :: LogMessage -> MessageTree -> MessageTree\ninsert (Unknown _) t = t\ninsert (LogMessage a b c) (Node x (LogMessage w y v) z) = if b < y then Node (insert (LogMessage a b c) x) (LogMessage w y v) z\n                                                              else Node x (LogMessage w y v) (insert (LogMessage a b c) z)\ninsert (LogMessage a b c) Leaf = Node Leaf (LogMessage a b c) Leaf\ninsert (LogMessage a b c) _ = Node Leaf (LogMessage a b c) Leaf\n\n-- Exercise 3\n\nbuild :: [LogMessage] -> MessageTree\nbuild [] = Leaf\nbuild (x:y) = insert x (build y)\n\n-- Exercise 4\n\ninOrder :: MessageTree -> [LogMessage]\ninOrder Leaf = []\ninOrder (Node x y z) = inOrder x ++ [y] ++ inOrder z\n\n\n\n-- Exercise 5\nselect :: [LogMessage] -> [LogMessage]\nselect [] = []\nselect ((LogMessage (Error x) y z) : w) = if x > 50 then [(LogMessage (Error x) y z)] ++ (select w) else (select w)\nselect (_:y) = select y\n\ngetMsg::[LogMessage] -> [String]\ngetMsg [] = []\ngetMsg ((LogMessage _ _ z):w) = [z] ++ (getMsg w)\ngetMsg _ = []\n\nwhatWentWrong :: [LogMessage] -> [String]\nwhatWentWrong msg = (getMsg (inOrder(build(select msg))))\n\n\n```\n## [hw3](https://www.seas.upenn.edu/~cis194/spring13/hw/03-rec-poly.pdf)\n```haskell\n-- Exercise 1 Hopscotch\n\nsk::Int->Int -> [a] -> [a]\nsk n x ls\n    | n + x > length(ls) = [ls !! (x-1)]\n    | otherwise = [ls !! (x-1)]  ++ (sk n (x+n) ls)\n\nskip::Int->[a] -> [[a]]\nskip n ls\n     | n == length(ls) = [(sk n n ls)]\n     | otherwise = [(sk n n ls)] ++ (skip (n+1) ls)\n\nskips :: [a] -> [[a]]\nskips [] = []\nskips ls = (skip 1 ls)\n\n-- Exercise 2 Local maxima\ngetMax :: Integer -> [Integer] -> [Integer]\ngetMax _ [] = []\ngetMax _ [x] = []\ngetMax a (x:y:z) =  if (x > a  &&  x > y) then [x] ++ (getMax x (y:z)) else (getMax x (y:z))\n\nlocalMaxima :: [Integer] -> [Integer]\nlocalMaxima [] = []\nlocalMaxima ls = getMax (ls !! 0) ls\n\n-- Exercise 3 Histogram\ncount :: Integer -> [Integer] -> [Integer]\ncount 10 _ = []\ncount n ls = [(toInteger(length(filter ( == n) ls)))] ++ (count (n+1) ls)\n\nline :: [Integer] -> String\nline [] = \"\\n\"\nline (x:y) = if x > 0 then \"*\" ++ line(y) else \" \" ++ line(y)\n\nsub :: Integer -> Integer\nsub x = x - 1\n\ntoString::[Integer] -> String\ntoString ls\n     |(length(filter (> 0) ls)) == 0 = \"\"\n     |otherwise = toString(map sub ls) ++ line(ls)\n\n\nhistogram :: [Integer] -> String\nhistogram ls = (toString(count 0 ls) ++ \"0123456789\\n\")\n```\n\n## [hw4](https://www.seas.upenn.edu/~cis194/spring13/hw/04-higher-order.pdf)\n```haskell\n-- Exercise 1: Wholemeal programming\nfun1 :: [Integer] -> Integer\nfun1 [] = 1\nfun1 (x:xs)\n    |even x = (x - 2) * fun1 xs\n    |otherwise = fun1 xs\n\nfun1' :: [Integer]->Integer\nfun1' = product.map (\\x-> x-2).filter even\n\nfun2 :: Integer -> Integer\nfun2 1 = 0\nfun2 n | even n = n + fun2 (n `div` 2)\n       | otherwise = fun2 (3 * n + 1)\n\nfun2' :: Integer -> Integer\nfun2'  = sum.filter even.takeWhile (>1).iterate(\\x -> if even x then (x `div` 2) else (3*x + 1))\n\n-- Exercise 2:Folding with trees\ndata Tree a = Leaf\n            | Node Integer (Tree a) a (Tree a)\n  deriving (Show, Eq)\n\nfoldTree :: [a] -> Tree a\nfoldTree = foldr insertNode Leaf\n\ninsertNode :: a -> Tree a -> Tree a\ninsertNode x Leaf = Node 0 Leaf x Leaf\ninsertNode x (Node h ln y rn)\n  | treeHeight ln < treeHeight rn =\n    let nn = insertNode x ln\n    in Node (treeHeight nn + 1) nn y rn\n  | otherwise =\n    let nn = insertNode x rn\n    in Node (treeHeight nn + 1) ln y nn\n\ntreeHeight :: Tree a -> Integer\ntreeHeight Leaf = -1\ntreeHeight (Node h _ _ _) = h\n\n\n-- Exercise 3: More folds!\nxor :: [Bool] -> Bool\nxor = foldr (\\x y -> if ((x == True && y == False) || (x == False && y == True)) then True else False) False\n\nmap' :: (a -> b) -> [a] -> [b]\nmap' f = foldr (\\x y -> [f(x)] ++ y) []\n\nmyFoldl :: (a -> b -> a) -> a -> [b] -> a\nmyFoldl f base xs = foldr (flip f) base (reverse xs)\n\n-- Exercise 4:Finding primes\ncartProd :: [a] -> [b] -> [(a, b)]\ncartProd xs ys = [(x,y) | x <- xs, y <- ys]\n\nsieveSundaram :: Integer -> [Integer]\nsieveSundaram n = map (\\x -> x*2 + 1) (filter (\\x -> notElem x (map (\\(i,j) -> 2*i*j + i + j) (filter (\\(i,j)->2*i*j+i+j <= n) (cartProd [1..n] [1..n]))))  [1..n])\n\n```\n\n## [hw5](https://www.seas.upenn.edu/~cis194/spring13/hw/05-type-classes.pdf)\n```haskell\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE TypeSynonymInstances #-}\nimport ExprT\nimport Parser\nimport StackVM\nimport Data.Maybe\nimport qualified Data.Map as M\n-- Exercise 1\n\neval :: ExprT->Integer\neval (ExprT.Lit x) = x\neval (ExprT.Add x y) = eval x + eval y\neval (ExprT.Mul x y) = eval x * eval y\n\n-- Exercise 2\nevalStr :: String -> Maybe Integer\nevalStr str\n    |(parseExp ExprT.Lit ExprT.Add ExprT.Mul str == Nothing) = Nothing\n    |otherwise = Just(eval (fromJust(parseExp ExprT.Lit ExprT.Add ExprT.Mul str)))\n\n-- Exercise 3\nclass Expr a where\n   lit :: Integer -> a\n   add :: a -> a -> a\n   mul :: a -> a -> a\n\ninstance Expr ExprT where\n   lit = ExprT.Lit\n   add = ExprT.Add\n   mul = ExprT.Mul\n\nreify :: ExprT -> ExprT\nreify = id\n\n-- Exercise 4\ninstance Expr Integer where\n    lit  a =  a\n    add a b = a + b\n    mul a b = a*b\n\ninstance Expr Bool where\n     lit a = (if a > 0 then True else False)\n     add a b = a || b\n     mul a b = a && b\n\nnewtype MinMax = MinMax Integer deriving (Eq, Show)\n\ninstance Expr MinMax where\n      lit x = MinMax x\n      add (MinMax a) (MinMax b) = MinMax(max a b)\n      mul (MinMax a) (MinMax b) = MinMax(min a b)\n\nnewtype Mod7 = Mod7 Integer deriving (Eq, Show)\n\ninstance Expr Mod7 where\n     lit  x = Mod7(x `mod` 7)\n     add (Mod7 a) (Mod7 b) = Mod7((a + b) `mod` 7)\n     mul (Mod7 a) (Mod7 b) = Mod7((a*b) `mod` 7)\n\ntestExp :: Expr a => Maybe a\ntestExp = parseExp lit add mul \"(3 * -4) + 5\"\ntestInteger = testExp :: Maybe Integer\ntestBool = testExp :: Maybe Bool\ntestMM = testExp :: Maybe MinMax\ntestSat = testExp :: Maybe Mod7\n\n\n-- exercise 5\n\ninstance Expr Program where\n    lit x = [PushI x]\n    add a b = a ++ b ++ [StackVM.Add]\n    mul a b = a ++ b ++ [StackVM.Mul]\n\ncompile:: String -> Maybe Program\ncompile str = parseExp lit add mul str :: Maybe Program\n\n-- exercise 6\n\nclass HasVars a where\n        var :: String -> a\n\ndata VarExprT = Lit Integer\n                | Var String\n                | Add VarExprT VarExprT\n                | Mul VarExprT VarExprT\n\ninstance HasVars (M.Map String Integer -> Maybe Integer) where\n        var = M.lookup\n\ninstance Expr (M.Map String Integer -> Maybe Integer) where\n        lit int0 _ = Just int0\n        add var0 var1 map0 = do int0 <- var0 map0\n                                int1 <- var1 map0\n                                return (int0 + int1)\n        mul var0 var1 map0 = do int0 <- var0 map0\n                                int1 <- var1 map0\n                                return (int0 * int1)\n\nwithVars :: [(String, Integer)]\n            -> (M.Map String Integer -> Maybe Integer)\n            -> Maybe Integer\nwithVars vs ex = ex $ M.fromList vs\n\nmain :: IO ()\nmain = do\n          print $ withVars [(\"x\", 6)] $ add (lit 3) (var \"x\")\n          print $ withVars [(\"x\", 6)] $ add (lit 3) (var \"y\")\n          print $ withVars  [(\"x\", 6), (\"y\", 3)] $ mul (var \"x\") (add (var \"y\") (var \"x\"))\n\n\n```\n\n","source":"_posts/haskell-hw.md","raw":"---\ntitle: haskell-hw\ndate: 2020-08-27 18:07:23\ntags: haskell\n---\nhomework of CIS194\n## [hw1](https://www.seas.upenn.edu/~cis194/spring13/hw/01-intro.pdf)\n<!--More-->\n```haskell\n-- Exercise 01\ntoDigits :: Integer -> [Integer]\ntoDigits x\n   | x >= 0 && x < 10 = [x]\n   | x > 10 = toDigits (x `div` 10) ++ [x `mod` 10]\n   | otherwise = []\n\ntoDigitsRev :: Integer -> [Integer]\ntoDigitsRev x\n   | x >= 0 && x < 10 = [x]\n   | x > 10 = (x `mod` 10):toDigitsRev(x `div` 10)\n   | otherwise = []\n\n\n-- Exercise 02\nlen :: [Integer] -> Integer\nlen [] = 0\nlen (_:y) = 1 + len(y)\n\n\ndoubleEveryOther :: [Integer] -> [Integer]\ndoubleEveryOther [] = []\ndoubleEveryOther (x:[])= [x]\ndoubleEveryOther (x:y:z)= if(len(z) `mod` 2 == 0) then (x*2 : y : doubleEveryOther(z)) else (x:y*2:doubleEveryOther(z))\n\n-- Exercise 3\nsumDigit :: Integer -> Integer\nsumDigit x\n    | x < 10  = x\n    | otherwise = (x `mod` 10) + sumDigit (x `div` 10) \n\nsumDigits :: [Integer] -> Integer\nsumDigits [] = 0\nsumDigits (x:y) = sumDigit(x) + sumDigits(y)\n\n-- Exercise 4\nvalidate :: Integer -> Bool\nvalidate num\n   | sumDigits(doubleEveryOther(toDigits(num))) `mod` 10 == 0 = True\n   | otherwise = False\n\n-- Exercise 5\ntype Peg = String\ntype Move = (Peg, Peg)\nhanoi :: Integer -> Peg -> Peg -> Peg -> [Move]\nhanoi n a b c\n     | n == 1 = [(a,b)]\n     | otherwise = (hanoi (n-1) a c b) ++ [(a,b)] ++ (hanoi (n-1) c b a)\n\n-- Exercise 6\n\nlen2 :: [Move] -> Integer\nlen2 [] = 0\nlen2 (_:y) = 1 + len2 y\n\nhanoi2 :: Integer -> Peg -> Peg -> Peg -> Peg -> [Move]\nhanoi2 n a b c d\n     | n == 1 = [(a,b)]\n     | n == 2 = [(a,d),(a,b),(d,b)]\n     | otherwise = (hanoi2 (n-2) a c b d) ++[(a,d),(a,b),(d,b)] ++ (hanoi2 (n-2) c b a d)\n\n\n```\n## [hw2](https://www.seas.upenn.edu/~cis194/spring13/hw/02-ADTs.pdf)\n```haskell\n{-# OPTIONS_GHC -Wall #-}\nmodule LogAnalysis where\n\nimport Log\n\n-- Exercise 1\n\nparseMessage :: String -> LogMessage\nparseMessage msg\n      |msg!!0 == 'I' = LogMessage Info (read ((words msg)!!1)::Int)  (unwords(drop 2 (words msg)))\n      |msg!!0 == 'W' = LogMessage Warning (read ((words msg)!!1)::Int)  (unwords(drop 2(words msg)))\n      |msg!!0 == 'E' = LogMessage (Error (read ((words msg)!!1)::Int)) (read ((words msg)!!2)::Int)  (unwords(drop 3 (words msg)))\n      |otherwise = Unknown msg\n\n\n\nparse :: String -> [LogMessage]\nparse msg\n     |msg == \"\" = []\n     |otherwise = [parseMessage ((lines msg)!!0)] ++ parse(unlines(tail(lines msg)))\n\n-- Exercise 2\n\ninsert :: LogMessage -> MessageTree -> MessageTree\ninsert (Unknown _) t = t\ninsert (LogMessage a b c) (Node x (LogMessage w y v) z) = if b < y then Node (insert (LogMessage a b c) x) (LogMessage w y v) z\n                                                              else Node x (LogMessage w y v) (insert (LogMessage a b c) z)\ninsert (LogMessage a b c) Leaf = Node Leaf (LogMessage a b c) Leaf\ninsert (LogMessage a b c) _ = Node Leaf (LogMessage a b c) Leaf\n\n-- Exercise 3\n\nbuild :: [LogMessage] -> MessageTree\nbuild [] = Leaf\nbuild (x:y) = insert x (build y)\n\n-- Exercise 4\n\ninOrder :: MessageTree -> [LogMessage]\ninOrder Leaf = []\ninOrder (Node x y z) = inOrder x ++ [y] ++ inOrder z\n\n\n\n-- Exercise 5\nselect :: [LogMessage] -> [LogMessage]\nselect [] = []\nselect ((LogMessage (Error x) y z) : w) = if x > 50 then [(LogMessage (Error x) y z)] ++ (select w) else (select w)\nselect (_:y) = select y\n\ngetMsg::[LogMessage] -> [String]\ngetMsg [] = []\ngetMsg ((LogMessage _ _ z):w) = [z] ++ (getMsg w)\ngetMsg _ = []\n\nwhatWentWrong :: [LogMessage] -> [String]\nwhatWentWrong msg = (getMsg (inOrder(build(select msg))))\n\n\n```\n## [hw3](https://www.seas.upenn.edu/~cis194/spring13/hw/03-rec-poly.pdf)\n```haskell\n-- Exercise 1 Hopscotch\n\nsk::Int->Int -> [a] -> [a]\nsk n x ls\n    | n + x > length(ls) = [ls !! (x-1)]\n    | otherwise = [ls !! (x-1)]  ++ (sk n (x+n) ls)\n\nskip::Int->[a] -> [[a]]\nskip n ls\n     | n == length(ls) = [(sk n n ls)]\n     | otherwise = [(sk n n ls)] ++ (skip (n+1) ls)\n\nskips :: [a] -> [[a]]\nskips [] = []\nskips ls = (skip 1 ls)\n\n-- Exercise 2 Local maxima\ngetMax :: Integer -> [Integer] -> [Integer]\ngetMax _ [] = []\ngetMax _ [x] = []\ngetMax a (x:y:z) =  if (x > a  &&  x > y) then [x] ++ (getMax x (y:z)) else (getMax x (y:z))\n\nlocalMaxima :: [Integer] -> [Integer]\nlocalMaxima [] = []\nlocalMaxima ls = getMax (ls !! 0) ls\n\n-- Exercise 3 Histogram\ncount :: Integer -> [Integer] -> [Integer]\ncount 10 _ = []\ncount n ls = [(toInteger(length(filter ( == n) ls)))] ++ (count (n+1) ls)\n\nline :: [Integer] -> String\nline [] = \"\\n\"\nline (x:y) = if x > 0 then \"*\" ++ line(y) else \" \" ++ line(y)\n\nsub :: Integer -> Integer\nsub x = x - 1\n\ntoString::[Integer] -> String\ntoString ls\n     |(length(filter (> 0) ls)) == 0 = \"\"\n     |otherwise = toString(map sub ls) ++ line(ls)\n\n\nhistogram :: [Integer] -> String\nhistogram ls = (toString(count 0 ls) ++ \"0123456789\\n\")\n```\n\n## [hw4](https://www.seas.upenn.edu/~cis194/spring13/hw/04-higher-order.pdf)\n```haskell\n-- Exercise 1: Wholemeal programming\nfun1 :: [Integer] -> Integer\nfun1 [] = 1\nfun1 (x:xs)\n    |even x = (x - 2) * fun1 xs\n    |otherwise = fun1 xs\n\nfun1' :: [Integer]->Integer\nfun1' = product.map (\\x-> x-2).filter even\n\nfun2 :: Integer -> Integer\nfun2 1 = 0\nfun2 n | even n = n + fun2 (n `div` 2)\n       | otherwise = fun2 (3 * n + 1)\n\nfun2' :: Integer -> Integer\nfun2'  = sum.filter even.takeWhile (>1).iterate(\\x -> if even x then (x `div` 2) else (3*x + 1))\n\n-- Exercise 2:Folding with trees\ndata Tree a = Leaf\n            | Node Integer (Tree a) a (Tree a)\n  deriving (Show, Eq)\n\nfoldTree :: [a] -> Tree a\nfoldTree = foldr insertNode Leaf\n\ninsertNode :: a -> Tree a -> Tree a\ninsertNode x Leaf = Node 0 Leaf x Leaf\ninsertNode x (Node h ln y rn)\n  | treeHeight ln < treeHeight rn =\n    let nn = insertNode x ln\n    in Node (treeHeight nn + 1) nn y rn\n  | otherwise =\n    let nn = insertNode x rn\n    in Node (treeHeight nn + 1) ln y nn\n\ntreeHeight :: Tree a -> Integer\ntreeHeight Leaf = -1\ntreeHeight (Node h _ _ _) = h\n\n\n-- Exercise 3: More folds!\nxor :: [Bool] -> Bool\nxor = foldr (\\x y -> if ((x == True && y == False) || (x == False && y == True)) then True else False) False\n\nmap' :: (a -> b) -> [a] -> [b]\nmap' f = foldr (\\x y -> [f(x)] ++ y) []\n\nmyFoldl :: (a -> b -> a) -> a -> [b] -> a\nmyFoldl f base xs = foldr (flip f) base (reverse xs)\n\n-- Exercise 4:Finding primes\ncartProd :: [a] -> [b] -> [(a, b)]\ncartProd xs ys = [(x,y) | x <- xs, y <- ys]\n\nsieveSundaram :: Integer -> [Integer]\nsieveSundaram n = map (\\x -> x*2 + 1) (filter (\\x -> notElem x (map (\\(i,j) -> 2*i*j + i + j) (filter (\\(i,j)->2*i*j+i+j <= n) (cartProd [1..n] [1..n]))))  [1..n])\n\n```\n\n## [hw5](https://www.seas.upenn.edu/~cis194/spring13/hw/05-type-classes.pdf)\n```haskell\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE TypeSynonymInstances #-}\nimport ExprT\nimport Parser\nimport StackVM\nimport Data.Maybe\nimport qualified Data.Map as M\n-- Exercise 1\n\neval :: ExprT->Integer\neval (ExprT.Lit x) = x\neval (ExprT.Add x y) = eval x + eval y\neval (ExprT.Mul x y) = eval x * eval y\n\n-- Exercise 2\nevalStr :: String -> Maybe Integer\nevalStr str\n    |(parseExp ExprT.Lit ExprT.Add ExprT.Mul str == Nothing) = Nothing\n    |otherwise = Just(eval (fromJust(parseExp ExprT.Lit ExprT.Add ExprT.Mul str)))\n\n-- Exercise 3\nclass Expr a where\n   lit :: Integer -> a\n   add :: a -> a -> a\n   mul :: a -> a -> a\n\ninstance Expr ExprT where\n   lit = ExprT.Lit\n   add = ExprT.Add\n   mul = ExprT.Mul\n\nreify :: ExprT -> ExprT\nreify = id\n\n-- Exercise 4\ninstance Expr Integer where\n    lit  a =  a\n    add a b = a + b\n    mul a b = a*b\n\ninstance Expr Bool where\n     lit a = (if a > 0 then True else False)\n     add a b = a || b\n     mul a b = a && b\n\nnewtype MinMax = MinMax Integer deriving (Eq, Show)\n\ninstance Expr MinMax where\n      lit x = MinMax x\n      add (MinMax a) (MinMax b) = MinMax(max a b)\n      mul (MinMax a) (MinMax b) = MinMax(min a b)\n\nnewtype Mod7 = Mod7 Integer deriving (Eq, Show)\n\ninstance Expr Mod7 where\n     lit  x = Mod7(x `mod` 7)\n     add (Mod7 a) (Mod7 b) = Mod7((a + b) `mod` 7)\n     mul (Mod7 a) (Mod7 b) = Mod7((a*b) `mod` 7)\n\ntestExp :: Expr a => Maybe a\ntestExp = parseExp lit add mul \"(3 * -4) + 5\"\ntestInteger = testExp :: Maybe Integer\ntestBool = testExp :: Maybe Bool\ntestMM = testExp :: Maybe MinMax\ntestSat = testExp :: Maybe Mod7\n\n\n-- exercise 5\n\ninstance Expr Program where\n    lit x = [PushI x]\n    add a b = a ++ b ++ [StackVM.Add]\n    mul a b = a ++ b ++ [StackVM.Mul]\n\ncompile:: String -> Maybe Program\ncompile str = parseExp lit add mul str :: Maybe Program\n\n-- exercise 6\n\nclass HasVars a where\n        var :: String -> a\n\ndata VarExprT = Lit Integer\n                | Var String\n                | Add VarExprT VarExprT\n                | Mul VarExprT VarExprT\n\ninstance HasVars (M.Map String Integer -> Maybe Integer) where\n        var = M.lookup\n\ninstance Expr (M.Map String Integer -> Maybe Integer) where\n        lit int0 _ = Just int0\n        add var0 var1 map0 = do int0 <- var0 map0\n                                int1 <- var1 map0\n                                return (int0 + int1)\n        mul var0 var1 map0 = do int0 <- var0 map0\n                                int1 <- var1 map0\n                                return (int0 * int1)\n\nwithVars :: [(String, Integer)]\n            -> (M.Map String Integer -> Maybe Integer)\n            -> Maybe Integer\nwithVars vs ex = ex $ M.fromList vs\n\nmain :: IO ()\nmain = do\n          print $ withVars [(\"x\", 6)] $ add (lit 3) (var \"x\")\n          print $ withVars [(\"x\", 6)] $ add (lit 3) (var \"y\")\n          print $ withVars  [(\"x\", 6), (\"y\", 3)] $ mul (var \"x\") (add (var \"y\") (var \"x\"))\n\n\n```\n\n","slug":"haskell-hw","published":1,"updated":"2020-09-04T08:40:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdi0006rouj5enj8ywt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>homework of CIS194</p>\n<h2 id=\"hw1\"><a href=\"#hw1\" class=\"headerlink\" title=\"hw1\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/01-intro.pdf\">hw1</a></h2><a id=\"more\"></a>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Exercise 01</span></span><br><span class=\"line\"><span class=\"title\">toDigits</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">toDigits</span> x</span><br><span class=\"line\">   | x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; <span class=\"number\">10</span> = [x]</span><br><span class=\"line\">   | x &gt; <span class=\"number\">10</span> = toDigits (x `div` <span class=\"number\">10</span>) ++ [x `mod` <span class=\"number\">10</span>]</span><br><span class=\"line\">   | otherwise = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">toDigitsRev</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">toDigitsRev</span> x</span><br><span class=\"line\">   | x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; <span class=\"number\">10</span> = [x]</span><br><span class=\"line\">   | x &gt; <span class=\"number\">10</span> = (x `mod` <span class=\"number\">10</span>):toDigitsRev(x `div` <span class=\"number\">10</span>)</span><br><span class=\"line\">   | otherwise = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 02</span></span><br><span class=\"line\"><span class=\"title\">len</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">len</span> [] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">len</span> (_:y) = <span class=\"number\">1</span> + len(y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">doubleEveryOther</span> :: [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">doubleEveryOther</span> [] = []</span><br><span class=\"line\"><span class=\"title\">doubleEveryOther</span> (x:[])= [x]</span><br><span class=\"line\"><span class=\"title\">doubleEveryOther</span> (x:y:z)= <span class=\"keyword\">if</span>(len(z) `mod` <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">then</span> (x*<span class=\"number\">2</span> : y : doubleEveryOther(z)) <span class=\"keyword\">else</span> (x:y*<span class=\"number\">2</span>:doubleEveryOther(z))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3</span></span><br><span class=\"line\"><span class=\"title\">sumDigit</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">sumDigit</span> x</span><br><span class=\"line\">    | x &lt; <span class=\"number\">10</span>  = x</span><br><span class=\"line\">    | otherwise = (x `mod` <span class=\"number\">10</span>) + sumDigit (x `div` <span class=\"number\">10</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">sumDigits</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">sumDigits</span> [] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">sumDigits</span> (x:y) = sumDigit(x) + sumDigits(y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 4</span></span><br><span class=\"line\"><span class=\"title\">validate</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">validate</span> num</span><br><span class=\"line\">   | sumDigits(doubleEveryOther(toDigits(num))) `mod` <span class=\"number\">10</span> == <span class=\"number\">0</span> = <span class=\"type\">True</span></span><br><span class=\"line\">   | otherwise = <span class=\"type\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 5</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> <span class=\"type\">Peg</span> = <span class=\"type\">String</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> <span class=\"type\">Move</span> = (<span class=\"type\">Peg</span>, <span class=\"type\">Peg</span>)</span></span><br><span class=\"line\"><span class=\"title\">hanoi</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; [<span class=\"type\">Move</span>]</span><br><span class=\"line\"><span class=\"title\">hanoi</span> n a b c</span><br><span class=\"line\">     | n == <span class=\"number\">1</span> = [(a,b)]</span><br><span class=\"line\">     | otherwise = (hanoi (n<span class=\"number\">-1</span>) a c b) ++ [(a,b)] ++ (hanoi (n<span class=\"number\">-1</span>) c b a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">len2</span> :: [<span class=\"type\">Move</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">len2</span> [] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">len2</span> (_:y) = <span class=\"number\">1</span> + len2 y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">hanoi2</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; [<span class=\"type\">Move</span>]</span><br><span class=\"line\"><span class=\"title\">hanoi2</span> n a b c d</span><br><span class=\"line\">     | n == <span class=\"number\">1</span> = [(a,b)]</span><br><span class=\"line\">     | n == <span class=\"number\">2</span> = [(a,d),(a,b),(d,b)]</span><br><span class=\"line\">     | otherwise = (hanoi2 (n<span class=\"number\">-2</span>) a c b d) ++[(a,d),(a,b),(d,b)] ++ (hanoi2 (n<span class=\"number\">-2</span>) c b a d)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"hw2\"><a href=\"#hw2\" class=\"headerlink\" title=\"hw2\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/02-ADTs.pdf\">hw2</a></h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#123;-# OPTIONS_GHC -Wall #-&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> LogAnalysis <span class=\"keyword\">where</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">parseMessage</span> :: <span class=\"type\">String</span> -&gt; <span class=\"type\">LogMessage</span></span><br><span class=\"line\"><span class=\"title\">parseMessage</span> msg</span><br><span class=\"line\">      |msg!!<span class=\"number\">0</span> == &#x27;<span class=\"type\">I&#x27;</span> = <span class=\"type\">LogMessage</span> <span class=\"type\">Info</span> (read ((words msg)!!<span class=\"number\">1</span>)::<span class=\"type\">Int</span>)  (unwords(drop <span class=\"number\">2</span> (words msg)))</span><br><span class=\"line\">      |msg!!<span class=\"number\">0</span> == &#x27;<span class=\"type\">W&#x27;</span> = <span class=\"type\">LogMessage</span> <span class=\"type\">Warning</span> (read ((words msg)!!<span class=\"number\">1</span>)::<span class=\"type\">Int</span>)  (unwords(drop <span class=\"number\">2</span>(words msg)))</span><br><span class=\"line\">      |msg!!<span class=\"number\">0</span> == &#x27;<span class=\"type\">E&#x27;</span> = <span class=\"type\">LogMessage</span> (<span class=\"type\">Error</span> (read ((words msg)!!<span class=\"number\">1</span>)::<span class=\"type\">Int</span>)) (read ((words msg)!!<span class=\"number\">2</span>)::<span class=\"type\">Int</span>)  (unwords(drop <span class=\"number\">3</span> (words msg)))</span><br><span class=\"line\">      |otherwise = <span class=\"type\">Unknown</span> msg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">parse</span> :: <span class=\"type\">String</span> -&gt; [<span class=\"type\">LogMessage</span>]</span><br><span class=\"line\"><span class=\"title\">parse</span> msg</span><br><span class=\"line\">     |msg == <span class=\"string\">&quot;&quot;</span> = []</span><br><span class=\"line\">     |otherwise = [parseMessage ((lines msg)!!<span class=\"number\">0</span>)] ++ parse(unlines(tail(lines msg)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">insert</span> :: <span class=\"type\">LogMessage</span> -&gt; <span class=\"type\">MessageTree</span> -&gt; <span class=\"type\">MessageTree</span></span><br><span class=\"line\"><span class=\"title\">insert</span> (<span class=\"type\">Unknown</span> _) t = t</span><br><span class=\"line\"><span class=\"title\">insert</span> (<span class=\"type\">LogMessage</span> a b c) (<span class=\"type\">Node</span> x (<span class=\"type\">LogMessage</span> w y v) z) = <span class=\"keyword\">if</span> b &lt; y <span class=\"keyword\">then</span> <span class=\"type\">Node</span> (insert (<span class=\"type\">LogMessage</span> a b c) x) (<span class=\"type\">LogMessage</span> w y v) z</span><br><span class=\"line\">                                                              <span class=\"keyword\">else</span> <span class=\"type\">Node</span> x (<span class=\"type\">LogMessage</span> w y v) (insert (<span class=\"type\">LogMessage</span> a b c) z)</span><br><span class=\"line\"><span class=\"title\">insert</span> (<span class=\"type\">LogMessage</span> a b c) <span class=\"type\">Leaf</span> = <span class=\"type\">Node</span> <span class=\"type\">Leaf</span> (<span class=\"type\">LogMessage</span> a b c) <span class=\"type\">Leaf</span></span><br><span class=\"line\"><span class=\"title\">insert</span> (<span class=\"type\">LogMessage</span> a b c) _ = <span class=\"type\">Node</span> <span class=\"type\">Leaf</span> (<span class=\"type\">LogMessage</span> a b c) <span class=\"type\">Leaf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">build</span> :: [<span class=\"type\">LogMessage</span>] -&gt; <span class=\"type\">MessageTree</span></span><br><span class=\"line\"><span class=\"title\">build</span> [] = <span class=\"type\">Leaf</span></span><br><span class=\"line\"><span class=\"title\">build</span> (x:y) = insert x (build y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">inOrder</span> :: <span class=\"type\">MessageTree</span> -&gt; [<span class=\"type\">LogMessage</span>]</span><br><span class=\"line\"><span class=\"title\">inOrder</span> <span class=\"type\">Leaf</span> = []</span><br><span class=\"line\"><span class=\"title\">inOrder</span> (<span class=\"type\">Node</span> x y z) = inOrder x ++ [y] ++ inOrder z</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 5</span></span><br><span class=\"line\"><span class=\"title\">select</span> :: [<span class=\"type\">LogMessage</span>] -&gt; [<span class=\"type\">LogMessage</span>]</span><br><span class=\"line\"><span class=\"title\">select</span> [] = []</span><br><span class=\"line\"><span class=\"title\">select</span> ((<span class=\"type\">LogMessage</span> (<span class=\"type\">Error</span> x) y z) : w) = <span class=\"keyword\">if</span> x &gt; <span class=\"number\">50</span> <span class=\"keyword\">then</span> [(<span class=\"type\">LogMessage</span> (<span class=\"type\">Error</span> x) y z)] ++ (select w) <span class=\"keyword\">else</span> (select w)</span><br><span class=\"line\"><span class=\"title\">select</span> (_:y) = select y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">getMsg</span>::[<span class=\"type\">LogMessage</span>] -&gt; [<span class=\"type\">String</span>]</span><br><span class=\"line\"><span class=\"title\">getMsg</span> [] = []</span><br><span class=\"line\"><span class=\"title\">getMsg</span> ((<span class=\"type\">LogMessage</span> _ _ z):w) = [z] ++ (getMsg w)</span><br><span class=\"line\"><span class=\"title\">getMsg</span> _ = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">whatWentWrong</span> :: [<span class=\"type\">LogMessage</span>] -&gt; [<span class=\"type\">String</span>]</span><br><span class=\"line\"><span class=\"title\">whatWentWrong</span> msg = (getMsg (inOrder(build(select msg))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"hw3\"><a href=\"#hw3\" class=\"headerlink\" title=\"hw3\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/03-rec-poly.pdf\">hw3</a></h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Exercise 1 Hopscotch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">sk</span>::<span class=\"type\">Int</span>-&gt;<span class=\"type\">Int</span> -&gt; [a] -&gt; [a]</span><br><span class=\"line\"><span class=\"title\">sk</span> n x ls</span><br><span class=\"line\">    | n + x &gt; length(ls) = [ls !! (x<span class=\"number\">-1</span>)]</span><br><span class=\"line\">    | otherwise = [ls !! (x<span class=\"number\">-1</span>)]  ++ (sk n (x+n) ls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">skip</span>::<span class=\"type\">Int</span>-&gt;[a] -&gt; [[a]]</span><br><span class=\"line\"><span class=\"title\">skip</span> n ls</span><br><span class=\"line\">     | n == length(ls) = [(sk n n ls)]</span><br><span class=\"line\">     | otherwise = [(sk n n ls)] ++ (skip (n+<span class=\"number\">1</span>) ls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">skips</span> :: [a] -&gt; [[a]]</span><br><span class=\"line\"><span class=\"title\">skips</span> [] = []</span><br><span class=\"line\"><span class=\"title\">skips</span> ls = (skip <span class=\"number\">1</span> ls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 2 Local maxima</span></span><br><span class=\"line\"><span class=\"title\">getMax</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">getMax</span> _ [] = []</span><br><span class=\"line\"><span class=\"title\">getMax</span> _ [x] = []</span><br><span class=\"line\"><span class=\"title\">getMax</span> a (x:y:z) =  <span class=\"keyword\">if</span> (x &gt; a  &amp;&amp;  x &gt; y) <span class=\"keyword\">then</span> [x] ++ (getMax x (y:z)) <span class=\"keyword\">else</span> (getMax x (y:z))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">localMaxima</span> :: [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">localMaxima</span> [] = []</span><br><span class=\"line\"><span class=\"title\">localMaxima</span> ls = getMax (ls !! <span class=\"number\">0</span>) ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3 Histogram</span></span><br><span class=\"line\"><span class=\"title\">count</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">count</span> <span class=\"number\">10</span> _ = []</span><br><span class=\"line\"><span class=\"title\">count</span> n ls = [(toInteger(length(filter ( == n) ls)))] ++ (count (n+<span class=\"number\">1</span>) ls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">line</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"title\">line</span> [] = <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"><span class=\"title\">line</span> (x:y) = <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span> <span class=\"string\">&quot;*&quot;</span> ++ line(y) <span class=\"keyword\">else</span> <span class=\"string\">&quot; &quot;</span> ++ line(y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">sub</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">sub</span> x = x - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">toString</span>::[<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"title\">toString</span> ls</span><br><span class=\"line\">     |(length(filter (&gt; <span class=\"number\">0</span>) ls)) == <span class=\"number\">0</span> = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">     |otherwise = toString(map sub ls) ++ line(ls)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">histogram</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"title\">histogram</span> ls = (toString(count <span class=\"number\">0</span> ls) ++ <span class=\"string\">&quot;0123456789\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"hw4\"><a href=\"#hw4\" class=\"headerlink\" title=\"hw4\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/04-higher-order.pdf\">hw4</a></h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Exercise 1: Wholemeal programming</span></span><br><span class=\"line\"><span class=\"title\">fun1</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">fun1</span> [] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"title\">fun1</span> (x:xs)</span><br><span class=\"line\">    |even x = (x - <span class=\"number\">2</span>) * fun1 xs</span><br><span class=\"line\">    |otherwise = fun1 xs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">fun1&#x27;</span> :: [<span class=\"type\">Integer</span>]-&gt;<span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">fun1&#x27;</span> = product.map (\\x-&gt; x<span class=\"number\">-2</span>).filter even</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">fun2</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">fun2</span> <span class=\"number\">1</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">fun2</span> n | even n = n + fun2 (n `div` <span class=\"number\">2</span>)</span><br><span class=\"line\">       | otherwise = fun2 (<span class=\"number\">3</span> * n + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">fun2&#x27;</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">fun2&#x27;</span>  = sum.filter even.takeWhile (&gt;<span class=\"number\">1</span>).iterate(\\x -&gt; <span class=\"keyword\">if</span> even x <span class=\"keyword\">then</span> (x `div` <span class=\"number\">2</span>) <span class=\"keyword\">else</span> (<span class=\"number\">3</span>*x + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 2:Folding with trees</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Tree</span> a = <span class=\"type\">Leaf</span></span></span><br><span class=\"line\">            | <span class=\"type\">Node</span> <span class=\"type\">Integer</span> (<span class=\"type\">Tree</span> a) a (<span class=\"type\">Tree</span> a)</span><br><span class=\"line\">  <span class=\"keyword\">deriving</span> (<span class=\"type\">Show</span>, <span class=\"type\">Eq</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">foldTree</span> :: [a] -&gt; <span class=\"type\">Tree</span> a</span><br><span class=\"line\"><span class=\"title\">foldTree</span> = foldr insertNode <span class=\"type\">Leaf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">insertNode</span> :: a -&gt; <span class=\"type\">Tree</span> a -&gt; <span class=\"type\">Tree</span> a</span><br><span class=\"line\"><span class=\"title\">insertNode</span> x <span class=\"type\">Leaf</span> = <span class=\"type\">Node</span> <span class=\"number\">0</span> <span class=\"type\">Leaf</span> x <span class=\"type\">Leaf</span></span><br><span class=\"line\"><span class=\"title\">insertNode</span> x (<span class=\"type\">Node</span> h ln y rn)</span><br><span class=\"line\">  | treeHeight ln &lt; treeHeight rn =</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nn = insertNode x ln</span><br><span class=\"line\">    <span class=\"keyword\">in</span> <span class=\"type\">Node</span> (treeHeight nn + <span class=\"number\">1</span>) nn y rn</span><br><span class=\"line\">  | otherwise =</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nn = insertNode x rn</span><br><span class=\"line\">    <span class=\"keyword\">in</span> <span class=\"type\">Node</span> (treeHeight nn + <span class=\"number\">1</span>) ln y nn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">treeHeight</span> :: <span class=\"type\">Tree</span> a -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">treeHeight</span> <span class=\"type\">Leaf</span> = <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"title\">treeHeight</span> (<span class=\"type\">Node</span> h _ _ _) = h</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3: More folds!</span></span><br><span class=\"line\"><span class=\"title\">xor</span> :: [<span class=\"type\">Bool</span>] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">xor</span> = foldr (\\x y -&gt; <span class=\"keyword\">if</span> ((x == <span class=\"type\">True</span> &amp;&amp; y == <span class=\"type\">False</span>) || (x == <span class=\"type\">False</span> &amp;&amp; y == <span class=\"type\">True</span>)) <span class=\"keyword\">then</span> <span class=\"type\">True</span> <span class=\"keyword\">else</span> <span class=\"type\">False</span>) <span class=\"type\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">map&#x27;</span> :: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br><span class=\"line\"><span class=\"title\">map&#x27;</span> f = foldr (\\x y -&gt; [f(x)] ++ y) []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">myFoldl</span> :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br><span class=\"line\"><span class=\"title\">myFoldl</span> f base xs = foldr (flip f) base (reverse xs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 4:Finding primes</span></span><br><span class=\"line\"><span class=\"title\">cartProd</span> :: [a] -&gt; [b] -&gt; [(a, b)]</span><br><span class=\"line\"><span class=\"title\">cartProd</span> xs ys = [(x,y) | x &lt;- xs, y &lt;- ys]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">sieveSundaram</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">sieveSundaram</span> n = map (\\x -&gt; x*<span class=\"number\">2</span> + <span class=\"number\">1</span>) (filter (\\x -&gt; notElem x (map (\\(i,j) -&gt; <span class=\"number\">2</span>*i*j + i + j) (filter (\\(i,j)-&gt;<span class=\"number\">2</span>*i*j+i+j &lt;= n) (cartProd [<span class=\"number\">1.</span>.n] [<span class=\"number\">1.</span>.n]))))  [<span class=\"number\">1.</span>.n])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"hw5\"><a href=\"#hw5\" class=\"headerlink\" title=\"hw5\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/05-type-classes.pdf\">hw5</a></h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#123;-# LANGUAGE FlexibleInstances #-&#125;</span></span><br><span class=\"line\"><span class=\"meta\">&#123;-# LANGUAGE TypeSynonymInstances #-&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ExprT</span><br><span class=\"line\"><span class=\"keyword\">import</span> Parser</span><br><span class=\"line\"><span class=\"keyword\">import</span> StackVM</span><br><span class=\"line\"><span class=\"keyword\">import</span> Data.Maybe</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">qualified</span> Data.Map <span class=\"keyword\">as</span> M</span><br><span class=\"line\"><span class=\"comment\">-- Exercise 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">eval</span> :: <span class=\"type\">ExprT</span>-&gt;<span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">eval</span> (<span class=\"type\">ExprT</span>.<span class=\"type\">Lit</span> x) = x</span><br><span class=\"line\"><span class=\"title\">eval</span> (<span class=\"type\">ExprT</span>.<span class=\"type\">Add</span> x y) = eval x + eval y</span><br><span class=\"line\"><span class=\"title\">eval</span> (<span class=\"type\">ExprT</span>.<span class=\"type\">Mul</span> x y) = eval x * eval y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 2</span></span><br><span class=\"line\"><span class=\"title\">evalStr</span> :: <span class=\"type\">String</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">evalStr</span> str</span><br><span class=\"line\">    |(parseExp <span class=\"type\">ExprT</span>.<span class=\"type\">Lit</span> <span class=\"type\">ExprT</span>.<span class=\"type\">Add</span> <span class=\"type\">ExprT</span>.<span class=\"type\">Mul</span> str == <span class=\"type\">Nothing</span>) = <span class=\"type\">Nothing</span></span><br><span class=\"line\">    |otherwise = <span class=\"type\">Just</span>(eval (fromJust(parseExp <span class=\"type\">ExprT</span>.<span class=\"type\">Lit</span> <span class=\"type\">ExprT</span>.<span class=\"type\">Add</span> <span class=\"type\">ExprT</span>.<span class=\"type\">Mul</span> str)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">Expr</span> a <span class=\"keyword\">where</span></span></span><br><span class=\"line\">   lit :: <span class=\"type\">Integer</span> -&gt; a</span><br><span class=\"line\">   add :: a -&gt; a -&gt; a</span><br><span class=\"line\">   mul :: a -&gt; a -&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">ExprT</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">   lit = <span class=\"type\">ExprT</span>.<span class=\"type\">Lit</span></span><br><span class=\"line\">   add = <span class=\"type\">ExprT</span>.<span class=\"type\">Add</span></span><br><span class=\"line\">   mul = <span class=\"type\">ExprT</span>.<span class=\"type\">Mul</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">reify</span> :: <span class=\"type\">ExprT</span> -&gt; <span class=\"type\">ExprT</span></span><br><span class=\"line\"><span class=\"title\">reify</span> = id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 4</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">Integer</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">    lit  a =  a</span><br><span class=\"line\">    add a b = a + b</span><br><span class=\"line\">    mul a b = a*b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">Bool</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">     lit a = (<span class=\"keyword\">if</span> a &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span> <span class=\"type\">True</span> <span class=\"keyword\">else</span> <span class=\"type\">False</span>)</span><br><span class=\"line\">     add a b = a || b</span><br><span class=\"line\">     mul a b = a &amp;&amp; b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">newtype</span> <span class=\"type\">MinMax</span> = <span class=\"type\">MinMax</span> <span class=\"type\">Integer</span> <span class=\"keyword\">deriving</span> (<span class=\"type\">Eq</span>, <span class=\"type\">Show</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">MinMax</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">      lit x = <span class=\"type\">MinMax</span> x</span><br><span class=\"line\">      add (<span class=\"type\">MinMax</span> a) (<span class=\"type\">MinMax</span> b) = <span class=\"type\">MinMax</span>(max a b)</span><br><span class=\"line\">      mul (<span class=\"type\">MinMax</span> a) (<span class=\"type\">MinMax</span> b) = <span class=\"type\">MinMax</span>(min a b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">newtype</span> <span class=\"type\">Mod7</span> = <span class=\"type\">Mod7</span> <span class=\"type\">Integer</span> <span class=\"keyword\">deriving</span> (<span class=\"type\">Eq</span>, <span class=\"type\">Show</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">Mod7</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">     lit  x = <span class=\"type\">Mod7</span>(x `mod` <span class=\"number\">7</span>)</span><br><span class=\"line\">     add (<span class=\"type\">Mod7</span> a) (<span class=\"type\">Mod7</span> b) = <span class=\"type\">Mod7</span>((a + b) `mod` <span class=\"number\">7</span>)</span><br><span class=\"line\">     mul (<span class=\"type\">Mod7</span> a) (<span class=\"type\">Mod7</span> b) = <span class=\"type\">Mod7</span>((a*b) `mod` <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">testExp</span> :: <span class=\"type\">Expr</span> a =&gt; <span class=\"type\">Maybe</span> a</span><br><span class=\"line\"><span class=\"title\">testExp</span> = parseExp lit add mul <span class=\"string\">&quot;(3 * -4) + 5&quot;</span></span><br><span class=\"line\"><span class=\"title\">testInteger</span> = testExp :: <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">testBool</span> = testExp :: <span class=\"type\">Maybe</span> <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">testMM</span> = testExp :: <span class=\"type\">Maybe</span> <span class=\"type\">MinMax</span></span><br><span class=\"line\"><span class=\"title\">testSat</span> = testExp :: <span class=\"type\">Maybe</span> <span class=\"type\">Mod7</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- exercise 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">Program</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">    lit x = [<span class=\"type\">PushI</span> x]</span><br><span class=\"line\">    add a b = a ++ b ++ [<span class=\"type\">StackVM</span>.<span class=\"type\">Add</span>]</span><br><span class=\"line\">    mul a b = a ++ b ++ [<span class=\"type\">StackVM</span>.<span class=\"type\">Mul</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">compile</span>:: <span class=\"type\">String</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Program</span></span><br><span class=\"line\"><span class=\"title\">compile</span> str = parseExp lit add mul str :: <span class=\"type\">Maybe</span> <span class=\"type\">Program</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- exercise 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">HasVars</span> a <span class=\"keyword\">where</span></span></span><br><span class=\"line\">        var :: <span class=\"type\">String</span> -&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">VarExprT</span> = <span class=\"type\">Lit</span> <span class=\"type\">Integer</span></span></span><br><span class=\"line\">                | <span class=\"type\">Var</span> <span class=\"type\">String</span></span><br><span class=\"line\">                | <span class=\"type\">Add</span> <span class=\"type\">VarExprT</span> <span class=\"type\">VarExprT</span></span><br><span class=\"line\">                | <span class=\"type\">Mul</span> <span class=\"type\">VarExprT</span> <span class=\"type\">VarExprT</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">HasVars</span> (<span class=\"type\">M</span>.<span class=\"type\">Map</span> <span class=\"type\">String</span> <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span>) <span class=\"keyword\">where</span></span></span><br><span class=\"line\">        var = <span class=\"type\">M</span>.lookup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> (<span class=\"type\">M</span>.<span class=\"type\">Map</span> <span class=\"type\">String</span> <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span>) <span class=\"keyword\">where</span></span></span><br><span class=\"line\">        lit int0 _ = <span class=\"type\">Just</span> int0</span><br><span class=\"line\">        add var0 var1 map0 = <span class=\"keyword\">do</span> int0 &lt;- var0 map0</span><br><span class=\"line\">                                int1 &lt;- var1 map0</span><br><span class=\"line\">                                return (int0 + int1)</span><br><span class=\"line\">        mul var0 var1 map0 = <span class=\"keyword\">do</span> int0 &lt;- var0 map0</span><br><span class=\"line\">                                int1 &lt;- var1 map0</span><br><span class=\"line\">                                return (int0 * int1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">withVars</span> :: [(<span class=\"type\">String</span>, <span class=\"type\">Integer</span>)]</span><br><span class=\"line\">            -&gt; (<span class=\"type\">M</span>.<span class=\"type\">Map</span> <span class=\"type\">String</span> <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span>)</span><br><span class=\"line\">            -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">withVars</span> vs ex = ex $ <span class=\"type\">M</span>.fromList vs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">main</span> :: <span class=\"type\">IO</span> ()</span><br><span class=\"line\"><span class=\"title\">main</span> = <span class=\"keyword\">do</span></span><br><span class=\"line\">          print $ withVars [(<span class=\"string\">&quot;x&quot;</span>, <span class=\"number\">6</span>)] $ add (lit <span class=\"number\">3</span>) (var <span class=\"string\">&quot;x&quot;</span>)</span><br><span class=\"line\">          print $ withVars [(<span class=\"string\">&quot;x&quot;</span>, <span class=\"number\">6</span>)] $ add (lit <span class=\"number\">3</span>) (var <span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\">          print $ withVars  [(<span class=\"string\">&quot;x&quot;</span>, <span class=\"number\">6</span>), (<span class=\"string\">&quot;y&quot;</span>, <span class=\"number\">3</span>)] $ mul (var <span class=\"string\">&quot;x&quot;</span>) (add (var <span class=\"string\">&quot;y&quot;</span>) (var <span class=\"string\">&quot;x&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<p>homework of CIS194</p>\n<h2 id=\"hw1\"><a href=\"#hw1\" class=\"headerlink\" title=\"hw1\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/01-intro.pdf\">hw1</a></h2>","more":"<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Exercise 01</span></span><br><span class=\"line\"><span class=\"title\">toDigits</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">toDigits</span> x</span><br><span class=\"line\">   | x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; <span class=\"number\">10</span> = [x]</span><br><span class=\"line\">   | x &gt; <span class=\"number\">10</span> = toDigits (x `div` <span class=\"number\">10</span>) ++ [x `mod` <span class=\"number\">10</span>]</span><br><span class=\"line\">   | otherwise = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">toDigitsRev</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">toDigitsRev</span> x</span><br><span class=\"line\">   | x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; <span class=\"number\">10</span> = [x]</span><br><span class=\"line\">   | x &gt; <span class=\"number\">10</span> = (x `mod` <span class=\"number\">10</span>):toDigitsRev(x `div` <span class=\"number\">10</span>)</span><br><span class=\"line\">   | otherwise = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 02</span></span><br><span class=\"line\"><span class=\"title\">len</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">len</span> [] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">len</span> (_:y) = <span class=\"number\">1</span> + len(y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">doubleEveryOther</span> :: [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">doubleEveryOther</span> [] = []</span><br><span class=\"line\"><span class=\"title\">doubleEveryOther</span> (x:[])= [x]</span><br><span class=\"line\"><span class=\"title\">doubleEveryOther</span> (x:y:z)= <span class=\"keyword\">if</span>(len(z) `mod` <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">then</span> (x*<span class=\"number\">2</span> : y : doubleEveryOther(z)) <span class=\"keyword\">else</span> (x:y*<span class=\"number\">2</span>:doubleEveryOther(z))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3</span></span><br><span class=\"line\"><span class=\"title\">sumDigit</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">sumDigit</span> x</span><br><span class=\"line\">    | x &lt; <span class=\"number\">10</span>  = x</span><br><span class=\"line\">    | otherwise = (x `mod` <span class=\"number\">10</span>) + sumDigit (x `div` <span class=\"number\">10</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">sumDigits</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">sumDigits</span> [] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">sumDigits</span> (x:y) = sumDigit(x) + sumDigits(y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 4</span></span><br><span class=\"line\"><span class=\"title\">validate</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">validate</span> num</span><br><span class=\"line\">   | sumDigits(doubleEveryOther(toDigits(num))) `mod` <span class=\"number\">10</span> == <span class=\"number\">0</span> = <span class=\"type\">True</span></span><br><span class=\"line\">   | otherwise = <span class=\"type\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 5</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> <span class=\"type\">Peg</span> = <span class=\"type\">String</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">type</span> <span class=\"type\">Move</span> = (<span class=\"type\">Peg</span>, <span class=\"type\">Peg</span>)</span></span><br><span class=\"line\"><span class=\"title\">hanoi</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; [<span class=\"type\">Move</span>]</span><br><span class=\"line\"><span class=\"title\">hanoi</span> n a b c</span><br><span class=\"line\">     | n == <span class=\"number\">1</span> = [(a,b)]</span><br><span class=\"line\">     | otherwise = (hanoi (n<span class=\"number\">-1</span>) a c b) ++ [(a,b)] ++ (hanoi (n<span class=\"number\">-1</span>) c b a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">len2</span> :: [<span class=\"type\">Move</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">len2</span> [] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">len2</span> (_:y) = <span class=\"number\">1</span> + len2 y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">hanoi2</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; <span class=\"type\">Peg</span> -&gt; [<span class=\"type\">Move</span>]</span><br><span class=\"line\"><span class=\"title\">hanoi2</span> n a b c d</span><br><span class=\"line\">     | n == <span class=\"number\">1</span> = [(a,b)]</span><br><span class=\"line\">     | n == <span class=\"number\">2</span> = [(a,d),(a,b),(d,b)]</span><br><span class=\"line\">     | otherwise = (hanoi2 (n<span class=\"number\">-2</span>) a c b d) ++[(a,d),(a,b),(d,b)] ++ (hanoi2 (n<span class=\"number\">-2</span>) c b a d)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"hw2\"><a href=\"#hw2\" class=\"headerlink\" title=\"hw2\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/02-ADTs.pdf\">hw2</a></h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#123;-# OPTIONS_GHC -Wall #-&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> LogAnalysis <span class=\"keyword\">where</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">parseMessage</span> :: <span class=\"type\">String</span> -&gt; <span class=\"type\">LogMessage</span></span><br><span class=\"line\"><span class=\"title\">parseMessage</span> msg</span><br><span class=\"line\">      |msg!!<span class=\"number\">0</span> == &#x27;<span class=\"type\">I&#x27;</span> = <span class=\"type\">LogMessage</span> <span class=\"type\">Info</span> (read ((words msg)!!<span class=\"number\">1</span>)::<span class=\"type\">Int</span>)  (unwords(drop <span class=\"number\">2</span> (words msg)))</span><br><span class=\"line\">      |msg!!<span class=\"number\">0</span> == &#x27;<span class=\"type\">W&#x27;</span> = <span class=\"type\">LogMessage</span> <span class=\"type\">Warning</span> (read ((words msg)!!<span class=\"number\">1</span>)::<span class=\"type\">Int</span>)  (unwords(drop <span class=\"number\">2</span>(words msg)))</span><br><span class=\"line\">      |msg!!<span class=\"number\">0</span> == &#x27;<span class=\"type\">E&#x27;</span> = <span class=\"type\">LogMessage</span> (<span class=\"type\">Error</span> (read ((words msg)!!<span class=\"number\">1</span>)::<span class=\"type\">Int</span>)) (read ((words msg)!!<span class=\"number\">2</span>)::<span class=\"type\">Int</span>)  (unwords(drop <span class=\"number\">3</span> (words msg)))</span><br><span class=\"line\">      |otherwise = <span class=\"type\">Unknown</span> msg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">parse</span> :: <span class=\"type\">String</span> -&gt; [<span class=\"type\">LogMessage</span>]</span><br><span class=\"line\"><span class=\"title\">parse</span> msg</span><br><span class=\"line\">     |msg == <span class=\"string\">&quot;&quot;</span> = []</span><br><span class=\"line\">     |otherwise = [parseMessage ((lines msg)!!<span class=\"number\">0</span>)] ++ parse(unlines(tail(lines msg)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">insert</span> :: <span class=\"type\">LogMessage</span> -&gt; <span class=\"type\">MessageTree</span> -&gt; <span class=\"type\">MessageTree</span></span><br><span class=\"line\"><span class=\"title\">insert</span> (<span class=\"type\">Unknown</span> _) t = t</span><br><span class=\"line\"><span class=\"title\">insert</span> (<span class=\"type\">LogMessage</span> a b c) (<span class=\"type\">Node</span> x (<span class=\"type\">LogMessage</span> w y v) z) = <span class=\"keyword\">if</span> b &lt; y <span class=\"keyword\">then</span> <span class=\"type\">Node</span> (insert (<span class=\"type\">LogMessage</span> a b c) x) (<span class=\"type\">LogMessage</span> w y v) z</span><br><span class=\"line\">                                                              <span class=\"keyword\">else</span> <span class=\"type\">Node</span> x (<span class=\"type\">LogMessage</span> w y v) (insert (<span class=\"type\">LogMessage</span> a b c) z)</span><br><span class=\"line\"><span class=\"title\">insert</span> (<span class=\"type\">LogMessage</span> a b c) <span class=\"type\">Leaf</span> = <span class=\"type\">Node</span> <span class=\"type\">Leaf</span> (<span class=\"type\">LogMessage</span> a b c) <span class=\"type\">Leaf</span></span><br><span class=\"line\"><span class=\"title\">insert</span> (<span class=\"type\">LogMessage</span> a b c) _ = <span class=\"type\">Node</span> <span class=\"type\">Leaf</span> (<span class=\"type\">LogMessage</span> a b c) <span class=\"type\">Leaf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">build</span> :: [<span class=\"type\">LogMessage</span>] -&gt; <span class=\"type\">MessageTree</span></span><br><span class=\"line\"><span class=\"title\">build</span> [] = <span class=\"type\">Leaf</span></span><br><span class=\"line\"><span class=\"title\">build</span> (x:y) = insert x (build y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">inOrder</span> :: <span class=\"type\">MessageTree</span> -&gt; [<span class=\"type\">LogMessage</span>]</span><br><span class=\"line\"><span class=\"title\">inOrder</span> <span class=\"type\">Leaf</span> = []</span><br><span class=\"line\"><span class=\"title\">inOrder</span> (<span class=\"type\">Node</span> x y z) = inOrder x ++ [y] ++ inOrder z</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 5</span></span><br><span class=\"line\"><span class=\"title\">select</span> :: [<span class=\"type\">LogMessage</span>] -&gt; [<span class=\"type\">LogMessage</span>]</span><br><span class=\"line\"><span class=\"title\">select</span> [] = []</span><br><span class=\"line\"><span class=\"title\">select</span> ((<span class=\"type\">LogMessage</span> (<span class=\"type\">Error</span> x) y z) : w) = <span class=\"keyword\">if</span> x &gt; <span class=\"number\">50</span> <span class=\"keyword\">then</span> [(<span class=\"type\">LogMessage</span> (<span class=\"type\">Error</span> x) y z)] ++ (select w) <span class=\"keyword\">else</span> (select w)</span><br><span class=\"line\"><span class=\"title\">select</span> (_:y) = select y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">getMsg</span>::[<span class=\"type\">LogMessage</span>] -&gt; [<span class=\"type\">String</span>]</span><br><span class=\"line\"><span class=\"title\">getMsg</span> [] = []</span><br><span class=\"line\"><span class=\"title\">getMsg</span> ((<span class=\"type\">LogMessage</span> _ _ z):w) = [z] ++ (getMsg w)</span><br><span class=\"line\"><span class=\"title\">getMsg</span> _ = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">whatWentWrong</span> :: [<span class=\"type\">LogMessage</span>] -&gt; [<span class=\"type\">String</span>]</span><br><span class=\"line\"><span class=\"title\">whatWentWrong</span> msg = (getMsg (inOrder(build(select msg))))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"hw3\"><a href=\"#hw3\" class=\"headerlink\" title=\"hw3\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/03-rec-poly.pdf\">hw3</a></h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Exercise 1 Hopscotch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">sk</span>::<span class=\"type\">Int</span>-&gt;<span class=\"type\">Int</span> -&gt; [a] -&gt; [a]</span><br><span class=\"line\"><span class=\"title\">sk</span> n x ls</span><br><span class=\"line\">    | n + x &gt; length(ls) = [ls !! (x<span class=\"number\">-1</span>)]</span><br><span class=\"line\">    | otherwise = [ls !! (x<span class=\"number\">-1</span>)]  ++ (sk n (x+n) ls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">skip</span>::<span class=\"type\">Int</span>-&gt;[a] -&gt; [[a]]</span><br><span class=\"line\"><span class=\"title\">skip</span> n ls</span><br><span class=\"line\">     | n == length(ls) = [(sk n n ls)]</span><br><span class=\"line\">     | otherwise = [(sk n n ls)] ++ (skip (n+<span class=\"number\">1</span>) ls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">skips</span> :: [a] -&gt; [[a]]</span><br><span class=\"line\"><span class=\"title\">skips</span> [] = []</span><br><span class=\"line\"><span class=\"title\">skips</span> ls = (skip <span class=\"number\">1</span> ls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 2 Local maxima</span></span><br><span class=\"line\"><span class=\"title\">getMax</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">getMax</span> _ [] = []</span><br><span class=\"line\"><span class=\"title\">getMax</span> _ [x] = []</span><br><span class=\"line\"><span class=\"title\">getMax</span> a (x:y:z) =  <span class=\"keyword\">if</span> (x &gt; a  &amp;&amp;  x &gt; y) <span class=\"keyword\">then</span> [x] ++ (getMax x (y:z)) <span class=\"keyword\">else</span> (getMax x (y:z))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">localMaxima</span> :: [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">localMaxima</span> [] = []</span><br><span class=\"line\"><span class=\"title\">localMaxima</span> ls = getMax (ls !! <span class=\"number\">0</span>) ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3 Histogram</span></span><br><span class=\"line\"><span class=\"title\">count</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">count</span> <span class=\"number\">10</span> _ = []</span><br><span class=\"line\"><span class=\"title\">count</span> n ls = [(toInteger(length(filter ( == n) ls)))] ++ (count (n+<span class=\"number\">1</span>) ls)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">line</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"title\">line</span> [] = <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"><span class=\"title\">line</span> (x:y) = <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span> <span class=\"string\">&quot;*&quot;</span> ++ line(y) <span class=\"keyword\">else</span> <span class=\"string\">&quot; &quot;</span> ++ line(y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">sub</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">sub</span> x = x - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">toString</span>::[<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"title\">toString</span> ls</span><br><span class=\"line\">     |(length(filter (&gt; <span class=\"number\">0</span>) ls)) == <span class=\"number\">0</span> = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">     |otherwise = toString(map sub ls) ++ line(ls)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">histogram</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"title\">histogram</span> ls = (toString(count <span class=\"number\">0</span> ls) ++ <span class=\"string\">&quot;0123456789\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"hw4\"><a href=\"#hw4\" class=\"headerlink\" title=\"hw4\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/04-higher-order.pdf\">hw4</a></h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Exercise 1: Wholemeal programming</span></span><br><span class=\"line\"><span class=\"title\">fun1</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">fun1</span> [] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"title\">fun1</span> (x:xs)</span><br><span class=\"line\">    |even x = (x - <span class=\"number\">2</span>) * fun1 xs</span><br><span class=\"line\">    |otherwise = fun1 xs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">fun1&#x27;</span> :: [<span class=\"type\">Integer</span>]-&gt;<span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">fun1&#x27;</span> = product.map (\\x-&gt; x<span class=\"number\">-2</span>).filter even</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">fun2</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">fun2</span> <span class=\"number\">1</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">fun2</span> n | even n = n + fun2 (n `div` <span class=\"number\">2</span>)</span><br><span class=\"line\">       | otherwise = fun2 (<span class=\"number\">3</span> * n + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">fun2&#x27;</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">fun2&#x27;</span>  = sum.filter even.takeWhile (&gt;<span class=\"number\">1</span>).iterate(\\x -&gt; <span class=\"keyword\">if</span> even x <span class=\"keyword\">then</span> (x `div` <span class=\"number\">2</span>) <span class=\"keyword\">else</span> (<span class=\"number\">3</span>*x + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 2:Folding with trees</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Tree</span> a = <span class=\"type\">Leaf</span></span></span><br><span class=\"line\">            | <span class=\"type\">Node</span> <span class=\"type\">Integer</span> (<span class=\"type\">Tree</span> a) a (<span class=\"type\">Tree</span> a)</span><br><span class=\"line\">  <span class=\"keyword\">deriving</span> (<span class=\"type\">Show</span>, <span class=\"type\">Eq</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">foldTree</span> :: [a] -&gt; <span class=\"type\">Tree</span> a</span><br><span class=\"line\"><span class=\"title\">foldTree</span> = foldr insertNode <span class=\"type\">Leaf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">insertNode</span> :: a -&gt; <span class=\"type\">Tree</span> a -&gt; <span class=\"type\">Tree</span> a</span><br><span class=\"line\"><span class=\"title\">insertNode</span> x <span class=\"type\">Leaf</span> = <span class=\"type\">Node</span> <span class=\"number\">0</span> <span class=\"type\">Leaf</span> x <span class=\"type\">Leaf</span></span><br><span class=\"line\"><span class=\"title\">insertNode</span> x (<span class=\"type\">Node</span> h ln y rn)</span><br><span class=\"line\">  | treeHeight ln &lt; treeHeight rn =</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nn = insertNode x ln</span><br><span class=\"line\">    <span class=\"keyword\">in</span> <span class=\"type\">Node</span> (treeHeight nn + <span class=\"number\">1</span>) nn y rn</span><br><span class=\"line\">  | otherwise =</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nn = insertNode x rn</span><br><span class=\"line\">    <span class=\"keyword\">in</span> <span class=\"type\">Node</span> (treeHeight nn + <span class=\"number\">1</span>) ln y nn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">treeHeight</span> :: <span class=\"type\">Tree</span> a -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">treeHeight</span> <span class=\"type\">Leaf</span> = <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"title\">treeHeight</span> (<span class=\"type\">Node</span> h _ _ _) = h</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3: More folds!</span></span><br><span class=\"line\"><span class=\"title\">xor</span> :: [<span class=\"type\">Bool</span>] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">xor</span> = foldr (\\x y -&gt; <span class=\"keyword\">if</span> ((x == <span class=\"type\">True</span> &amp;&amp; y == <span class=\"type\">False</span>) || (x == <span class=\"type\">False</span> &amp;&amp; y == <span class=\"type\">True</span>)) <span class=\"keyword\">then</span> <span class=\"type\">True</span> <span class=\"keyword\">else</span> <span class=\"type\">False</span>) <span class=\"type\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">map&#x27;</span> :: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br><span class=\"line\"><span class=\"title\">map&#x27;</span> f = foldr (\\x y -&gt; [f(x)] ++ y) []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">myFoldl</span> :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br><span class=\"line\"><span class=\"title\">myFoldl</span> f base xs = foldr (flip f) base (reverse xs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 4:Finding primes</span></span><br><span class=\"line\"><span class=\"title\">cartProd</span> :: [a] -&gt; [b] -&gt; [(a, b)]</span><br><span class=\"line\"><span class=\"title\">cartProd</span> xs ys = [(x,y) | x &lt;- xs, y &lt;- ys]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">sieveSundaram</span> :: <span class=\"type\">Integer</span> -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">sieveSundaram</span> n = map (\\x -&gt; x*<span class=\"number\">2</span> + <span class=\"number\">1</span>) (filter (\\x -&gt; notElem x (map (\\(i,j) -&gt; <span class=\"number\">2</span>*i*j + i + j) (filter (\\(i,j)-&gt;<span class=\"number\">2</span>*i*j+i+j &lt;= n) (cartProd [<span class=\"number\">1.</span>.n] [<span class=\"number\">1.</span>.n]))))  [<span class=\"number\">1.</span>.n])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"hw5\"><a href=\"#hw5\" class=\"headerlink\" title=\"hw5\"></a><a href=\"https://www.seas.upenn.edu/~cis194/spring13/hw/05-type-classes.pdf\">hw5</a></h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#123;-# LANGUAGE FlexibleInstances #-&#125;</span></span><br><span class=\"line\"><span class=\"meta\">&#123;-# LANGUAGE TypeSynonymInstances #-&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ExprT</span><br><span class=\"line\"><span class=\"keyword\">import</span> Parser</span><br><span class=\"line\"><span class=\"keyword\">import</span> StackVM</span><br><span class=\"line\"><span class=\"keyword\">import</span> Data.Maybe</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">qualified</span> Data.Map <span class=\"keyword\">as</span> M</span><br><span class=\"line\"><span class=\"comment\">-- Exercise 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">eval</span> :: <span class=\"type\">ExprT</span>-&gt;<span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">eval</span> (<span class=\"type\">ExprT</span>.<span class=\"type\">Lit</span> x) = x</span><br><span class=\"line\"><span class=\"title\">eval</span> (<span class=\"type\">ExprT</span>.<span class=\"type\">Add</span> x y) = eval x + eval y</span><br><span class=\"line\"><span class=\"title\">eval</span> (<span class=\"type\">ExprT</span>.<span class=\"type\">Mul</span> x y) = eval x * eval y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 2</span></span><br><span class=\"line\"><span class=\"title\">evalStr</span> :: <span class=\"type\">String</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">evalStr</span> str</span><br><span class=\"line\">    |(parseExp <span class=\"type\">ExprT</span>.<span class=\"type\">Lit</span> <span class=\"type\">ExprT</span>.<span class=\"type\">Add</span> <span class=\"type\">ExprT</span>.<span class=\"type\">Mul</span> str == <span class=\"type\">Nothing</span>) = <span class=\"type\">Nothing</span></span><br><span class=\"line\">    |otherwise = <span class=\"type\">Just</span>(eval (fromJust(parseExp <span class=\"type\">ExprT</span>.<span class=\"type\">Lit</span> <span class=\"type\">ExprT</span>.<span class=\"type\">Add</span> <span class=\"type\">ExprT</span>.<span class=\"type\">Mul</span> str)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 3</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">Expr</span> a <span class=\"keyword\">where</span></span></span><br><span class=\"line\">   lit :: <span class=\"type\">Integer</span> -&gt; a</span><br><span class=\"line\">   add :: a -&gt; a -&gt; a</span><br><span class=\"line\">   mul :: a -&gt; a -&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">ExprT</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">   lit = <span class=\"type\">ExprT</span>.<span class=\"type\">Lit</span></span><br><span class=\"line\">   add = <span class=\"type\">ExprT</span>.<span class=\"type\">Add</span></span><br><span class=\"line\">   mul = <span class=\"type\">ExprT</span>.<span class=\"type\">Mul</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">reify</span> :: <span class=\"type\">ExprT</span> -&gt; <span class=\"type\">ExprT</span></span><br><span class=\"line\"><span class=\"title\">reify</span> = id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Exercise 4</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">Integer</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">    lit  a =  a</span><br><span class=\"line\">    add a b = a + b</span><br><span class=\"line\">    mul a b = a*b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">Bool</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">     lit a = (<span class=\"keyword\">if</span> a &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span> <span class=\"type\">True</span> <span class=\"keyword\">else</span> <span class=\"type\">False</span>)</span><br><span class=\"line\">     add a b = a || b</span><br><span class=\"line\">     mul a b = a &amp;&amp; b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">newtype</span> <span class=\"type\">MinMax</span> = <span class=\"type\">MinMax</span> <span class=\"type\">Integer</span> <span class=\"keyword\">deriving</span> (<span class=\"type\">Eq</span>, <span class=\"type\">Show</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">MinMax</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">      lit x = <span class=\"type\">MinMax</span> x</span><br><span class=\"line\">      add (<span class=\"type\">MinMax</span> a) (<span class=\"type\">MinMax</span> b) = <span class=\"type\">MinMax</span>(max a b)</span><br><span class=\"line\">      mul (<span class=\"type\">MinMax</span> a) (<span class=\"type\">MinMax</span> b) = <span class=\"type\">MinMax</span>(min a b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">newtype</span> <span class=\"type\">Mod7</span> = <span class=\"type\">Mod7</span> <span class=\"type\">Integer</span> <span class=\"keyword\">deriving</span> (<span class=\"type\">Eq</span>, <span class=\"type\">Show</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">Mod7</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">     lit  x = <span class=\"type\">Mod7</span>(x `mod` <span class=\"number\">7</span>)</span><br><span class=\"line\">     add (<span class=\"type\">Mod7</span> a) (<span class=\"type\">Mod7</span> b) = <span class=\"type\">Mod7</span>((a + b) `mod` <span class=\"number\">7</span>)</span><br><span class=\"line\">     mul (<span class=\"type\">Mod7</span> a) (<span class=\"type\">Mod7</span> b) = <span class=\"type\">Mod7</span>((a*b) `mod` <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">testExp</span> :: <span class=\"type\">Expr</span> a =&gt; <span class=\"type\">Maybe</span> a</span><br><span class=\"line\"><span class=\"title\">testExp</span> = parseExp lit add mul <span class=\"string\">&quot;(3 * -4) + 5&quot;</span></span><br><span class=\"line\"><span class=\"title\">testInteger</span> = testExp :: <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">testBool</span> = testExp :: <span class=\"type\">Maybe</span> <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">testMM</span> = testExp :: <span class=\"type\">Maybe</span> <span class=\"type\">MinMax</span></span><br><span class=\"line\"><span class=\"title\">testSat</span> = testExp :: <span class=\"type\">Maybe</span> <span class=\"type\">Mod7</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- exercise 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> <span class=\"type\">Program</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">    lit x = [<span class=\"type\">PushI</span> x]</span><br><span class=\"line\">    add a b = a ++ b ++ [<span class=\"type\">StackVM</span>.<span class=\"type\">Add</span>]</span><br><span class=\"line\">    mul a b = a ++ b ++ [<span class=\"type\">StackVM</span>.<span class=\"type\">Mul</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">compile</span>:: <span class=\"type\">String</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Program</span></span><br><span class=\"line\"><span class=\"title\">compile</span> str = parseExp lit add mul str :: <span class=\"type\">Maybe</span> <span class=\"type\">Program</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- exercise 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">HasVars</span> a <span class=\"keyword\">where</span></span></span><br><span class=\"line\">        var :: <span class=\"type\">String</span> -&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">VarExprT</span> = <span class=\"type\">Lit</span> <span class=\"type\">Integer</span></span></span><br><span class=\"line\">                | <span class=\"type\">Var</span> <span class=\"type\">String</span></span><br><span class=\"line\">                | <span class=\"type\">Add</span> <span class=\"type\">VarExprT</span> <span class=\"type\">VarExprT</span></span><br><span class=\"line\">                | <span class=\"type\">Mul</span> <span class=\"type\">VarExprT</span> <span class=\"type\">VarExprT</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">HasVars</span> (<span class=\"type\">M</span>.<span class=\"type\">Map</span> <span class=\"type\">String</span> <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span>) <span class=\"keyword\">where</span></span></span><br><span class=\"line\">        var = <span class=\"type\">M</span>.lookup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Expr</span> (<span class=\"type\">M</span>.<span class=\"type\">Map</span> <span class=\"type\">String</span> <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span>) <span class=\"keyword\">where</span></span></span><br><span class=\"line\">        lit int0 _ = <span class=\"type\">Just</span> int0</span><br><span class=\"line\">        add var0 var1 map0 = <span class=\"keyword\">do</span> int0 &lt;- var0 map0</span><br><span class=\"line\">                                int1 &lt;- var1 map0</span><br><span class=\"line\">                                return (int0 + int1)</span><br><span class=\"line\">        mul var0 var1 map0 = <span class=\"keyword\">do</span> int0 &lt;- var0 map0</span><br><span class=\"line\">                                int1 &lt;- var1 map0</span><br><span class=\"line\">                                return (int0 * int1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">withVars</span> :: [(<span class=\"type\">String</span>, <span class=\"type\">Integer</span>)]</span><br><span class=\"line\">            -&gt; (<span class=\"type\">M</span>.<span class=\"type\">Map</span> <span class=\"type\">String</span> <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span>)</span><br><span class=\"line\">            -&gt; <span class=\"type\">Maybe</span> <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">withVars</span> vs ex = ex $ <span class=\"type\">M</span>.fromList vs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">main</span> :: <span class=\"type\">IO</span> ()</span><br><span class=\"line\"><span class=\"title\">main</span> = <span class=\"keyword\">do</span></span><br><span class=\"line\">          print $ withVars [(<span class=\"string\">&quot;x&quot;</span>, <span class=\"number\">6</span>)] $ add (lit <span class=\"number\">3</span>) (var <span class=\"string\">&quot;x&quot;</span>)</span><br><span class=\"line\">          print $ withVars [(<span class=\"string\">&quot;x&quot;</span>, <span class=\"number\">6</span>)] $ add (lit <span class=\"number\">3</span>) (var <span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\">          print $ withVars  [(<span class=\"string\">&quot;x&quot;</span>, <span class=\"number\">6</span>), (<span class=\"string\">&quot;y&quot;</span>, <span class=\"number\">3</span>)] $ mul (var <span class=\"string\">&quot;x&quot;</span>) (add (var <span class=\"string\">&quot;y&quot;</span>) (var <span class=\"string\">&quot;x&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"JVM笔记","date":"2020-08-05T08:34:21.000Z","_content":"{% asset_img jvmdata.png %}\nJVM 是 Java 的核心和基础，在 Java 编译器和 os 平台之间的虚拟处理器。它是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。\n<!-- More -->\n\n## 内存区域\n\n### 程序计数器\n\n#### 特征\n\n1. 当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。\n2. 线程私有，各线程之间程序计数器互不影响，每个线程都有一个独立的程序计数器。\n3. 当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。\n4. 该内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。\n\n### Java 虚拟机栈\n\n#### 特征\n\n1. 线程私有的，它的生命周期也与线程相同。\n2. 虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。\n3. 对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。\n4. 栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。\n5. 在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。\n\n#### 异常\n\n如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。\n如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。\n在单线程的操作中,虚拟机抛出的都是 StackOverflowError 异常，在多线程环境下，则会抛出 OutOfMemoryError 异常。\n\n#### 局部变量表\n\n1. 一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配。\n2. 局部变量表的容量以变量槽（Slot）为最小单位。一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。double,long虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。\n虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量。\n3. 在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，从一开始，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。\n4. 局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，当前字节码PC计数器的值超过某个变量的作用域时，该变量对应的 Slot 就可以交给其他变量使用。节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。\n\n#### 操作数栈\n\n1. 操作数栈又称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位为 2。\n2. 当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）入栈和出栈。\n3. Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。\n\n基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；\n而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。\n\n#### 动态连接\n\n1. 每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。\n2. Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。\n3. 这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。\n\n#### 方法返回地址\n\n1. 方法退出：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。\n2. 在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。\n3. 方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。\n4. 方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。\n\n### 本地方法栈\n\n与虚拟机栈所发挥的作用类似，本地方法栈则为使用到的本地操作系统（Native）方法服务。\n\n### Java 堆\n\n1. Java Heap 是 Java 虚拟机所管理的内存中最大的一块，所有线程共享的一块内存区域。\n2. 对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。\n3. Java 堆可以处在物理不连续，逻辑连续的内存空间。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。\n\n### 方法区\n\n1. 所有线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等信息。方法区域被称为永久代。\n2. 不需要物理连续内存，可选择固定大小或可扩展，可以不实现垃圾回收，回收针对废弃常量、无用类。\n3. Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），运行时常量池用于存放编译器生成的各种字面量和符号引用。Java 语言并不要求常量一定只能在编译期产生，运行期间也可能将新的常量放入池中，如String 类的 intern（）方法。\n4. 方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。\n\n### 内存溢出\n1. 在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。\n操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。\n2. 内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，\n内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。\n\n### 引用定位方式\n\n#### 使用句柄池\n\n{% asset_img javastack.png %}\n\nreference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改.\n#### 直接使用指针\n\n{% asset_img javastack1.png %}\n\n速度快，它节省了一次指针定位的时间开销。\n\n## 类初始化\n\n类初始化是类加载过程的最后一个阶段，到初始化阶段，才真正开始执行类中的 Java 程序代码。\n\n### 执行类初始化情形\n\n1. 遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。\n生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时\n（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。\n2. 使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。\n3. 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\n4. 当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。\n\n虚拟机规定只有这四种情况才会触发类的初始化，称为对一个类进行主动引用，除此之外所有引用类的方式都不会触发其初始化，称为被动引用。\n\n通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：\n```\nclass Father{  \n    public static int m = 33;  \n    static{  \n        System.out.println(\"父类被初始化\");  \n    }  \n}  \n\nclass Child extends Father{  \n    static{  \n        System.out.println(\"子类被初始化\");  \n    }  \n}  \n\npublic class StaticTest{  \n    public static void main(String[] args){  \n        System.out.println(Child.m);  \n    }  \n}  \n\n/**\n父类被初始化\n    33\n*/\n```\n\n常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化：\n```\nclass Const{  \n    public static final String NAME = \"我是常量\";  \n    static{  \n        System.out.println(\"初始化Const类\");  \n    }  \n}  \n\npublic class FinalTest{  \n    public static void main(String[] args){  \n        System.out.println(Const.NAME);  \n    }  \n}  \n/**\n我是常量\n*/\n```\n通过数组定义来引用类，不会触发类的初始化：\n```\nclass Const{  \n    static{  \n        System.out.println(\"初始化Const类\");  \n    }  \n}  \n\npublic class ArrayTest{  \n    public static void main(String[] args){  \n        Const[] con = new Const[5];  \n    }  \n}  \n```\n段代码里触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初始化。\n\n### 接口的初始化过程与类初始化过程的不同\n\n接口也有初始化过程，上面的代码中我们都是用静态语句块来输出初始化信息的，而在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。\n\n当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。\n\n调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。","source":"_posts/jvm.md","raw":"---\ntitle: JVM笔记\ndate: 2020-08-05 16:34:21\ntags: jvm\n---\n{% asset_img jvmdata.png %}\nJVM 是 Java 的核心和基础，在 Java 编译器和 os 平台之间的虚拟处理器。它是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。\n<!-- More -->\n\n## 内存区域\n\n### 程序计数器\n\n#### 特征\n\n1. 当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。\n2. 线程私有，各线程之间程序计数器互不影响，每个线程都有一个独立的程序计数器。\n3. 当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。\n4. 该内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。\n\n### Java 虚拟机栈\n\n#### 特征\n\n1. 线程私有的，它的生命周期也与线程相同。\n2. 虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。\n3. 对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。\n4. 栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。\n5. 在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。\n\n#### 异常\n\n如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。\n如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。\n在单线程的操作中,虚拟机抛出的都是 StackOverflowError 异常，在多线程环境下，则会抛出 OutOfMemoryError 异常。\n\n#### 局部变量表\n\n1. 一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配。\n2. 局部变量表的容量以变量槽（Slot）为最小单位。一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。double,long虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。\n虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量。\n3. 在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，从一开始，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。\n4. 局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，当前字节码PC计数器的值超过某个变量的作用域时，该变量对应的 Slot 就可以交给其他变量使用。节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。\n\n#### 操作数栈\n\n1. 操作数栈又称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位为 2。\n2. 当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）入栈和出栈。\n3. Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。\n\n基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；\n而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。\n\n#### 动态连接\n\n1. 每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。\n2. Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。\n3. 这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。\n\n#### 方法返回地址\n\n1. 方法退出：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。\n2. 在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。\n3. 方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。\n4. 方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。\n\n### 本地方法栈\n\n与虚拟机栈所发挥的作用类似，本地方法栈则为使用到的本地操作系统（Native）方法服务。\n\n### Java 堆\n\n1. Java Heap 是 Java 虚拟机所管理的内存中最大的一块，所有线程共享的一块内存区域。\n2. 对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。\n3. Java 堆可以处在物理不连续，逻辑连续的内存空间。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。\n\n### 方法区\n\n1. 所有线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等信息。方法区域被称为永久代。\n2. 不需要物理连续内存，可选择固定大小或可扩展，可以不实现垃圾回收，回收针对废弃常量、无用类。\n3. Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），运行时常量池用于存放编译器生成的各种字面量和符号引用。Java 语言并不要求常量一定只能在编译期产生，运行期间也可能将新的常量放入池中，如String 类的 intern（）方法。\n4. 方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。\n\n### 内存溢出\n1. 在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。\n操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。\n2. 内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，\n内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。\n\n### 引用定位方式\n\n#### 使用句柄池\n\n{% asset_img javastack.png %}\n\nreference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改.\n#### 直接使用指针\n\n{% asset_img javastack1.png %}\n\n速度快，它节省了一次指针定位的时间开销。\n\n## 类初始化\n\n类初始化是类加载过程的最后一个阶段，到初始化阶段，才真正开始执行类中的 Java 程序代码。\n\n### 执行类初始化情形\n\n1. 遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。\n生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时\n（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。\n2. 使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。\n3. 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\n4. 当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。\n\n虚拟机规定只有这四种情况才会触发类的初始化，称为对一个类进行主动引用，除此之外所有引用类的方式都不会触发其初始化，称为被动引用。\n\n通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：\n```\nclass Father{  \n    public static int m = 33;  \n    static{  \n        System.out.println(\"父类被初始化\");  \n    }  \n}  \n\nclass Child extends Father{  \n    static{  \n        System.out.println(\"子类被初始化\");  \n    }  \n}  \n\npublic class StaticTest{  \n    public static void main(String[] args){  \n        System.out.println(Child.m);  \n    }  \n}  \n\n/**\n父类被初始化\n    33\n*/\n```\n\n常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化：\n```\nclass Const{  \n    public static final String NAME = \"我是常量\";  \n    static{  \n        System.out.println(\"初始化Const类\");  \n    }  \n}  \n\npublic class FinalTest{  \n    public static void main(String[] args){  \n        System.out.println(Const.NAME);  \n    }  \n}  \n/**\n我是常量\n*/\n```\n通过数组定义来引用类，不会触发类的初始化：\n```\nclass Const{  \n    static{  \n        System.out.println(\"初始化Const类\");  \n    }  \n}  \n\npublic class ArrayTest{  \n    public static void main(String[] args){  \n        Const[] con = new Const[5];  \n    }  \n}  \n```\n段代码里触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初始化。\n\n### 接口的初始化过程与类初始化过程的不同\n\n接口也有初始化过程，上面的代码中我们都是用静态语句块来输出初始化信息的，而在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。\n\n当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。\n\n调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。","slug":"jvm","published":1,"updated":"2020-08-06T06:48:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdm000erouj6floaqsc","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><img src=\"/2020/08/05/jvm/jvmdata.png\" class=\"\">\n<p>JVM 是 Java 的核心和基础，在 Java 编译器和 os 平台之间的虚拟处理器。它是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。<br><a id=\"more\"></a></p>\n<h2 id=\"内存区域\"><a href=\"#内存区域\" class=\"headerlink\" title=\"内存区域\"></a>内存区域</h2><h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><h4 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h4><ol>\n<li>当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。</li>\n<li>线程私有，各线程之间程序计数器互不影响，每个线程都有一个独立的程序计数器。</li>\n<li>当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。</li>\n<li>该内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。</li>\n</ol>\n<h3 id=\"Java-虚拟机栈\"><a href=\"#Java-虚拟机栈\" class=\"headerlink\" title=\"Java 虚拟机栈\"></a>Java 虚拟机栈</h3><h4 id=\"特征-1\"><a href=\"#特征-1\" class=\"headerlink\" title=\"特征\"></a>特征</h4><ol>\n<li>线程私有的，它的生命周期也与线程相同。</li>\n<li>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。</li>\n<li>对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。</li>\n<li>栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。</li>\n<li>在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。</li>\n</ol>\n<h4 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h4><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。<br>如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。<br>在单线程的操作中,虚拟机抛出的都是 StackOverflowError 异常，在多线程环境下，则会抛出 OutOfMemoryError 异常。</p>\n<h4 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h4><ol>\n<li>一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配。</li>\n<li>局部变量表的容量以变量槽（Slot）为最小单位。一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。double,long虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。<br>虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量。</li>\n<li>在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，从一开始，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。</li>\n<li>局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，当前字节码PC计数器的值超过某个变量的作用域时，该变量对应的 Slot 就可以交给其他变量使用。节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。</li>\n</ol>\n<h4 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h4><ol>\n<li>操作数栈又称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位为 2。</li>\n<li>当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）入栈和出栈。</li>\n<li>Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。</li>\n</ol>\n<p>基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；<br>而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。</p>\n<h4 id=\"动态连接\"><a href=\"#动态连接\" class=\"headerlink\" title=\"动态连接\"></a>动态连接</h4><ol>\n<li>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。</li>\n<li>Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。</li>\n<li>这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。</li>\n</ol>\n<h4 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h4><ol>\n<li>方法退出：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。</li>\n<li>在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。</li>\n<li>方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</li>\n<li>方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。</li>\n</ol>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>与虚拟机栈所发挥的作用类似，本地方法栈则为使用到的本地操作系统（Native）方法服务。</p>\n<h3 id=\"Java-堆\"><a href=\"#Java-堆\" class=\"headerlink\" title=\"Java 堆\"></a>Java 堆</h3><ol>\n<li>Java Heap 是 Java 虚拟机所管理的内存中最大的一块，所有线程共享的一块内存区域。</li>\n<li>对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。</li>\n<li>Java 堆可以处在物理不连续，逻辑连续的内存空间。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。</li>\n</ol>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ol>\n<li>所有线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等信息。方法区域被称为永久代。</li>\n<li>不需要物理连续内存，可选择固定大小或可扩展，可以不实现垃圾回收，回收针对废弃常量、无用类。</li>\n<li>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），运行时常量池用于存放编译器生成的各种字面量和符号引用。Java 语言并不要求常量一定只能在编译期产生，运行期间也可能将新的常量放入池中，如String 类的 intern（）方法。</li>\n<li>方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</li>\n</ol>\n<h3 id=\"内存溢出\"><a href=\"#内存溢出\" class=\"headerlink\" title=\"内存溢出\"></a>内存溢出</h3><ol>\n<li>在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。<br>操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。</li>\n<li>内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，<br>内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。</li>\n</ol>\n<h3 id=\"引用定位方式\"><a href=\"#引用定位方式\" class=\"headerlink\" title=\"引用定位方式\"></a>引用定位方式</h3><h4 id=\"使用句柄池\"><a href=\"#使用句柄池\" class=\"headerlink\" title=\"使用句柄池\"></a>使用句柄池</h4><img src=\"/2020/08/05/jvm/javastack.png\" class=\"\">\n<p>reference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改.</p>\n<h4 id=\"直接使用指针\"><a href=\"#直接使用指针\" class=\"headerlink\" title=\"直接使用指针\"></a>直接使用指针</h4><img src=\"/2020/08/05/jvm/javastack1.png\" class=\"\">\n<p>速度快，它节省了一次指针定位的时间开销。</p>\n<h2 id=\"类初始化\"><a href=\"#类初始化\" class=\"headerlink\" title=\"类初始化\"></a>类初始化</h2><p>类初始化是类加载过程的最后一个阶段，到初始化阶段，才真正开始执行类中的 Java 程序代码。</p>\n<h3 id=\"执行类初始化情形\"><a href=\"#执行类初始化情形\" class=\"headerlink\" title=\"执行类初始化情形\"></a>执行类初始化情形</h3><ol>\n<li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。<br>生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时<br>（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。</li>\n<li>使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。</li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。</li>\n</ol>\n<p>虚拟机规定只有这四种情况才会触发类的初始化，称为对一个类进行主动引用，除此之外所有引用类的方式都不会触发其初始化，称为被动引用。</p>\n<p>通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m = <span class=\"number\">33</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">&quot;父类被初始化&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"title\">extends</span> <span class=\"title\">Father</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">&quot;子类被初始化&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticTest</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">String</span>[] args)</span></span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(Child.m);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">父类被初始化</span></span><br><span class=\"line\"><span class=\"comment\">    33</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Const</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> NAME = <span class=\"string\">&quot;我是常量&quot;</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">&quot;初始化Const类&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalTest</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">String</span>[] args)</span></span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(Const.NAME);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">我是常量</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>通过数组定义来引用类，不会触发类的初始化：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Const</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">&quot;初始化Const类&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTest</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">String</span>[] args)</span></span>&#123;  </span><br><span class=\"line\">        Const[] con = <span class=\"keyword\">new</span> Const[<span class=\"number\">5</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>段代码里触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初始化。</p>\n<h3 id=\"接口的初始化过程与类初始化过程的不同\"><a href=\"#接口的初始化过程与类初始化过程的不同\" class=\"headerlink\" title=\"接口的初始化过程与类初始化过程的不同\"></a>接口的初始化过程与类初始化过程的不同</h3><p>接口也有初始化过程，上面的代码中我们都是用静态语句块来输出初始化信息的，而在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。</p>\n<p>当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。</p>\n<p>调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<img src=\"/2020/08/05/jvm/jvmdata.png\" class=\"\">\n<p>JVM 是 Java 的核心和基础，在 Java 编译器和 os 平台之间的虚拟处理器。它是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。<br>","more":"</p>\n<h2 id=\"内存区域\"><a href=\"#内存区域\" class=\"headerlink\" title=\"内存区域\"></a>内存区域</h2><h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><h4 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h4><ol>\n<li>当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。</li>\n<li>线程私有，各线程之间程序计数器互不影响，每个线程都有一个独立的程序计数器。</li>\n<li>当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。</li>\n<li>该内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。</li>\n</ol>\n<h3 id=\"Java-虚拟机栈\"><a href=\"#Java-虚拟机栈\" class=\"headerlink\" title=\"Java 虚拟机栈\"></a>Java 虚拟机栈</h3><h4 id=\"特征-1\"><a href=\"#特征-1\" class=\"headerlink\" title=\"特征\"></a>特征</h4><ol>\n<li>线程私有的，它的生命周期也与线程相同。</li>\n<li>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。</li>\n<li>对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。</li>\n<li>栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。</li>\n<li>在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。</li>\n</ol>\n<h4 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h4><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。<br>如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。<br>在单线程的操作中,虚拟机抛出的都是 StackOverflowError 异常，在多线程环境下，则会抛出 OutOfMemoryError 异常。</p>\n<h4 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h4><ol>\n<li>一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配。</li>\n<li>局部变量表的容量以变量槽（Slot）为最小单位。一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。double,long虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。<br>虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量。</li>\n<li>在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，从一开始，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。</li>\n<li>局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，当前字节码PC计数器的值超过某个变量的作用域时，该变量对应的 Slot 就可以交给其他变量使用。节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。</li>\n</ol>\n<h4 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h4><ol>\n<li>操作数栈又称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位为 2。</li>\n<li>当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）入栈和出栈。</li>\n<li>Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。</li>\n</ol>\n<p>基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；<br>而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。</p>\n<h4 id=\"动态连接\"><a href=\"#动态连接\" class=\"headerlink\" title=\"动态连接\"></a>动态连接</h4><ol>\n<li>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。</li>\n<li>Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。</li>\n<li>这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。</li>\n</ol>\n<h4 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h4><ol>\n<li>方法退出：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。</li>\n<li>在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。</li>\n<li>方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</li>\n<li>方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。</li>\n</ol>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>与虚拟机栈所发挥的作用类似，本地方法栈则为使用到的本地操作系统（Native）方法服务。</p>\n<h3 id=\"Java-堆\"><a href=\"#Java-堆\" class=\"headerlink\" title=\"Java 堆\"></a>Java 堆</h3><ol>\n<li>Java Heap 是 Java 虚拟机所管理的内存中最大的一块，所有线程共享的一块内存区域。</li>\n<li>对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。</li>\n<li>Java 堆可以处在物理不连续，逻辑连续的内存空间。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。</li>\n</ol>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ol>\n<li>所有线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等信息。方法区域被称为永久代。</li>\n<li>不需要物理连续内存，可选择固定大小或可扩展，可以不实现垃圾回收，回收针对废弃常量、无用类。</li>\n<li>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），运行时常量池用于存放编译器生成的各种字面量和符号引用。Java 语言并不要求常量一定只能在编译期产生，运行期间也可能将新的常量放入池中，如String 类的 intern（）方法。</li>\n<li>方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</li>\n</ol>\n<h3 id=\"内存溢出\"><a href=\"#内存溢出\" class=\"headerlink\" title=\"内存溢出\"></a>内存溢出</h3><ol>\n<li>在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。<br>操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。</li>\n<li>内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，<br>内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。</li>\n</ol>\n<h3 id=\"引用定位方式\"><a href=\"#引用定位方式\" class=\"headerlink\" title=\"引用定位方式\"></a>引用定位方式</h3><h4 id=\"使用句柄池\"><a href=\"#使用句柄池\" class=\"headerlink\" title=\"使用句柄池\"></a>使用句柄池</h4><img src=\"/2020/08/05/jvm/javastack.png\" class=\"\">\n<p>reference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改.</p>\n<h4 id=\"直接使用指针\"><a href=\"#直接使用指针\" class=\"headerlink\" title=\"直接使用指针\"></a>直接使用指针</h4><img src=\"/2020/08/05/jvm/javastack1.png\" class=\"\">\n<p>速度快，它节省了一次指针定位的时间开销。</p>\n<h2 id=\"类初始化\"><a href=\"#类初始化\" class=\"headerlink\" title=\"类初始化\"></a>类初始化</h2><p>类初始化是类加载过程的最后一个阶段，到初始化阶段，才真正开始执行类中的 Java 程序代码。</p>\n<h3 id=\"执行类初始化情形\"><a href=\"#执行类初始化情形\" class=\"headerlink\" title=\"执行类初始化情形\"></a>执行类初始化情形</h3><ol>\n<li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。<br>生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时<br>（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。</li>\n<li>使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。</li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。</li>\n</ol>\n<p>虚拟机规定只有这四种情况才会触发类的初始化，称为对一个类进行主动引用，除此之外所有引用类的方式都不会触发其初始化，称为被动引用。</p>\n<p>通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m = <span class=\"number\">33</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">&quot;父类被初始化&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"title\">extends</span> <span class=\"title\">Father</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">&quot;子类被初始化&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticTest</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">String</span>[] args)</span></span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(Child.m);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">父类被初始化</span></span><br><span class=\"line\"><span class=\"comment\">    33</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Const</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> NAME = <span class=\"string\">&quot;我是常量&quot;</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">&quot;初始化Const类&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalTest</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">String</span>[] args)</span></span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(Const.NAME);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">我是常量</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><br>通过数组定义来引用类，不会触发类的初始化：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Const</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;  </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(<span class=\"string\">&quot;初始化Const类&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTest</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">String</span>[] args)</span></span>&#123;  </span><br><span class=\"line\">        Const[] con = <span class=\"keyword\">new</span> Const[<span class=\"number\">5</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure><br>段代码里触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初始化。</p>\n<h3 id=\"接口的初始化过程与类初始化过程的不同\"><a href=\"#接口的初始化过程与类初始化过程的不同\" class=\"headerlink\" title=\"接口的初始化过程与类初始化过程的不同\"></a>接口的初始化过程与类初始化过程的不同</h3><p>接口也有初始化过程，上面的代码中我们都是用静态语句块来输出初始化信息的，而在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。</p>\n<p>当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。</p>\n<p>调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。</p>"},{"title":"关于Ubuntu","date":"2020-08-11T01:56:05.000Z","_content":"关于Ubuntu使用的一些备忘。\n\n<!-- More -->\n\n## VM虚拟机与win10主机互相复制粘贴文件\n```\nsudo apt install open-vm-tools\nsudo apt install open-vm-tools-desktop\n```\n\n## SSR\n\nlinux [ssr](https://github.com/qingshuisiyuan/electron-ssr-backup)\n\n## 文件压缩\n\n压缩\n```\nzip -r graphs.zip graphs\nzip -r 123.zip abc.cpp def.txt\n```\n\n解压\n```\nunzip graphs.zip\n```\n\ntar命令\n\n压缩\n```\ntar -cvf 123.tar file1 file2 dir1\n```\n解压\n\n```\ntar -xvf file.tar\ntar -zxvf apache-tomcat-7.0.75.tar.gz \n```\n\n## WSL 报错cannot execute binary file: Exec format\n\nBash On Windows(WSL)无法运行32Bit程序，报错cannot execute binary file: Exec format\n\n```\nsudo apt install qemu-user-static\nsudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic '\\x7fELF\\x01\\x01\\x01\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x03\\x00\\x01\\x00\\x00\\x00' --mask '\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\xff\\xff\\xff\\xff\\xff\\xff\\xff'\n```\n\n# WSL\n\n子系统可以直接访问windows下的任何文件，这也是比虚拟机好用的关键点之一。在 /mnt 目录下就可以访问c、d、e、f等盘符，并且可以直接访问任何一个文件位置。\n\n因为windows的盘符挂载到linux中的时候全部都用了 777 的权限，在一些软件开发上可能会出现一些问题。\n\n* 使用wsl的自动挂载功能，修改 /etc/wsl.conf 文件\n```C\n[automount]\nenabled = true\nroot = /mnt/\noptions = \"metadata,dmask=022,fmask=133\"\nmountFsTab = false\n```\n就可以将/mnt下的所有盘都挂载为linux下默认的权限。\n* windows wsl创建文件权限\n\n挂载问题是解决了,但是使用wsl命令打开的终端创建新的文件还是 777。\n\n在/etc/profile或~/.profile或~/.bashrc最后添加一些逻辑。\n```C\nif [[ \"$(umask)\" == '000' ]]; then\n    umask 022\nfi\n```\n这样在每次启动终端的时候就会重新设置umask, 之后创建文件就正常了。","source":"_posts/关于Ubuntu.md","raw":"---\ntitle: 关于Ubuntu\ndate: 2020-08-11 09:56:05\ntags: ubuntu\n---\n关于Ubuntu使用的一些备忘。\n\n<!-- More -->\n\n## VM虚拟机与win10主机互相复制粘贴文件\n```\nsudo apt install open-vm-tools\nsudo apt install open-vm-tools-desktop\n```\n\n## SSR\n\nlinux [ssr](https://github.com/qingshuisiyuan/electron-ssr-backup)\n\n## 文件压缩\n\n压缩\n```\nzip -r graphs.zip graphs\nzip -r 123.zip abc.cpp def.txt\n```\n\n解压\n```\nunzip graphs.zip\n```\n\ntar命令\n\n压缩\n```\ntar -cvf 123.tar file1 file2 dir1\n```\n解压\n\n```\ntar -xvf file.tar\ntar -zxvf apache-tomcat-7.0.75.tar.gz \n```\n\n## WSL 报错cannot execute binary file: Exec format\n\nBash On Windows(WSL)无法运行32Bit程序，报错cannot execute binary file: Exec format\n\n```\nsudo apt install qemu-user-static\nsudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic '\\x7fELF\\x01\\x01\\x01\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x03\\x00\\x01\\x00\\x00\\x00' --mask '\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\xff\\xff\\xff\\xff\\xff\\xff\\xff'\n```\n\n# WSL\n\n子系统可以直接访问windows下的任何文件，这也是比虚拟机好用的关键点之一。在 /mnt 目录下就可以访问c、d、e、f等盘符，并且可以直接访问任何一个文件位置。\n\n因为windows的盘符挂载到linux中的时候全部都用了 777 的权限，在一些软件开发上可能会出现一些问题。\n\n* 使用wsl的自动挂载功能，修改 /etc/wsl.conf 文件\n```C\n[automount]\nenabled = true\nroot = /mnt/\noptions = \"metadata,dmask=022,fmask=133\"\nmountFsTab = false\n```\n就可以将/mnt下的所有盘都挂载为linux下默认的权限。\n* windows wsl创建文件权限\n\n挂载问题是解决了,但是使用wsl命令打开的终端创建新的文件还是 777。\n\n在/etc/profile或~/.profile或~/.bashrc最后添加一些逻辑。\n```C\nif [[ \"$(umask)\" == '000' ]]; then\n    umask 022\nfi\n```\n这样在每次启动终端的时候就会重新设置umask, 之后创建文件就正常了。","slug":"关于Ubuntu","published":1,"updated":"2020-09-05T15:09:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdm000froujgukp148d","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>关于Ubuntu使用的一些备忘。</p>\n<a id=\"more\"></a>\n<h2 id=\"VM虚拟机与win10主机互相复制粘贴文件\"><a href=\"#VM虚拟机与win10主机互相复制粘贴文件\" class=\"headerlink\" title=\"VM虚拟机与win10主机互相复制粘贴文件\"></a>VM虚拟机与win10主机互相复制粘贴文件</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt <span class=\"keyword\">install</span> <span class=\"keyword\">open</span>-vm-tools</span><br><span class=\"line\">sudo apt <span class=\"keyword\">install</span> <span class=\"keyword\">open</span>-vm-tools-desktop</span><br></pre></td></tr></table></figure>\n<h2 id=\"SSR\"><a href=\"#SSR\" class=\"headerlink\" title=\"SSR\"></a>SSR</h2><p>linux <a href=\"https://github.com/qingshuisiyuan/electron-ssr-backup\">ssr</a></p>\n<h2 id=\"文件压缩\"><a href=\"#文件压缩\" class=\"headerlink\" title=\"文件压缩\"></a>文件压缩</h2><p>压缩<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">zip</span> -r graphs.<span class=\"built_in\">zip</span> graphs</span><br><span class=\"line\"><span class=\"built_in\">zip</span> -r <span class=\"number\">123.</span><span class=\"built_in\">zip</span> abc.cpp <span class=\"keyword\">def</span>.txt</span><br></pre></td></tr></table></figure><br>解压<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">unzip</span> <span class=\"selector-tag\">graphs</span><span class=\"selector-class\">.zip</span></span><br></pre></td></tr></table></figure><br>tar命令</p>\n<p>压缩<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> -cvf <span class=\"number\">123</span>.tar file<span class=\"number\">1</span> file<span class=\"number\">2</span> dir<span class=\"number\">1</span></span><br></pre></td></tr></table></figure><br>解压</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> -xvf file.tar</span><br><span class=\"line\"><span class=\"attribute\">tar</span> -zxvf apache-tomcat-<span class=\"number\">7</span>.<span class=\"number\">0</span>.<span class=\"number\">75</span>.tar.gz </span><br></pre></td></tr></table></figure>\n<h2 id=\"WSL-报错cannot-execute-binary-file-Exec-format\"><a href=\"#WSL-报错cannot-execute-binary-file-Exec-format\" class=\"headerlink\" title=\"WSL 报错cannot execute binary file: Exec format\"></a>WSL 报错cannot execute binary file: Exec format</h2><p>Bash On Windows(WSL)无法运行32Bit程序，报错cannot execute binary file: Exec format</p>\n<figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install qemu-user-static</span><br><span class=\"line\">sudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic &#x27;<span class=\"symbol\">\\x</span>7fELF<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00&#x27; --mask &#x27;<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>fc<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>f8<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"WSL\"><a href=\"#WSL\" class=\"headerlink\" title=\"WSL\"></a>WSL</h1><p>子系统可以直接访问windows下的任何文件，这也是比虚拟机好用的关键点之一。在 /mnt 目录下就可以访问c、d、e、f等盘符，并且可以直接访问任何一个文件位置。</p>\n<p>因为windows的盘符挂载到linux中的时候全部都用了 777 的权限，在一些软件开发上可能会出现一些问题。</p>\n<ul>\n<li>使用wsl的自动挂载功能，修改 /etc/wsl.conf 文件<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[automount]</span><br><span class=\"line\">enabled = <span class=\"literal\">true</span></span><br><span class=\"line\">root = /mnt/</span><br><span class=\"line\">options = <span class=\"string\">&quot;metadata,dmask=022,fmask=133&quot;</span></span><br><span class=\"line\">mountFsTab = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n就可以将/mnt下的所有盘都挂载为linux下默认的权限。</li>\n<li>windows wsl创建文件权限</li>\n</ul>\n<p>挂载问题是解决了,但是使用wsl命令打开的终端创建新的文件还是 777。</p>\n<p>在/etc/profile或~/.profile或~/.bashrc最后添加一些逻辑。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [[ &quot;$(umask)&quot; == &#x27;000&#x27; ]]; then</span><br><span class=\"line\">    umask <span class=\"number\">022</span></span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure><br>这样在每次启动终端的时候就会重新设置umask, 之后创建文件就正常了。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<p>关于Ubuntu使用的一些备忘。</p>","more":"<h2 id=\"VM虚拟机与win10主机互相复制粘贴文件\"><a href=\"#VM虚拟机与win10主机互相复制粘贴文件\" class=\"headerlink\" title=\"VM虚拟机与win10主机互相复制粘贴文件\"></a>VM虚拟机与win10主机互相复制粘贴文件</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt <span class=\"keyword\">install</span> <span class=\"keyword\">open</span>-vm-tools</span><br><span class=\"line\">sudo apt <span class=\"keyword\">install</span> <span class=\"keyword\">open</span>-vm-tools-desktop</span><br></pre></td></tr></table></figure>\n<h2 id=\"SSR\"><a href=\"#SSR\" class=\"headerlink\" title=\"SSR\"></a>SSR</h2><p>linux <a href=\"https://github.com/qingshuisiyuan/electron-ssr-backup\">ssr</a></p>\n<h2 id=\"文件压缩\"><a href=\"#文件压缩\" class=\"headerlink\" title=\"文件压缩\"></a>文件压缩</h2><p>压缩<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">zip</span> -r graphs.<span class=\"built_in\">zip</span> graphs</span><br><span class=\"line\"><span class=\"built_in\">zip</span> -r <span class=\"number\">123.</span><span class=\"built_in\">zip</span> abc.cpp <span class=\"keyword\">def</span>.txt</span><br></pre></td></tr></table></figure><br>解压<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">unzip</span> <span class=\"selector-tag\">graphs</span><span class=\"selector-class\">.zip</span></span><br></pre></td></tr></table></figure><br>tar命令</p>\n<p>压缩<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> -cvf <span class=\"number\">123</span>.tar file<span class=\"number\">1</span> file<span class=\"number\">2</span> dir<span class=\"number\">1</span></span><br></pre></td></tr></table></figure><br>解压</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> -xvf file.tar</span><br><span class=\"line\"><span class=\"attribute\">tar</span> -zxvf apache-tomcat-<span class=\"number\">7</span>.<span class=\"number\">0</span>.<span class=\"number\">75</span>.tar.gz </span><br></pre></td></tr></table></figure>\n<h2 id=\"WSL-报错cannot-execute-binary-file-Exec-format\"><a href=\"#WSL-报错cannot-execute-binary-file-Exec-format\" class=\"headerlink\" title=\"WSL 报错cannot execute binary file: Exec format\"></a>WSL 报错cannot execute binary file: Exec format</h2><p>Bash On Windows(WSL)无法运行32Bit程序，报错cannot execute binary file: Exec format</p>\n<figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install qemu-user-static</span><br><span class=\"line\">sudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic &#x27;<span class=\"symbol\">\\x</span>7fELF<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00<span class=\"symbol\">\\x</span>00&#x27; --mask &#x27;<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>fc<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>f8<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"WSL\"><a href=\"#WSL\" class=\"headerlink\" title=\"WSL\"></a>WSL</h1><p>子系统可以直接访问windows下的任何文件，这也是比虚拟机好用的关键点之一。在 /mnt 目录下就可以访问c、d、e、f等盘符，并且可以直接访问任何一个文件位置。</p>\n<p>因为windows的盘符挂载到linux中的时候全部都用了 777 的权限，在一些软件开发上可能会出现一些问题。</p>\n<ul>\n<li>使用wsl的自动挂载功能，修改 /etc/wsl.conf 文件<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[automount]</span><br><span class=\"line\">enabled = <span class=\"literal\">true</span></span><br><span class=\"line\">root = /mnt/</span><br><span class=\"line\">options = <span class=\"string\">&quot;metadata,dmask=022,fmask=133&quot;</span></span><br><span class=\"line\">mountFsTab = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n就可以将/mnt下的所有盘都挂载为linux下默认的权限。</li>\n<li>windows wsl创建文件权限</li>\n</ul>\n<p>挂载问题是解决了,但是使用wsl命令打开的终端创建新的文件还是 777。</p>\n<p>在/etc/profile或~/.profile或~/.bashrc最后添加一些逻辑。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [[ &quot;$(umask)&quot; == &#x27;000&#x27; ]]; then</span><br><span class=\"line\">    umask <span class=\"number\">022</span></span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure><br>这样在每次启动终端的时候就会重新设置umask, 之后创建文件就正常了。</p>"},{"title":"决策树&&随机森林","date":"2020-12-19T05:05:39.000Z","_content":"机器学习小作业。\n\n本文实现了决策树和随机森林算法。\n\n简单的、仅针对二分类问题实现。\n<!-- More -->\n## C4.5决策树\nC++实现\n```C++\n#include<iostream>\n#include<vector>\n#include<string>\n#include<fstream>\n#include<cstdlib>\n#include<algorithm>\n#include<map>\n#include<cmath>\n#include<set>\nstd::vector<std::vector<int> > train;\n//std::vector<int> train_Y;\nstd::vector<std::vector<int> > test_X;\n\nstd::vector<int> splitString(std::string str)\n{\n    std::vector<int> ans;\n    int a = 0;\n    for(char c : str){\n        if(c == ','){\n            ans.push_back(a);\n            a = 0;\n        }else{\n            a = a*10 + c - '0';\n        }\n    }\n    ans.push_back(a);\n    return ans;\n}\n\nvoid read_train(std::string file)\n{\n    std::ifstream in(file);\n    std::string str;\n    in >> str;\n    while(in >> str){\n        std::vector<int> v = splitString(str);\n        //train_Y.push_back(v[(size_t)(v.size()-1)]);\n        //v.pop_back();\n        train.push_back(v);\n    }\n\n}\n\nvoid read_test(std::string file)\n{\n    std::ifstream in(file);\n    std::string str;\n    in >> str;\n    while(in >> str){\n        std::vector<int> v = splitString(str);\n        test_X.push_back(v);\n    }\n}\n\n\nstruct Tree{\n   int col;/*按照第几列进行划分*/\n   int pos;/*该节点正样本个数*/\n   int neg;\n   std::vector<std::pair<int,struct Tree *> > subT;\n   /*划分得到的子树*/\n};\nstruct Tree * root;\n\n\n\nstd::vector<std::vector<int>> split(const std::vector<std::vector<int>>&vec,int col,int val)\n{\n    std::vector<std::vector<int>> ans;\n    for(auto&  v : vec){\n        if(v[col] == val){\n            std::vector<int> t(v);\n            t.erase(t.begin()+col);\n            ans.push_back(t);\n        }\n    }\n    return ans;\n\n}\n\ndouble Gini(const std::vector<std::vector<int>>& vec)\n{\n    if(vec.size() == 0)return 0;\n    size_t y = vec[0].size() - 1;\n    int a = 0;\n    for(auto v : vec){\n        if(v[y] == 1){\n            a ++;\n        }\n    }\n    size_t s = vec.size();\n    double ans = (a*a + (s-a)*(s-a))*1./(s*s);\n    return ans;\n}\n\ndouble nlog(double x)\n{\n    /*规定x == 0时,xlog2(x) 为0*/\n    if(fabs(x) < 1e-9)return 0;\n    return x*log2(x);\n}\n\n/*计算信息增益比*/\ndouble G(const std::vector<std::vector<int>> & vec, int col)\n{\n\n    std::map<int,int> mp;\n    std::map<int,int> p;\n    int pos = 0;\n    int D = (int)(vec.size());\n    for(auto & v : vec){\n        mp[v[col]] += 1;\n        if(v[vec[0].size()-1])\n            p[v[col]] += 1,pos += 1;\n    }\n    double x =  pos*1./D,ans,y = 0,z;\n\n    double hd = -(nlog(x) + nlog(1-x));\n    double ha = 0;\n    for(auto a : mp){\n        x = p[a.first]*1./a.second;\n\n\n        z = a.second *1./D;\n        y -= z*(nlog(x) + nlog(1-x));\n        ha -= nlog(z);\n    }\n    hd -= y;\n    return hd/ha;\n}\n\n/*建树*/\nstruct Tree* build(std::vector<std::vector<int>> train)\n{\n    struct Tree * root = new Tree();\n\n    root->pos = 0;\n    root->neg = (int)train.size();\n    root->col = -1;\n    size_t y = train[0].size() - 1;\n    for(auto v:train){\n        if(v[y] == 1){\n            root->pos ++;\n            root->neg --;\n        }\n    }\n    if(train.size() == 1)return root;\n    std::vector<int> vec;\n    int col = -1;\n    double mG = 0;\n    /*取信息增益比最大的特征对子树进行划分*/\n    for(size_t i = 0; i < train[0].size() -1; i++){\n        double g = G(train,i);\n        if(g > mG){\n            mG = g;\n            col = i;\n        }\n    }\n    root->col = col;\n    if(mG > 0.0000001){\n        std::set<int> st;\n\n        for(auto & v : train){\n           st.insert(v[col]);\n        }\n        for(int a : st){\n          root->subT.push_back({a,build(split(train,col,a))});\n        }\n    }\n    return root;\n}\n#include <queue>\nvoid bfs(struct Tree* root)\n{\n    std::queue<std::pair<struct Tree*,int>> q;\n    q.push({root,0});\n    int l = 0;\n    while(!q.empty()){\n        std::pair<struct Tree*,int> p = q.front();q.pop();\n        if(l == p.second-1){std::cout << \"\\n\";l+=1;}\n        std::cout <<\"(\"<< p.first->pos << \",\" << p.first->neg  << \")\";\n        for(auto&  a : p.first->subT){\n            q.push({a.second,p.second+1});\n        }\n    }\n}\n\n\ndouble predict(const std::vector<int>& vec,struct Tree * root){\n    if(root->subT.size() == 0)return root->pos*1./(root->pos+root->neg);\n    std::vector<int> v(vec);\n    size_t len = root->subT.size();\n    if(root->subT[0].first >= v[root->col]){\n        v.erase(v.begin()+root->col);\n        return predict(v,root->subT[0].second);\n    }else{\n        for(size_t i = 1; i < len -1; i++){\n            if(root->subT[i].first == v[root->col]){\n               v.erase(v.begin()+root->col);\n                return predict(v,root->subT[i].second);\n            }\n        }\n        v.erase(v.begin()+root->col);\n        return predict(v,root->subT[len - 1].second);\n    }\n}\n\n\nint main()\n{\n    read_train(\"train.csv\");\n    std::vector<std::vector<int>> train_,test_;\n    for(auto & v : train){\n        int x = rand()%100;\n        if(x < 30){\n            test_.push_back(v);\n        }else{\n            train_.push_back(v);\n        }\n    }\n    root = build(train);\n    bfs(root);\n    //std::cout << root->pos <<\" \"<< root->neg << std::endl;\n\n    int a = 0;\n    for(auto & v : test_){\n        if(predict(v,root)>0.5 && v[v.size()-1] == 1){\n            a++;\n        }\n        else if(predict(v,root)<0.5 && v[v.size()-1]==0){\n            a++;\n        }\n    }\n    std::cout << \"accuracy:\\n\";\n    std::cout << a*1./test_.size() << std::endl;\n    read_test(\"test.csv\");\n    std::ofstream out(\"submission.txt\");\n    for(size_t i = 0; i < test_X.size();i++){\n        out << predict(test_X[i],root) << '\\n';\n    }\n}\n\n\n```\n\n\n## 随机森林\n在上面实现的决策树基础上，根据bagging原理，实现了随机森林。\n\n每次从容量为n的样本集中有放回抽取n个样本，从特征集合中抽取m个特征，建立决策树。\n\n每个决策树预测的概率求和，取算术平均作为随机森林预测结果。\n```C++\n#include<iostream>\n#include<vector>\n#include<string>\n#include<fstream>\n#include<cstdlib>\n#include<algorithm>\n#include<map>\n#include<cmath>\n#include<set>\n\nstd::vector<std::vector<int> > train;\n//std::vector<int> train_Y;\nstd::vector<std::vector<int> > test_X;\n\nstd::vector<int> splitString(const std::string &str) {\n    std::vector<int> ans;\n    int a = 0;\n    for (char c : str) {\n        if (c == ',') {\n            ans.push_back(a);\n            a = 0;\n        } else {\n            a = a * 10 + c - '0';\n        }\n    }\n    ans.push_back(a);\n    return ans;\n}\n\nvoid read_train(const std::string &file) {\n    std::ifstream in(file);\n    std::string str;\n    in >> str;\n    while (in >> str) {\n        std::vector<int> v = splitString(str);\n        //train_Y.push_back(v[(size_t)(v.size()-1)]);\n        //v.pop_back();\n        train.push_back(v);\n    }\n\n}\n\nvoid read_test(const std::string &file) {\n    std::ifstream in(file);\n    std::string str;\n    in >> str;\n    while (in >> str) {\n        std::vector<int> v = splitString(str);\n        test_X.push_back(v);\n    }\n}\n\n\nstruct Tree {\n    int col;\n    int pos;\n    int neg;\n    std::vector<std::pair<int, struct Tree *> > subT;\n};\n\n\nstd::vector<std::vector<int>> split(const std::vector<std::vector<int>> &vec, int col, int val) {\n    std::vector<std::vector<int>> ans;\n    for (auto &v : vec) {\n        if (v[col] == val) {\n            std::vector<int> t(v);\n            t.erase(t.begin() + col);\n            ans.push_back(t);\n        }\n    }\n    return ans;\n\n}\n\ndouble nlog(double x) {\n    if (fabs(x) < 1e-9)return 0;\n    return x * log2(x);\n}\n\ndouble G(const std::vector<std::vector<int>> &vec, int col) {\n\n    std::map<int, int> mp;\n    std::map<int, int> p;\n    int pos = 0;\n    int D = (int) (vec.size());\n    for (auto &v : vec) {\n        mp[v[col]] += 1;\n        if (v[vec[0].size() - 1])\n            p[v[col]] += 1, pos += 1;\n    }\n    double x = pos * 1. / D, y = 0, z;\n\n    double hd = -(nlog(x) + nlog(1 - x));\n    double ha = 0;\n    for (auto a : mp) {\n        x = p[a.first] * 1. / a.second;\n\n\n        z = a.second * 1. / D;\n        y -= z * (nlog(x) + nlog(1 - x));\n        ha -= nlog(z);\n    }\n    hd -= y;\n    return hd / ha;\n}\n\nstruct Tree *build(std::vector<std::vector<int>> train) {\n    struct Tree *root = new Tree();\n\n    root->pos = 0;\n    root->neg = (int) train.size();\n    root->col = -1;\n    size_t y = train[0].size() - 1;\n    for (auto v:train) {\n        if (v[y] == 1) {\n            root->pos++;\n            root->neg--;\n        }\n    }\n    if (train.size() == 1)return root;\n    std::vector<int> vec;\n    int col = -1;\n    double mG = 0;\n    for (size_t i = 0; i < train[0].size() - 1; i++) {\n        double g = G(train, i);\n        if (g > mG) {\n            mG = g;\n            col = i;\n        }\n    }\n    root->col = col;\n    if (mG > 0.000001) {\n        std::set<int> st;\n        for (auto &v : train) {\n            st.insert(v[col]);\n        }\n        for (int a : st) {\n            root->subT.push_back({a, build(split(train, col, a))});\n        }\n    }\n    return root;\n}\n\n\ndouble predict(const std::vector<int> &vec, struct Tree *root) {\n    if (root->subT.size() == 0)return root->pos * 1. / (root->pos + root->neg);\n    std::vector<int> v(vec);\n    size_t len = root->subT.size();\n    if (root->subT[0].first >= v[root->col]) {\n        v.erase(v.begin() + root->col);\n        return predict(v, root->subT[0].second);\n    } else {\n        for (size_t i = 1; i < len - 1; i++) {\n            if (root->subT[i].first == v[root->col]) {\n                v.erase(v.begin() + root->col);\n                return predict(v, root->subT[i].second);\n            }\n        }\n        v.erase(v.begin() + root->col);\n        return predict(v, root->subT[len - 1].second);\n    }\n}\n\n\nstd::vector<std::vector<int>> resampling(const std::vector<std::vector<int>> &train) {\n    std::vector<std::vector<int>> ans;\n    size_t n = train.size();\n    for (size_t i = 0; i < n; i++) {\n        ans.push_back(train[rand() % n]);\n    }\n    return ans;\n}\n\n\nstd::pair<std::vector<std::vector<int>>, std::vector<int>> selectFeature(const std::vector<std::vector<int>> &train) {\n    std::vector<std::vector<int>> ans;\n    std::vector<int> col;\n    std::vector<int> idx;\n    for (size_t i = 0; i < train[0].size() - 1; i++) {\n        col.push_back(rand() % 10000);\n        idx.push_back(i);\n    }\n    sort(idx.begin(), idx.end(), [=](int a, int b) {\n        return col[a] < col[b];\n    });\n    while (idx.size() > 28)idx.pop_back();\n    for (auto &v : train) {\n        std::vector<int> vec;\n        for (auto &i : idx) {\n            vec.push_back(v[i]);\n        }\n        vec.push_back(v[v.size() - 1]);\n        ans.push_back(vec);\n    }\n    return {ans, idx};\n}\n\n\nstd::vector<std::vector<int>> select(const std::vector<std::vector<int>> &test, const std::vector<int> &col) {\n    std::vector<std::vector<int>> ans;\n    for (auto &v : test) {\n        std::vector<int> vec;\n        for (auto &i : col) {\n            vec.push_back(v[i]);\n        }\n        ans.push_back(vec);\n    }\n    return ans;\n}\n\nint main() {\n    //33\n    const int N = 33;\n    read_train(\"train.csv\");\n    //std::cout <<train.size()<< std::endl;\n    std::vector<std::vector<int>> train_;\n    std::pair<std::vector<std::vector<int>>, std::vector<int>> p;\n    /*for(auto & v : train){\n        int x = rand()%100;\n        if(x < 30){\n            test_.push_back(v);\n        }else{\n            train_.push_back(v);\n        }\n    }*/\n\n    std::vector<std::vector<int>> col;\n    std::vector<struct Tree *> root;\n\n    for (size_t i = 0; i < N; i++) {\n        train_ = resampling(train);\n\n        p = selectFeature(train_);\n        train_ = p.first;\n        col.push_back(p.second);\n        root.push_back(build(train_));\n        std::cout << \"第\" << i << \"棵决策树生成完成\" << std::endl;\n    }\n    read_test(\"test.csv\");\n    std::ofstream out(\"submission.txt\");\n    std::vector<double> ans(test_X.size());\n    fill(ans.begin(), ans.end(), 0);\n    for (size_t i = 0; i < N; i++) {\n        std::vector<std::vector<int>> test = select(test_X, col[i]);\n        for (auto &v :col[i]) {\n            std::cout << v << \" \";\n        }\n        std::cout << std::endl;\n        for (size_t j = 0; j < test.size(); j++) {\n            ans[j] += predict(test[j], root[i]);\n        }\n        std::cout << root[i]->pos << \" \" << root[i]->neg << std::endl;\n    }\n    for (auto &x: ans) {\n        out << x * 1. / N << '\\n';\n    }\n    out.close();\n}\n\n\n```","source":"_posts/决策树-随机森林.md","raw":"---\ntitle: 决策树&&随机森林\ndate: 2020-12-19 13:05:39\ntags: 机器学习\n---\n机器学习小作业。\n\n本文实现了决策树和随机森林算法。\n\n简单的、仅针对二分类问题实现。\n<!-- More -->\n## C4.5决策树\nC++实现\n```C++\n#include<iostream>\n#include<vector>\n#include<string>\n#include<fstream>\n#include<cstdlib>\n#include<algorithm>\n#include<map>\n#include<cmath>\n#include<set>\nstd::vector<std::vector<int> > train;\n//std::vector<int> train_Y;\nstd::vector<std::vector<int> > test_X;\n\nstd::vector<int> splitString(std::string str)\n{\n    std::vector<int> ans;\n    int a = 0;\n    for(char c : str){\n        if(c == ','){\n            ans.push_back(a);\n            a = 0;\n        }else{\n            a = a*10 + c - '0';\n        }\n    }\n    ans.push_back(a);\n    return ans;\n}\n\nvoid read_train(std::string file)\n{\n    std::ifstream in(file);\n    std::string str;\n    in >> str;\n    while(in >> str){\n        std::vector<int> v = splitString(str);\n        //train_Y.push_back(v[(size_t)(v.size()-1)]);\n        //v.pop_back();\n        train.push_back(v);\n    }\n\n}\n\nvoid read_test(std::string file)\n{\n    std::ifstream in(file);\n    std::string str;\n    in >> str;\n    while(in >> str){\n        std::vector<int> v = splitString(str);\n        test_X.push_back(v);\n    }\n}\n\n\nstruct Tree{\n   int col;/*按照第几列进行划分*/\n   int pos;/*该节点正样本个数*/\n   int neg;\n   std::vector<std::pair<int,struct Tree *> > subT;\n   /*划分得到的子树*/\n};\nstruct Tree * root;\n\n\n\nstd::vector<std::vector<int>> split(const std::vector<std::vector<int>>&vec,int col,int val)\n{\n    std::vector<std::vector<int>> ans;\n    for(auto&  v : vec){\n        if(v[col] == val){\n            std::vector<int> t(v);\n            t.erase(t.begin()+col);\n            ans.push_back(t);\n        }\n    }\n    return ans;\n\n}\n\ndouble Gini(const std::vector<std::vector<int>>& vec)\n{\n    if(vec.size() == 0)return 0;\n    size_t y = vec[0].size() - 1;\n    int a = 0;\n    for(auto v : vec){\n        if(v[y] == 1){\n            a ++;\n        }\n    }\n    size_t s = vec.size();\n    double ans = (a*a + (s-a)*(s-a))*1./(s*s);\n    return ans;\n}\n\ndouble nlog(double x)\n{\n    /*规定x == 0时,xlog2(x) 为0*/\n    if(fabs(x) < 1e-9)return 0;\n    return x*log2(x);\n}\n\n/*计算信息增益比*/\ndouble G(const std::vector<std::vector<int>> & vec, int col)\n{\n\n    std::map<int,int> mp;\n    std::map<int,int> p;\n    int pos = 0;\n    int D = (int)(vec.size());\n    for(auto & v : vec){\n        mp[v[col]] += 1;\n        if(v[vec[0].size()-1])\n            p[v[col]] += 1,pos += 1;\n    }\n    double x =  pos*1./D,ans,y = 0,z;\n\n    double hd = -(nlog(x) + nlog(1-x));\n    double ha = 0;\n    for(auto a : mp){\n        x = p[a.first]*1./a.second;\n\n\n        z = a.second *1./D;\n        y -= z*(nlog(x) + nlog(1-x));\n        ha -= nlog(z);\n    }\n    hd -= y;\n    return hd/ha;\n}\n\n/*建树*/\nstruct Tree* build(std::vector<std::vector<int>> train)\n{\n    struct Tree * root = new Tree();\n\n    root->pos = 0;\n    root->neg = (int)train.size();\n    root->col = -1;\n    size_t y = train[0].size() - 1;\n    for(auto v:train){\n        if(v[y] == 1){\n            root->pos ++;\n            root->neg --;\n        }\n    }\n    if(train.size() == 1)return root;\n    std::vector<int> vec;\n    int col = -1;\n    double mG = 0;\n    /*取信息增益比最大的特征对子树进行划分*/\n    for(size_t i = 0; i < train[0].size() -1; i++){\n        double g = G(train,i);\n        if(g > mG){\n            mG = g;\n            col = i;\n        }\n    }\n    root->col = col;\n    if(mG > 0.0000001){\n        std::set<int> st;\n\n        for(auto & v : train){\n           st.insert(v[col]);\n        }\n        for(int a : st){\n          root->subT.push_back({a,build(split(train,col,a))});\n        }\n    }\n    return root;\n}\n#include <queue>\nvoid bfs(struct Tree* root)\n{\n    std::queue<std::pair<struct Tree*,int>> q;\n    q.push({root,0});\n    int l = 0;\n    while(!q.empty()){\n        std::pair<struct Tree*,int> p = q.front();q.pop();\n        if(l == p.second-1){std::cout << \"\\n\";l+=1;}\n        std::cout <<\"(\"<< p.first->pos << \",\" << p.first->neg  << \")\";\n        for(auto&  a : p.first->subT){\n            q.push({a.second,p.second+1});\n        }\n    }\n}\n\n\ndouble predict(const std::vector<int>& vec,struct Tree * root){\n    if(root->subT.size() == 0)return root->pos*1./(root->pos+root->neg);\n    std::vector<int> v(vec);\n    size_t len = root->subT.size();\n    if(root->subT[0].first >= v[root->col]){\n        v.erase(v.begin()+root->col);\n        return predict(v,root->subT[0].second);\n    }else{\n        for(size_t i = 1; i < len -1; i++){\n            if(root->subT[i].first == v[root->col]){\n               v.erase(v.begin()+root->col);\n                return predict(v,root->subT[i].second);\n            }\n        }\n        v.erase(v.begin()+root->col);\n        return predict(v,root->subT[len - 1].second);\n    }\n}\n\n\nint main()\n{\n    read_train(\"train.csv\");\n    std::vector<std::vector<int>> train_,test_;\n    for(auto & v : train){\n        int x = rand()%100;\n        if(x < 30){\n            test_.push_back(v);\n        }else{\n            train_.push_back(v);\n        }\n    }\n    root = build(train);\n    bfs(root);\n    //std::cout << root->pos <<\" \"<< root->neg << std::endl;\n\n    int a = 0;\n    for(auto & v : test_){\n        if(predict(v,root)>0.5 && v[v.size()-1] == 1){\n            a++;\n        }\n        else if(predict(v,root)<0.5 && v[v.size()-1]==0){\n            a++;\n        }\n    }\n    std::cout << \"accuracy:\\n\";\n    std::cout << a*1./test_.size() << std::endl;\n    read_test(\"test.csv\");\n    std::ofstream out(\"submission.txt\");\n    for(size_t i = 0; i < test_X.size();i++){\n        out << predict(test_X[i],root) << '\\n';\n    }\n}\n\n\n```\n\n\n## 随机森林\n在上面实现的决策树基础上，根据bagging原理，实现了随机森林。\n\n每次从容量为n的样本集中有放回抽取n个样本，从特征集合中抽取m个特征，建立决策树。\n\n每个决策树预测的概率求和，取算术平均作为随机森林预测结果。\n```C++\n#include<iostream>\n#include<vector>\n#include<string>\n#include<fstream>\n#include<cstdlib>\n#include<algorithm>\n#include<map>\n#include<cmath>\n#include<set>\n\nstd::vector<std::vector<int> > train;\n//std::vector<int> train_Y;\nstd::vector<std::vector<int> > test_X;\n\nstd::vector<int> splitString(const std::string &str) {\n    std::vector<int> ans;\n    int a = 0;\n    for (char c : str) {\n        if (c == ',') {\n            ans.push_back(a);\n            a = 0;\n        } else {\n            a = a * 10 + c - '0';\n        }\n    }\n    ans.push_back(a);\n    return ans;\n}\n\nvoid read_train(const std::string &file) {\n    std::ifstream in(file);\n    std::string str;\n    in >> str;\n    while (in >> str) {\n        std::vector<int> v = splitString(str);\n        //train_Y.push_back(v[(size_t)(v.size()-1)]);\n        //v.pop_back();\n        train.push_back(v);\n    }\n\n}\n\nvoid read_test(const std::string &file) {\n    std::ifstream in(file);\n    std::string str;\n    in >> str;\n    while (in >> str) {\n        std::vector<int> v = splitString(str);\n        test_X.push_back(v);\n    }\n}\n\n\nstruct Tree {\n    int col;\n    int pos;\n    int neg;\n    std::vector<std::pair<int, struct Tree *> > subT;\n};\n\n\nstd::vector<std::vector<int>> split(const std::vector<std::vector<int>> &vec, int col, int val) {\n    std::vector<std::vector<int>> ans;\n    for (auto &v : vec) {\n        if (v[col] == val) {\n            std::vector<int> t(v);\n            t.erase(t.begin() + col);\n            ans.push_back(t);\n        }\n    }\n    return ans;\n\n}\n\ndouble nlog(double x) {\n    if (fabs(x) < 1e-9)return 0;\n    return x * log2(x);\n}\n\ndouble G(const std::vector<std::vector<int>> &vec, int col) {\n\n    std::map<int, int> mp;\n    std::map<int, int> p;\n    int pos = 0;\n    int D = (int) (vec.size());\n    for (auto &v : vec) {\n        mp[v[col]] += 1;\n        if (v[vec[0].size() - 1])\n            p[v[col]] += 1, pos += 1;\n    }\n    double x = pos * 1. / D, y = 0, z;\n\n    double hd = -(nlog(x) + nlog(1 - x));\n    double ha = 0;\n    for (auto a : mp) {\n        x = p[a.first] * 1. / a.second;\n\n\n        z = a.second * 1. / D;\n        y -= z * (nlog(x) + nlog(1 - x));\n        ha -= nlog(z);\n    }\n    hd -= y;\n    return hd / ha;\n}\n\nstruct Tree *build(std::vector<std::vector<int>> train) {\n    struct Tree *root = new Tree();\n\n    root->pos = 0;\n    root->neg = (int) train.size();\n    root->col = -1;\n    size_t y = train[0].size() - 1;\n    for (auto v:train) {\n        if (v[y] == 1) {\n            root->pos++;\n            root->neg--;\n        }\n    }\n    if (train.size() == 1)return root;\n    std::vector<int> vec;\n    int col = -1;\n    double mG = 0;\n    for (size_t i = 0; i < train[0].size() - 1; i++) {\n        double g = G(train, i);\n        if (g > mG) {\n            mG = g;\n            col = i;\n        }\n    }\n    root->col = col;\n    if (mG > 0.000001) {\n        std::set<int> st;\n        for (auto &v : train) {\n            st.insert(v[col]);\n        }\n        for (int a : st) {\n            root->subT.push_back({a, build(split(train, col, a))});\n        }\n    }\n    return root;\n}\n\n\ndouble predict(const std::vector<int> &vec, struct Tree *root) {\n    if (root->subT.size() == 0)return root->pos * 1. / (root->pos + root->neg);\n    std::vector<int> v(vec);\n    size_t len = root->subT.size();\n    if (root->subT[0].first >= v[root->col]) {\n        v.erase(v.begin() + root->col);\n        return predict(v, root->subT[0].second);\n    } else {\n        for (size_t i = 1; i < len - 1; i++) {\n            if (root->subT[i].first == v[root->col]) {\n                v.erase(v.begin() + root->col);\n                return predict(v, root->subT[i].second);\n            }\n        }\n        v.erase(v.begin() + root->col);\n        return predict(v, root->subT[len - 1].second);\n    }\n}\n\n\nstd::vector<std::vector<int>> resampling(const std::vector<std::vector<int>> &train) {\n    std::vector<std::vector<int>> ans;\n    size_t n = train.size();\n    for (size_t i = 0; i < n; i++) {\n        ans.push_back(train[rand() % n]);\n    }\n    return ans;\n}\n\n\nstd::pair<std::vector<std::vector<int>>, std::vector<int>> selectFeature(const std::vector<std::vector<int>> &train) {\n    std::vector<std::vector<int>> ans;\n    std::vector<int> col;\n    std::vector<int> idx;\n    for (size_t i = 0; i < train[0].size() - 1; i++) {\n        col.push_back(rand() % 10000);\n        idx.push_back(i);\n    }\n    sort(idx.begin(), idx.end(), [=](int a, int b) {\n        return col[a] < col[b];\n    });\n    while (idx.size() > 28)idx.pop_back();\n    for (auto &v : train) {\n        std::vector<int> vec;\n        for (auto &i : idx) {\n            vec.push_back(v[i]);\n        }\n        vec.push_back(v[v.size() - 1]);\n        ans.push_back(vec);\n    }\n    return {ans, idx};\n}\n\n\nstd::vector<std::vector<int>> select(const std::vector<std::vector<int>> &test, const std::vector<int> &col) {\n    std::vector<std::vector<int>> ans;\n    for (auto &v : test) {\n        std::vector<int> vec;\n        for (auto &i : col) {\n            vec.push_back(v[i]);\n        }\n        ans.push_back(vec);\n    }\n    return ans;\n}\n\nint main() {\n    //33\n    const int N = 33;\n    read_train(\"train.csv\");\n    //std::cout <<train.size()<< std::endl;\n    std::vector<std::vector<int>> train_;\n    std::pair<std::vector<std::vector<int>>, std::vector<int>> p;\n    /*for(auto & v : train){\n        int x = rand()%100;\n        if(x < 30){\n            test_.push_back(v);\n        }else{\n            train_.push_back(v);\n        }\n    }*/\n\n    std::vector<std::vector<int>> col;\n    std::vector<struct Tree *> root;\n\n    for (size_t i = 0; i < N; i++) {\n        train_ = resampling(train);\n\n        p = selectFeature(train_);\n        train_ = p.first;\n        col.push_back(p.second);\n        root.push_back(build(train_));\n        std::cout << \"第\" << i << \"棵决策树生成完成\" << std::endl;\n    }\n    read_test(\"test.csv\");\n    std::ofstream out(\"submission.txt\");\n    std::vector<double> ans(test_X.size());\n    fill(ans.begin(), ans.end(), 0);\n    for (size_t i = 0; i < N; i++) {\n        std::vector<std::vector<int>> test = select(test_X, col[i]);\n        for (auto &v :col[i]) {\n            std::cout << v << \" \";\n        }\n        std::cout << std::endl;\n        for (size_t j = 0; j < test.size(); j++) {\n            ans[j] += predict(test[j], root[i]);\n        }\n        std::cout << root[i]->pos << \" \" << root[i]->neg << std::endl;\n    }\n    for (auto &x: ans) {\n        out << x * 1. / N << '\\n';\n    }\n    out.close();\n}\n\n\n```","slug":"决策树-随机森林","published":1,"updated":"2020-12-19T05:23:51.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdn000hrouj9w434nci","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>机器学习小作业。</p>\n<p>本文实现了决策树和随机森林算法。</p>\n<p>简单的、仅针对二分类问题实现。<br><a id=\"more\"></a></p>\n<h2 id=\"C4-5决策树\"><a href=\"#C4-5决策树\" class=\"headerlink\" title=\"C4.5决策树\"></a>C4.5决策树</h2><p>C++实现<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; train;</span><br><span class=\"line\"><span class=\"comment\">//std::vector&lt;int&gt; train_Y;</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; test_X;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">splitString</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : str)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;,&#x27;</span>)&#123;</span><br><span class=\"line\">            ans.push_back(a);</span><br><span class=\"line\">            a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            a = a*<span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans.push_back(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_train</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> file)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ifstream <span class=\"title\">in</span><span class=\"params\">(file)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    in &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in &gt;&gt; str)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = splitString(str);</span><br><span class=\"line\">        <span class=\"comment\">//train_Y.push_back(v[(size_t)(v.size()-1)]);</span></span><br><span class=\"line\">        <span class=\"comment\">//v.pop_back();</span></span><br><span class=\"line\">        train.push_back(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_test</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> file)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ifstream <span class=\"title\">in</span><span class=\"params\">(file)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    in &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in &gt;&gt; str)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = splitString(str);</span><br><span class=\"line\">        test_X.push_back(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span>&#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> col;<span class=\"comment\">/*按照第几列进行划分*/</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> pos;<span class=\"comment\">/*该节点正样本个数*/</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> neg;</span><br><span class=\"line\">   <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,struct Tree *&gt; &gt; subT;</span><br><span class=\"line\">   <span class=\"comment\">/*划分得到的子树*/</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> * <span class=\"title\">root</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; split(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp;vec,<span class=\"keyword\">int</span> col,<span class=\"keyword\">int</span> val)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp;  v : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[col] == val)&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">t</span><span class=\"params\">(v)</span></span>;</span><br><span class=\"line\">            t.erase(t.begin()+col);</span><br><span class=\"line\">            ans.push_back(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">Gini</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; vec)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.size() == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> y = vec[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[y] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            a ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> s = vec.size();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = (a*a + (s-a)*(s-a))*<span class=\"number\">1.</span>/(s*s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">nlog</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*规定x == 0时,xlog2(x) 为0*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x) &lt; <span class=\"number\">1e-9</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*log2(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*计算信息增益比*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">G</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp; vec, <span class=\"keyword\">int</span> col)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D = (<span class=\"keyword\">int</span>)(vec.size());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; v : vec)&#123;</span><br><span class=\"line\">        mp[v[col]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[vec[<span class=\"number\">0</span>].size()<span class=\"number\">-1</span>])</span><br><span class=\"line\">            p[v[col]] += <span class=\"number\">1</span>,pos += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x =  pos*<span class=\"number\">1.</span>/D,ans,y = <span class=\"number\">0</span>,z;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">double</span> hd = -(nlog(x) + nlog(<span class=\"number\">1</span>-x));</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ha = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> a : mp)&#123;</span><br><span class=\"line\">        x = p[a.first]*<span class=\"number\">1.</span>/a.second;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        z = a.second *<span class=\"number\">1.</span>/D;</span><br><span class=\"line\">        y -= z*(nlog(x) + nlog(<span class=\"number\">1</span>-x));</span><br><span class=\"line\">        ha -= nlog(z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hd -= y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hd/ha;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*建树*/</span></span><br><span class=\"line\"><span class=\"function\">struct Tree* <span class=\"title\">build</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; train)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> * <span class=\"title\">root</span> =</span> <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\"></span><br><span class=\"line\">    root-&gt;pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    root-&gt;neg = (<span class=\"keyword\">int</span>)train.size();</span><br><span class=\"line\">    root-&gt;col = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> y = train[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:train)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[y] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            root-&gt;pos ++;</span><br><span class=\"line\">            root-&gt;neg --;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(train.size() == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> mG = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*取信息增益比最大的特征对子树进行划分*/</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; train[<span class=\"number\">0</span>].size() <span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> g = G(train,i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(g &gt; mG)&#123;</span><br><span class=\"line\">            mG = g;</span><br><span class=\"line\">            col = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root-&gt;col = col;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mG &gt; <span class=\"number\">0.0000001</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; v : train)&#123;</span><br><span class=\"line\">           st.insert(v[col]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a : st)&#123;</span><br><span class=\"line\">          root-&gt;subT.push_back(&#123;a,build(split(train,col,a))&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(struct Tree* root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">queue</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;struct Tree*,<span class=\"keyword\">int</span>&gt;&gt; q;</span><br><span class=\"line\">    q.push(&#123;root,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;struct Tree*,<span class=\"keyword\">int</span>&gt; p = q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l == p.second<span class=\"number\">-1</span>)&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;l+=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">&quot;(&quot;</span>&lt;&lt; p.first-&gt;pos &lt;&lt; <span class=\"string\">&quot;,&quot;</span> &lt;&lt; p.first-&gt;neg  &lt;&lt; <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp;  a : p.first-&gt;subT)&#123;</span><br><span class=\"line\">            q.push(&#123;a.second,p.second+<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">predict</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; vec,struct Tree * root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;subT.size() == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> root-&gt;pos*<span class=\"number\">1.</span>/(root-&gt;pos+root-&gt;neg);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(vec)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len = root-&gt;subT.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;subT[<span class=\"number\">0</span>].first &gt;= v[root-&gt;col])&#123;</span><br><span class=\"line\">        v.erase(v.begin()+root-&gt;col);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predict(v,root-&gt;subT[<span class=\"number\">0</span>].second);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">1</span>; i &lt; len <span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root-&gt;subT[i].first == v[root-&gt;col])&#123;</span><br><span class=\"line\">               v.erase(v.begin()+root-&gt;col);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> predict(v,root-&gt;subT[i].second);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        v.erase(v.begin()+root-&gt;col);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predict(v,root-&gt;subT[len - <span class=\"number\">1</span>].second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    read_train(<span class=\"string\">&quot;train.csv&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; train_,test_;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; v : train)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = rand()%<span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">            test_.push_back(v);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            train_.push_back(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root = build(train);</span><br><span class=\"line\">    bfs(root);</span><br><span class=\"line\">    <span class=\"comment\">//std::cout &lt;&lt; root-&gt;pos &lt;&lt;&quot; &quot;&lt;&lt; root-&gt;neg &lt;&lt; std::endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; v : test_)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(predict(v,root)&gt;<span class=\"number\">0.5</span> &amp;&amp; v[v.size()<span class=\"number\">-1</span>] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(predict(v,root)&lt;<span class=\"number\">0.5</span> &amp;&amp; v[v.size()<span class=\"number\">-1</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;accuracy:\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; a*<span class=\"number\">1.</span>/test_.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    read_test(<span class=\"string\">&quot;test.csv&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">&quot;submission.txt&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; test_X.size();i++)&#123;</span><br><span class=\"line\">        out &lt;&lt; predict(test_X[i],root) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"随机森林\"><a href=\"#随机森林\" class=\"headerlink\" title=\"随机森林\"></a>随机森林</h2><p>在上面实现的决策树基础上，根据bagging原理，实现了随机森林。</p>\n<p>每次从容量为n的样本集中有放回抽取n个样本，从特征集合中抽取m个特征，建立决策树。</p>\n<p>每个决策树预测的概率求和，取算术平均作为随机森林预测结果。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; train;</span><br><span class=\"line\"><span class=\"comment\">//std::vector&lt;int&gt; train_Y;</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; test_X;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">splitString</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : str) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;,&#x27;</span>) &#123;</span><br><span class=\"line\">            ans.push_back(a);</span><br><span class=\"line\">            a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            a = a * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans.push_back(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_train</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;file)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ifstream <span class=\"title\">in</span><span class=\"params\">(file)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    in &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (in &gt;&gt; str) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = splitString(str);</span><br><span class=\"line\">        <span class=\"comment\">//train_Y.push_back(v[(size_t)(v.size()-1)]);</span></span><br><span class=\"line\">        <span class=\"comment\">//v.pop_back();</span></span><br><span class=\"line\">        train.push_back(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_test</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;file)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ifstream <span class=\"title\">in</span><span class=\"params\">(file)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    in &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (in &gt;&gt; str) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = splitString(str);</span><br><span class=\"line\">        test_X.push_back(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> col;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> neg;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>, struct Tree *&gt; &gt; subT;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; split(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;vec, <span class=\"keyword\">int</span> col, <span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : vec) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v[col] == val) &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">t</span><span class=\"params\">(v)</span></span>;</span><br><span class=\"line\">            t.erase(t.begin() + col);</span><br><span class=\"line\">            ans.push_back(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">nlog</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(x) &lt; <span class=\"number\">1e-9</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * log2(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">G</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;vec, <span class=\"keyword\">int</span> col)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D = (<span class=\"keyword\">int</span>) (vec.size());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : vec) &#123;</span><br><span class=\"line\">        mp[v[col]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v[vec[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>])</span><br><span class=\"line\">            p[v[col]] += <span class=\"number\">1</span>, pos += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x = pos * <span class=\"number\">1.</span> / D, y = <span class=\"number\">0</span>, z;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">double</span> hd = -(nlog(x) + nlog(<span class=\"number\">1</span> - x));</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ha = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> a : mp) &#123;</span><br><span class=\"line\">        x = p[a.first] * <span class=\"number\">1.</span> / a.second;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        z = a.second * <span class=\"number\">1.</span> / D;</span><br><span class=\"line\">        y -= z * (nlog(x) + nlog(<span class=\"number\">1</span> - x));</span><br><span class=\"line\">        ha -= nlog(z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hd -= y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hd / ha;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct Tree *<span class=\"title\">build</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; train)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> *<span class=\"title\">root</span> =</span> <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\"></span><br><span class=\"line\">    root-&gt;pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    root-&gt;neg = (<span class=\"keyword\">int</span>) train.size();</span><br><span class=\"line\">    root-&gt;col = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> y = train[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v:train) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v[y] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            root-&gt;pos++;</span><br><span class=\"line\">            root-&gt;neg--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (train.size() == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> mG = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; train[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> g = G(train, i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g &gt; mG) &#123;</span><br><span class=\"line\">            mG = g;</span><br><span class=\"line\">            col = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root-&gt;col = col;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mG &gt; <span class=\"number\">0.000001</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : train) &#123;</span><br><span class=\"line\">            st.insert(v[col]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a : st) &#123;</span><br><span class=\"line\">            root-&gt;subT.push_back(&#123;a, build(split(train, col, a))&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">predict</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;vec, struct Tree *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;subT.size() == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> root-&gt;pos * <span class=\"number\">1.</span> / (root-&gt;pos + root-&gt;neg);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(vec)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len = root-&gt;subT.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;subT[<span class=\"number\">0</span>].first &gt;= v[root-&gt;col]) &#123;</span><br><span class=\"line\">        v.erase(v.begin() + root-&gt;col);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predict(v, root-&gt;subT[<span class=\"number\">0</span>].second);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">1</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;subT[i].first == v[root-&gt;col]) &#123;</span><br><span class=\"line\">                v.erase(v.begin() + root-&gt;col);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> predict(v, root-&gt;subT[i].second);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        v.erase(v.begin() + root-&gt;col);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predict(v, root-&gt;subT[len - <span class=\"number\">1</span>].second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; resampling(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;train) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> n = train.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        ans.push_back(train[rand() % n]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;, <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; selectFeature(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;train) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; col;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; idx;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; train[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        col.push_back(rand() % <span class=\"number\">10000</span>);</span><br><span class=\"line\">        idx.push_back(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(idx.begin(), idx.end(), [=](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> col[a] &lt; col[b];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (idx.size() &gt; <span class=\"number\">28</span>)idx.pop_back();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : train) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : idx) &#123;</span><br><span class=\"line\">            vec.push_back(v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec.push_back(v[v.size() - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        ans.push_back(vec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;ans, idx&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; select(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;test, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;col) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : test) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : col) &#123;</span><br><span class=\"line\">            vec.push_back(v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans.push_back(vec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//33</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">33</span>;</span><br><span class=\"line\">    read_train(<span class=\"string\">&quot;train.csv&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//std::cout &lt;&lt;train.size()&lt;&lt; std::endl;</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; train_;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;, <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; p;</span><br><span class=\"line\">    <span class=\"comment\">/*for(auto &amp; v : train)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        int x = rand()%100;</span></span><br><span class=\"line\"><span class=\"comment\">        if(x &lt; 30)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            test_.push_back(v);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            train_.push_back(v);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; col;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;struct Tree *&gt; root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">        train_ = resampling(train);</span><br><span class=\"line\"></span><br><span class=\"line\">        p = selectFeature(train_);</span><br><span class=\"line\">        train_ = p.first;</span><br><span class=\"line\">        col.push_back(p.second);</span><br><span class=\"line\">        root.push_back(build(train_));</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;棵决策树生成完成&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    read_test(<span class=\"string\">&quot;test.csv&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">&quot;submission.txt&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(test_X.size())</span></span>;</span><br><span class=\"line\">    fill(ans.begin(), ans.end(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; test = select(test_X, col[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v :col[i]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; v &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; test.size(); j++) &#123;</span><br><span class=\"line\">            ans[j] += predict(test[j], root[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; root[i]-&gt;pos &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; root[i]-&gt;neg &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;x: ans) &#123;</span><br><span class=\"line\">        out &lt;&lt; x * <span class=\"number\">1.</span> / N &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<p>机器学习小作业。</p>\n<p>本文实现了决策树和随机森林算法。</p>\n<p>简单的、仅针对二分类问题实现。<br>","more":"</p>\n<h2 id=\"C4-5决策树\"><a href=\"#C4-5决策树\" class=\"headerlink\" title=\"C4.5决策树\"></a>C4.5决策树</h2><p>C++实现<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; train;</span><br><span class=\"line\"><span class=\"comment\">//std::vector&lt;int&gt; train_Y;</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; test_X;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">splitString</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : str)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;,&#x27;</span>)&#123;</span><br><span class=\"line\">            ans.push_back(a);</span><br><span class=\"line\">            a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            a = a*<span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans.push_back(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_train</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> file)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ifstream <span class=\"title\">in</span><span class=\"params\">(file)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    in &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in &gt;&gt; str)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = splitString(str);</span><br><span class=\"line\">        <span class=\"comment\">//train_Y.push_back(v[(size_t)(v.size()-1)]);</span></span><br><span class=\"line\">        <span class=\"comment\">//v.pop_back();</span></span><br><span class=\"line\">        train.push_back(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_test</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> file)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ifstream <span class=\"title\">in</span><span class=\"params\">(file)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    in &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in &gt;&gt; str)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = splitString(str);</span><br><span class=\"line\">        test_X.push_back(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span>&#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> col;<span class=\"comment\">/*按照第几列进行划分*/</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> pos;<span class=\"comment\">/*该节点正样本个数*/</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> neg;</span><br><span class=\"line\">   <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,struct Tree *&gt; &gt; subT;</span><br><span class=\"line\">   <span class=\"comment\">/*划分得到的子树*/</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> * <span class=\"title\">root</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; split(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp;vec,<span class=\"keyword\">int</span> col,<span class=\"keyword\">int</span> val)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp;  v : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[col] == val)&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">t</span><span class=\"params\">(v)</span></span>;</span><br><span class=\"line\">            t.erase(t.begin()+col);</span><br><span class=\"line\">            ans.push_back(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">Gini</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; vec)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.size() == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> y = vec[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : vec)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[y] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            a ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> s = vec.size();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = (a*a + (s-a)*(s-a))*<span class=\"number\">1.</span>/(s*s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">nlog</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*规定x == 0时,xlog2(x) 为0*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(x) &lt; <span class=\"number\">1e-9</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*log2(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*计算信息增益比*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">G</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp; vec, <span class=\"keyword\">int</span> col)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D = (<span class=\"keyword\">int</span>)(vec.size());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; v : vec)&#123;</span><br><span class=\"line\">        mp[v[col]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[vec[<span class=\"number\">0</span>].size()<span class=\"number\">-1</span>])</span><br><span class=\"line\">            p[v[col]] += <span class=\"number\">1</span>,pos += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x =  pos*<span class=\"number\">1.</span>/D,ans,y = <span class=\"number\">0</span>,z;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">double</span> hd = -(nlog(x) + nlog(<span class=\"number\">1</span>-x));</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ha = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> a : mp)&#123;</span><br><span class=\"line\">        x = p[a.first]*<span class=\"number\">1.</span>/a.second;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        z = a.second *<span class=\"number\">1.</span>/D;</span><br><span class=\"line\">        y -= z*(nlog(x) + nlog(<span class=\"number\">1</span>-x));</span><br><span class=\"line\">        ha -= nlog(z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hd -= y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hd/ha;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*建树*/</span></span><br><span class=\"line\"><span class=\"function\">struct Tree* <span class=\"title\">build</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; train)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> * <span class=\"title\">root</span> =</span> <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\"></span><br><span class=\"line\">    root-&gt;pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    root-&gt;neg = (<span class=\"keyword\">int</span>)train.size();</span><br><span class=\"line\">    root-&gt;col = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> y = train[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:train)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[y] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            root-&gt;pos ++;</span><br><span class=\"line\">            root-&gt;neg --;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(train.size() == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> mG = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*取信息增益比最大的特征对子树进行划分*/</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; train[<span class=\"number\">0</span>].size() <span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> g = G(train,i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(g &gt; mG)&#123;</span><br><span class=\"line\">            mG = g;</span><br><span class=\"line\">            col = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root-&gt;col = col;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mG &gt; <span class=\"number\">0.0000001</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; v : train)&#123;</span><br><span class=\"line\">           st.insert(v[col]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a : st)&#123;</span><br><span class=\"line\">          root-&gt;subT.push_back(&#123;a,build(split(train,col,a))&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(struct Tree* root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">queue</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;struct Tree*,<span class=\"keyword\">int</span>&gt;&gt; q;</span><br><span class=\"line\">    q.push(&#123;root,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;struct Tree*,<span class=\"keyword\">int</span>&gt; p = q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l == p.second<span class=\"number\">-1</span>)&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;l+=<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">&quot;(&quot;</span>&lt;&lt; p.first-&gt;pos &lt;&lt; <span class=\"string\">&quot;,&quot;</span> &lt;&lt; p.first-&gt;neg  &lt;&lt; <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp;  a : p.first-&gt;subT)&#123;</span><br><span class=\"line\">            q.push(&#123;a.second,p.second+<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">predict</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; vec,struct Tree * root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;subT.size() == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> root-&gt;pos*<span class=\"number\">1.</span>/(root-&gt;pos+root-&gt;neg);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(vec)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len = root-&gt;subT.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;subT[<span class=\"number\">0</span>].first &gt;= v[root-&gt;col])&#123;</span><br><span class=\"line\">        v.erase(v.begin()+root-&gt;col);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predict(v,root-&gt;subT[<span class=\"number\">0</span>].second);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">1</span>; i &lt; len <span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root-&gt;subT[i].first == v[root-&gt;col])&#123;</span><br><span class=\"line\">               v.erase(v.begin()+root-&gt;col);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> predict(v,root-&gt;subT[i].second);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        v.erase(v.begin()+root-&gt;col);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predict(v,root-&gt;subT[len - <span class=\"number\">1</span>].second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    read_train(<span class=\"string\">&quot;train.csv&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; train_,test_;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; v : train)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = rand()%<span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">            test_.push_back(v);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            train_.push_back(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root = build(train);</span><br><span class=\"line\">    bfs(root);</span><br><span class=\"line\">    <span class=\"comment\">//std::cout &lt;&lt; root-&gt;pos &lt;&lt;&quot; &quot;&lt;&lt; root-&gt;neg &lt;&lt; std::endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; v : test_)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(predict(v,root)&gt;<span class=\"number\">0.5</span> &amp;&amp; v[v.size()<span class=\"number\">-1</span>] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(predict(v,root)&lt;<span class=\"number\">0.5</span> &amp;&amp; v[v.size()<span class=\"number\">-1</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;accuracy:\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; a*<span class=\"number\">1.</span>/test_.size() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    read_test(<span class=\"string\">&quot;test.csv&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">&quot;submission.txt&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; test_X.size();i++)&#123;</span><br><span class=\"line\">        out &lt;&lt; predict(test_X[i],root) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"随机森林\"><a href=\"#随机森林\" class=\"headerlink\" title=\"随机森林\"></a>随机森林</h2><p>在上面实现的决策树基础上，根据bagging原理，实现了随机森林。</p>\n<p>每次从容量为n的样本集中有放回抽取n个样本，从特征集合中抽取m个特征，建立决策树。</p>\n<p>每个决策树预测的概率求和，取算术平均作为随机森林预测结果。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; train;</span><br><span class=\"line\"><span class=\"comment\">//std::vector&lt;int&gt; train_Y;</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; test_X;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">splitString</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : str) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;,&#x27;</span>) &#123;</span><br><span class=\"line\">            ans.push_back(a);</span><br><span class=\"line\">            a = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            a = a * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans.push_back(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_train</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;file)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ifstream <span class=\"title\">in</span><span class=\"params\">(file)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    in &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (in &gt;&gt; str) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = splitString(str);</span><br><span class=\"line\">        <span class=\"comment\">//train_Y.push_back(v[(size_t)(v.size()-1)]);</span></span><br><span class=\"line\">        <span class=\"comment\">//v.pop_back();</span></span><br><span class=\"line\">        train.push_back(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_test</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;file)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ifstream <span class=\"title\">in</span><span class=\"params\">(file)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">    in &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (in &gt;&gt; str) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v = splitString(str);</span><br><span class=\"line\">        test_X.push_back(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> col;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> neg;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>, struct Tree *&gt; &gt; subT;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; split(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;vec, <span class=\"keyword\">int</span> col, <span class=\"keyword\">int</span> val) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : vec) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v[col] == val) &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">t</span><span class=\"params\">(v)</span></span>;</span><br><span class=\"line\">            t.erase(t.begin() + col);</span><br><span class=\"line\">            ans.push_back(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">nlog</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(x) &lt; <span class=\"number\">1e-9</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * log2(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">G</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;vec, <span class=\"keyword\">int</span> col)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D = (<span class=\"keyword\">int</span>) (vec.size());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : vec) &#123;</span><br><span class=\"line\">        mp[v[col]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v[vec[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>])</span><br><span class=\"line\">            p[v[col]] += <span class=\"number\">1</span>, pos += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x = pos * <span class=\"number\">1.</span> / D, y = <span class=\"number\">0</span>, z;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">double</span> hd = -(nlog(x) + nlog(<span class=\"number\">1</span> - x));</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ha = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> a : mp) &#123;</span><br><span class=\"line\">        x = p[a.first] * <span class=\"number\">1.</span> / a.second;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        z = a.second * <span class=\"number\">1.</span> / D;</span><br><span class=\"line\">        y -= z * (nlog(x) + nlog(<span class=\"number\">1</span> - x));</span><br><span class=\"line\">        ha -= nlog(z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hd -= y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hd / ha;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct Tree *<span class=\"title\">build</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; train)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tree</span> *<span class=\"title\">root</span> =</span> <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\"></span><br><span class=\"line\">    root-&gt;pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    root-&gt;neg = (<span class=\"keyword\">int</span>) train.size();</span><br><span class=\"line\">    root-&gt;col = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> y = train[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v:train) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v[y] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            root-&gt;pos++;</span><br><span class=\"line\">            root-&gt;neg--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (train.size() == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> mG = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; train[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> g = G(train, i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g &gt; mG) &#123;</span><br><span class=\"line\">            mG = g;</span><br><span class=\"line\">            col = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root-&gt;col = col;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mG &gt; <span class=\"number\">0.000001</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : train) &#123;</span><br><span class=\"line\">            st.insert(v[col]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> a : st) &#123;</span><br><span class=\"line\">            root-&gt;subT.push_back(&#123;a, build(split(train, col, a))&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">predict</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;vec, struct Tree *root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;subT.size() == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> root-&gt;pos * <span class=\"number\">1.</span> / (root-&gt;pos + root-&gt;neg);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(vec)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len = root-&gt;subT.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;subT[<span class=\"number\">0</span>].first &gt;= v[root-&gt;col]) &#123;</span><br><span class=\"line\">        v.erase(v.begin() + root-&gt;col);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predict(v, root-&gt;subT[<span class=\"number\">0</span>].second);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">1</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;subT[i].first == v[root-&gt;col]) &#123;</span><br><span class=\"line\">                v.erase(v.begin() + root-&gt;col);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> predict(v, root-&gt;subT[i].second);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        v.erase(v.begin() + root-&gt;col);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predict(v, root-&gt;subT[len - <span class=\"number\">1</span>].second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; resampling(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;train) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> n = train.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        ans.push_back(train[rand() % n]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;, <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; selectFeature(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;train) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; col;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; idx;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; train[<span class=\"number\">0</span>].size() - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        col.push_back(rand() % <span class=\"number\">10000</span>);</span><br><span class=\"line\">        idx.push_back(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(idx.begin(), idx.end(), [=](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> col[a] &lt; col[b];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (idx.size() &gt; <span class=\"number\">28</span>)idx.pop_back();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : train) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : idx) &#123;</span><br><span class=\"line\">            vec.push_back(v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec.push_back(v[v.size() - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        ans.push_back(vec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;ans, idx&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; select(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;test, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;col) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : test) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : col) &#123;</span><br><span class=\"line\">            vec.push_back(v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans.push_back(vec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//33</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">33</span>;</span><br><span class=\"line\">    read_train(<span class=\"string\">&quot;train.csv&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//std::cout &lt;&lt;train.size()&lt;&lt; std::endl;</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; train_;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">pair</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;, <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; p;</span><br><span class=\"line\">    <span class=\"comment\">/*for(auto &amp; v : train)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        int x = rand()%100;</span></span><br><span class=\"line\"><span class=\"comment\">        if(x &lt; 30)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            test_.push_back(v);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            train_.push_back(v);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; col;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;struct Tree *&gt; root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">        train_ = resampling(train);</span><br><span class=\"line\"></span><br><span class=\"line\">        p = selectFeature(train_);</span><br><span class=\"line\">        train_ = p.first;</span><br><span class=\"line\">        col.push_back(p.second);</span><br><span class=\"line\">        root.push_back(build(train_));</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;棵决策树生成完成&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    read_test(<span class=\"string\">&quot;test.csv&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">&quot;submission.txt&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(test_X.size())</span></span>;</span><br><span class=\"line\">    fill(ans.begin(), ans.end(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; test = select(test_X, col[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v :col[i]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; v &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> j = <span class=\"number\">0</span>; j &lt; test.size(); j++) &#123;</span><br><span class=\"line\">            ans[j] += predict(test[j], root[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; root[i]-&gt;pos &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; root[i]-&gt;neg &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;x: ans) &#123;</span><br><span class=\"line\">        out &lt;&lt; x * <span class=\"number\">1.</span> / N &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>"},{"title":"前端杂项","date":"2020-08-03T06:22:46.000Z","_content":"\n{% asset_img htm.jpg %}\n\n一些杂乱的东西。\n\n<!-- more -->\n\n## html 标签\n\n```\n<h1>...</h1> <!-- 1级标题 -->\n<h6>...</h6> <!-- 2级标题 -->\n<i>...</i>  <!-- 文字斜体 -->\n<p>...</p> <!-- 段落标签 -->\n<b>...</b> <!-- 文字加粗 -->\n<br> <!-- 换行标记 -->\n<hr> <!-- 水平线 -->\n&nbsp; <!-- 空格 -->\n<img src = \"\">\n<img src = \"images/1.png\" width = \"100%\">\n<img src = \"images/1.png\" height = \"100px\">\n\n<ul>\n        <li>\n            <a href = \"https://www.baidu.com/s?cl=3&tn=baidutop10&fr=top1000&wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&rsv_idx=2&rsv_dl=fyb_n_homepage&hisfilter=1\">\n                钟南山成为共和国勋章建议人选\n             </a>\n        </li>\n</ul>\n\n<ol>\n        <li>\n            <a href = \"https://www.baidu.com/s?cl=3&tn=baidutop10&fr=top1000&wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&rsv_idx=2&rsv_dl=fyb_n_homepage&hisfilter=1\">\n                钟南山成为共和国勋章建议人选\n             </a>\n        </li>\n</ol>\n\n<a href = \"\" target = \"_blank\">在新窗口打开链接 </a>\n\n<ul type = \"disc\"> </ul>\n<ul type = \"circle\"> </ul>\n<ul type = \"square\"> </ul>\n<ol type = \"1\"> </ol>\n<ol type = \"a\"> </ol>\n<ol type = \"A\"> </ol>\n<ol type = \"i\"> </ol>\n<ol type = \"I\"> </ol>\n<img src = \"\" title = \"鼠标划上去时的提示\" alt = \"图片加载失败时的提示文字\">\n\n<del>给文字增加删除线</del>\n<sup>2</sup>把文字变成上标\n<u>...</u>给文字加下划线\n<center>文字居中</center>\n表格\n<table border = \"1px\" cellspacing = \"0\">\n    <tr>\n        <td width = \"200px\" align = \"center\"></td> <td></td> <td></td>\n    </tr>\n</table>\n\n<table border = \"1px\" cellspacing = \"0\">\n    <col width = \"200px\">\n    <tr align = \"center\">\n        <td></td> <td></td> <td></td>\n    </tr>\n</table>\n行列合并\n<td colspan = \"3\">\n<td rowspan = \"4\">\n<th>...</th> 表头\n\n<colgroup span = \"6\" width = \"100px\">前六列设为一组，宽均为100px\n\n表单\n<form action = \"\"> <!-- action 表单信息提交地址 -->\n    <input type = \"text\"> <!-- password,button,radio,checkbox,submit,reset,file -->\n    <input type = \"text\" name = \"loginname\">\n    <input type = \"password\" name = \"pwd\">\n    <input type = \"submit\" value = \"提交\"> <!-- value 按钮文字-->\n</form>\n```\n\n## post get\n提交数据:post\n获取数据:get\n```\n<form method = \"post\"/\"get\">\n```\nget请求发送的数据都会写在地址栏上，用户可见\npost请求发送的数据用户不可见\npost请求能发送大量数据，而get不能\n\n## css\n```\ntext-align: center; 文字居中方式\nbackground-color:gray;\n<span>容器标签，包裹文本，不具有特殊功能</span>\n<div>容器标签，可以包裹任何内容，也可以容器直接相互包裹</div>\ncolor: white;文字颜色\nfont-size:24px;字体大小\nmargin:auto; 让容器本身水平居中\n<div id=\"banner\">\nline-height:80px;行高\nheight:80px; 高\ntext-decoration:none;去除超链接下划线\nborder:solid 1px #808080;设置边框\npadding:0 15px;变宽拉长\nborder-right:solid 1px #808080;只保留右边框\nborder-bottom: dash 1px grey;虚下边框\n<style>\n    div,img标签名 根据标签名称选择对应的所有标签\n    #id id选择器，同一个页面元素id不允许重复，因此id选择器只能选择单个元素\n    .class名 类别选择器 选择拥有该类别的多个元素\n    *通用选择器，选择所有标签\n</style>\nfloat:left;容器浮动\nclear:left/right/both表示该元素不受左右元素浮动影响\noverflow:auto;让父元素自动适应子浮动元素大小\nmargin-top,margin-right,margin-bottom,margin-left\npadding:内边距\n```\n## 选择器优先级\n行内样式 > ID选择器 > 类选择器 > 标签选择器 > 通用选择器\n\n## CSS文本属性\n\n```\ncolor:red;/*文字颜色*/\nfont-family:\"华文中宋\";/*字体类型*/\nfont-size:26px;/*字体大小*/\nfont-weight:bold;/*文字加粗*/\nfont-style:italic;/*文字倾斜*/\ntext-indent:60px;/*首行缩进*/\ntext-align:center;/*水平对齐方式*/\nline-height:100px;/*行高*/\nheight:100px;background-color:gray;line-height:100px;/*垂直居中*/\ntext-decoration:underline;/*文本修饰*/\n```\n\n## 图片\n\n```\nbackground-image：url();\nbackground-repeat: no-repeat;//不让背景图平铺\nbackground-position:right bottom;//背景图位置\n```\n\n## Javascript\n\n### JavaScript 变量\n\n变量必须以字母开头\n\n变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）\n\n变量名称对大小写敏感（y 和 Y 是不同的变量）\n\n可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：\n\n```\nvar lastname=\"Doe\", age=30, job=\"carpenter\";\n```\n\n重新声明 JavaScript 变量\n\n如果重新声明 JavaScript 变量，该变量的值不会丢失：\n\n在以下两条语句执行后，变量 carname 的值依然是 \"Volvo\"：\n```\nvar carname=\"Volvo\";\nvar carname;\n```\n\nJavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：\n```\nvar x;               // x 为 undefined\nvar x = 5;           // 现在 x 为数字\nvar x = \"John\";      // 现在 x 为字符串\n```\n\nJavaScript字符串可以使用单引号或双引号。\n\n可以在字符串中使用引号，只要不匹配包围字符串的引号即可：\n\n```\nvar answer=\"It's alright\";\nvar answer=\"He is called 'Johnny'\";\nvar answer='He is called \"Johnny\"';\n```\n\nJavaScript 只有一种数字类型。极大或极小的数字可以通过科学（指数）计数法来书写。\n```\nvar y=123e5;      // 12300000\nvar z=123e-5;     // 0.00123\n```\n\nJavaScript 数组\n```\nvar cars=new Array();\ncars[0]=\"Saab\";\ncars[1]=\"Volvo\";\ncars[2]=\"BMW\";\n```\n\n```\nvar cars=new Array(\"Saab\",\"Volvo\",\"BMW\");\nvar cars=[\"Saab\",\"Volvo\",\"BMW\"];\n```\nJavaScript 对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：\n```\nvar person={firstname:\"John\", lastname:\"Doe\", id:5566};\n```\n对象属性有两种寻址方式:\n```\nname=person.lastname;\nname=person[\"lastname\"];\n```\n\nUndefined 这个值表示变量不含有值。\n\n可以通过将变量的值设置为 null 来清空变量。\n\n```\ncars=null;\nperson=null;\n```\nJavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。","source":"_posts/前端杂项.md","raw":"---\ntitle: 前端杂项\ndate: 2020-08-03 14:22:46\ntags: 前端\n---\n\n{% asset_img htm.jpg %}\n\n一些杂乱的东西。\n\n<!-- more -->\n\n## html 标签\n\n```\n<h1>...</h1> <!-- 1级标题 -->\n<h6>...</h6> <!-- 2级标题 -->\n<i>...</i>  <!-- 文字斜体 -->\n<p>...</p> <!-- 段落标签 -->\n<b>...</b> <!-- 文字加粗 -->\n<br> <!-- 换行标记 -->\n<hr> <!-- 水平线 -->\n&nbsp; <!-- 空格 -->\n<img src = \"\">\n<img src = \"images/1.png\" width = \"100%\">\n<img src = \"images/1.png\" height = \"100px\">\n\n<ul>\n        <li>\n            <a href = \"https://www.baidu.com/s?cl=3&tn=baidutop10&fr=top1000&wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&rsv_idx=2&rsv_dl=fyb_n_homepage&hisfilter=1\">\n                钟南山成为共和国勋章建议人选\n             </a>\n        </li>\n</ul>\n\n<ol>\n        <li>\n            <a href = \"https://www.baidu.com/s?cl=3&tn=baidutop10&fr=top1000&wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&rsv_idx=2&rsv_dl=fyb_n_homepage&hisfilter=1\">\n                钟南山成为共和国勋章建议人选\n             </a>\n        </li>\n</ol>\n\n<a href = \"\" target = \"_blank\">在新窗口打开链接 </a>\n\n<ul type = \"disc\"> </ul>\n<ul type = \"circle\"> </ul>\n<ul type = \"square\"> </ul>\n<ol type = \"1\"> </ol>\n<ol type = \"a\"> </ol>\n<ol type = \"A\"> </ol>\n<ol type = \"i\"> </ol>\n<ol type = \"I\"> </ol>\n<img src = \"\" title = \"鼠标划上去时的提示\" alt = \"图片加载失败时的提示文字\">\n\n<del>给文字增加删除线</del>\n<sup>2</sup>把文字变成上标\n<u>...</u>给文字加下划线\n<center>文字居中</center>\n表格\n<table border = \"1px\" cellspacing = \"0\">\n    <tr>\n        <td width = \"200px\" align = \"center\"></td> <td></td> <td></td>\n    </tr>\n</table>\n\n<table border = \"1px\" cellspacing = \"0\">\n    <col width = \"200px\">\n    <tr align = \"center\">\n        <td></td> <td></td> <td></td>\n    </tr>\n</table>\n行列合并\n<td colspan = \"3\">\n<td rowspan = \"4\">\n<th>...</th> 表头\n\n<colgroup span = \"6\" width = \"100px\">前六列设为一组，宽均为100px\n\n表单\n<form action = \"\"> <!-- action 表单信息提交地址 -->\n    <input type = \"text\"> <!-- password,button,radio,checkbox,submit,reset,file -->\n    <input type = \"text\" name = \"loginname\">\n    <input type = \"password\" name = \"pwd\">\n    <input type = \"submit\" value = \"提交\"> <!-- value 按钮文字-->\n</form>\n```\n\n## post get\n提交数据:post\n获取数据:get\n```\n<form method = \"post\"/\"get\">\n```\nget请求发送的数据都会写在地址栏上，用户可见\npost请求发送的数据用户不可见\npost请求能发送大量数据，而get不能\n\n## css\n```\ntext-align: center; 文字居中方式\nbackground-color:gray;\n<span>容器标签，包裹文本，不具有特殊功能</span>\n<div>容器标签，可以包裹任何内容，也可以容器直接相互包裹</div>\ncolor: white;文字颜色\nfont-size:24px;字体大小\nmargin:auto; 让容器本身水平居中\n<div id=\"banner\">\nline-height:80px;行高\nheight:80px; 高\ntext-decoration:none;去除超链接下划线\nborder:solid 1px #808080;设置边框\npadding:0 15px;变宽拉长\nborder-right:solid 1px #808080;只保留右边框\nborder-bottom: dash 1px grey;虚下边框\n<style>\n    div,img标签名 根据标签名称选择对应的所有标签\n    #id id选择器，同一个页面元素id不允许重复，因此id选择器只能选择单个元素\n    .class名 类别选择器 选择拥有该类别的多个元素\n    *通用选择器，选择所有标签\n</style>\nfloat:left;容器浮动\nclear:left/right/both表示该元素不受左右元素浮动影响\noverflow:auto;让父元素自动适应子浮动元素大小\nmargin-top,margin-right,margin-bottom,margin-left\npadding:内边距\n```\n## 选择器优先级\n行内样式 > ID选择器 > 类选择器 > 标签选择器 > 通用选择器\n\n## CSS文本属性\n\n```\ncolor:red;/*文字颜色*/\nfont-family:\"华文中宋\";/*字体类型*/\nfont-size:26px;/*字体大小*/\nfont-weight:bold;/*文字加粗*/\nfont-style:italic;/*文字倾斜*/\ntext-indent:60px;/*首行缩进*/\ntext-align:center;/*水平对齐方式*/\nline-height:100px;/*行高*/\nheight:100px;background-color:gray;line-height:100px;/*垂直居中*/\ntext-decoration:underline;/*文本修饰*/\n```\n\n## 图片\n\n```\nbackground-image：url();\nbackground-repeat: no-repeat;//不让背景图平铺\nbackground-position:right bottom;//背景图位置\n```\n\n## Javascript\n\n### JavaScript 变量\n\n变量必须以字母开头\n\n变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）\n\n变量名称对大小写敏感（y 和 Y 是不同的变量）\n\n可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：\n\n```\nvar lastname=\"Doe\", age=30, job=\"carpenter\";\n```\n\n重新声明 JavaScript 变量\n\n如果重新声明 JavaScript 变量，该变量的值不会丢失：\n\n在以下两条语句执行后，变量 carname 的值依然是 \"Volvo\"：\n```\nvar carname=\"Volvo\";\nvar carname;\n```\n\nJavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：\n```\nvar x;               // x 为 undefined\nvar x = 5;           // 现在 x 为数字\nvar x = \"John\";      // 现在 x 为字符串\n```\n\nJavaScript字符串可以使用单引号或双引号。\n\n可以在字符串中使用引号，只要不匹配包围字符串的引号即可：\n\n```\nvar answer=\"It's alright\";\nvar answer=\"He is called 'Johnny'\";\nvar answer='He is called \"Johnny\"';\n```\n\nJavaScript 只有一种数字类型。极大或极小的数字可以通过科学（指数）计数法来书写。\n```\nvar y=123e5;      // 12300000\nvar z=123e-5;     // 0.00123\n```\n\nJavaScript 数组\n```\nvar cars=new Array();\ncars[0]=\"Saab\";\ncars[1]=\"Volvo\";\ncars[2]=\"BMW\";\n```\n\n```\nvar cars=new Array(\"Saab\",\"Volvo\",\"BMW\");\nvar cars=[\"Saab\",\"Volvo\",\"BMW\"];\n```\nJavaScript 对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：\n```\nvar person={firstname:\"John\", lastname:\"Doe\", id:5566};\n```\n对象属性有两种寻址方式:\n```\nname=person.lastname;\nname=person[\"lastname\"];\n```\n\nUndefined 这个值表示变量不含有值。\n\n可以通过将变量的值设置为 null 来清空变量。\n\n```\ncars=null;\nperson=null;\n```\nJavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。","slug":"前端杂项","published":1,"updated":"2020-08-06T08:13:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdn000iroujeoe0cn18","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><img src=\"/2020/08/03/%E5%89%8D%E7%AB%AF%E6%9D%82%E9%A1%B9/htm.jpg\" class=\"\">\n<p>一些杂乱的东西。</p>\n<a id=\"more\"></a>\n<h2 id=\"html-标签\"><a href=\"#html-标签\" class=\"headerlink\" title=\"html 标签\"></a>html 标签</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span> <span class=\"comment\">&lt;!-- 1级标题 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span> <span class=\"comment\">&lt;!-- 2级标题 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>  <span class=\"comment\">&lt;!-- 文字斜体 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span> <span class=\"comment\">&lt;!-- 段落标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> <span class=\"comment\">&lt;!-- 文字加粗 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> <span class=\"comment\">&lt;!-- 换行标记 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span> <span class=\"comment\">&lt;!-- 水平线 --&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;nbsp;</span> <span class=\"comment\">&lt;!-- 空格 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;images/1.png&quot;</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;100%&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;images/1.png&quot;</span> <span class=\"attr\">height</span> = <span class=\"string\">&quot;100px&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span> = <span class=\"string\">&quot;https://www.baidu.com/s?cl=3&amp;tn=baidutop10&amp;fr=top1000&amp;wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&amp;rsv_idx=2&amp;rsv_dl=fyb_n_homepage&amp;hisfilter=1&quot;</span>&gt;</span></span><br><span class=\"line\">                钟南山成为共和国勋章建议人选</span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span> = <span class=\"string\">&quot;https://www.baidu.com/s?cl=3&amp;tn=baidutop10&amp;fr=top1000&amp;wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&amp;rsv_idx=2&amp;rsv_dl=fyb_n_homepage&amp;hisfilter=1&quot;</span>&gt;</span></span><br><span class=\"line\">                钟南山成为共和国勋章建议人选</span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span> = <span class=\"string\">&quot;&quot;</span> <span class=\"attr\">target</span> = <span class=\"string\">&quot;_blank&quot;</span>&gt;</span>在新窗口打开链接 <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;disc&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;circle&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;square&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;1&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;a&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;A&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;i&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;I&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;&quot;</span> <span class=\"attr\">title</span> = <span class=\"string\">&quot;鼠标划上去时的提示&quot;</span> <span class=\"attr\">alt</span> = <span class=\"string\">&quot;图片加载失败时的提示文字&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>给文字增加删除线<span class=\"tag\">&lt;/<span class=\"name\">del</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span>把文字变成上标</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span>给文字加下划线</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span>文字居中<span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">表格</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span> = <span class=\"string\">&quot;1px&quot;</span> <span class=\"attr\">cellspacing</span> = <span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;200px&quot;</span> <span class=\"attr\">align</span> = <span class=\"string\">&quot;center&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span> = <span class=\"string\">&quot;1px&quot;</span> <span class=\"attr\">cellspacing</span> = <span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;200px&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">align</span> = <span class=\"string\">&quot;center&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">行列合并</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span> = <span class=\"string\">&quot;3&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">rowspan</span> = <span class=\"string\">&quot;4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span> 表头</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">colgroup</span> <span class=\"attr\">span</span> = <span class=\"string\">&quot;6&quot;</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;100px&quot;</span>&gt;</span>前六列设为一组，宽均为100px</span><br><span class=\"line\"></span><br><span class=\"line\">表单</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span> = <span class=\"string\">&quot;&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- action 表单信息提交地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;text&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- password,button,radio,checkbox,submit,reset,file --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;loginname&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;pwd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span> = <span class=\"string\">&quot;提交&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- value 按钮文字--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"post-get\"><a href=\"#post-get\" class=\"headerlink\" title=\"post get\"></a>post get</h2><p>提交数据:post<br>获取数据:get<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form <span class=\"function\"><span class=\"keyword\">method</span> = &quot;<span class=\"title\">post</span>&quot;/&quot;<span class=\"title\">get</span>&quot;&gt;</span></span><br></pre></td></tr></table></figure><br>get请求发送的数据都会写在地址栏上，用户可见<br>post请求发送的数据用户不可见<br>post请求能发送大量数据，而get不能</p>\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">text-align</span>: center; 文字居中方式</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>:gray;</span><br><span class=\"line\">&lt;span&gt;容器标签，包裹文本，不具有特殊功能&lt;/span&gt;</span><br><span class=\"line\">&lt;div&gt;容器标签，可以包裹任何内容，也可以容器直接相互包裹&lt;/div&gt;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: white;文字颜色</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">24px</span>;字体大小</span><br><span class=\"line\"><span class=\"attribute\">margin</span>:auto; 让容器本身水平居中</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> id=<span class=\"string\">&quot;banner&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">80px</span>;行高</span><br><span class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">80px</span>; 高</span><br><span class=\"line\"><span class=\"attribute\">text-decoration</span>:none;去除超链接下划线</span><br><span class=\"line\"><span class=\"attribute\">border</span>:solid <span class=\"number\">1px</span> <span class=\"number\">#808080</span>;设置边框</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:<span class=\"number\">0</span> <span class=\"number\">15px</span>;变宽拉长</span><br><span class=\"line\"><span class=\"attribute\">border-right</span>:solid <span class=\"number\">1px</span> <span class=\"number\">#808080</span>;只保留右边框</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>: dash <span class=\"number\">1px</span> grey;虚下边框</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span>,img标签名 根据标签名称选择对应的所有标签</span><br><span class=\"line\">    <span class=\"selector-id\">#id</span> id选择器，同一个页面元素id不允许重复，因此id选择器只能选择单个元素</span><br><span class=\"line\">    .class名 类别选择器 选择拥有该类别的多个元素</span><br><span class=\"line\">    *通用选择器，选择所有标签</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"><span class=\"attribute\">float</span>:left;容器浮动</span><br><span class=\"line\"><span class=\"attribute\">clear</span>:left/right/both表示该元素不受左右元素浮动影响</span><br><span class=\"line\"><span class=\"attribute\">overflow</span>:auto;让父元素自动适应子浮动元素大小</span><br><span class=\"line\"><span class=\"attribute\">margin-top</span>,margin-right,margin-bottom,margin-left</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:内边距</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择器优先级\"><a href=\"#选择器优先级\" class=\"headerlink\" title=\"选择器优先级\"></a>选择器优先级</h2><p>行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通用选择器</p>\n<h2 id=\"CSS文本属性\"><a href=\"#CSS文本属性\" class=\"headerlink\" title=\"CSS文本属性\"></a>CSS文本属性</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">color</span>:red;<span class=\"comment\">/*文字颜色*/</span></span><br><span class=\"line\"><span class=\"attribute\">font-family</span>:<span class=\"string\">&quot;华文中宋&quot;</span>;<span class=\"comment\">/*字体类型*/</span></span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">26px</span>;<span class=\"comment\">/*字体大小*/</span></span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;<span class=\"comment\">/*文字加粗*/</span></span><br><span class=\"line\"><span class=\"attribute\">font-style</span>:italic;<span class=\"comment\">/*文字倾斜*/</span></span><br><span class=\"line\"><span class=\"attribute\">text-indent</span>:<span class=\"number\">60px</span>;<span class=\"comment\">/*首行缩进*/</span></span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;<span class=\"comment\">/*水平对齐方式*/</span></span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">100px</span>;<span class=\"comment\">/*行高*/</span></span><br><span class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">background-color</span>:gray;<span class=\"attribute\">line-height</span>:<span class=\"number\">100px</span>;<span class=\"comment\">/*垂直居中*/</span></span><br><span class=\"line\"><span class=\"attribute\">text-decoration</span>:underline;<span class=\"comment\">/*文本修饰*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-image</span>：url();</span><br><span class=\"line\"><span class=\"attribute\">background-repeat</span>: no-repeat;<span class=\"comment\">//不让背景图平铺</span></span><br><span class=\"line\"><span class=\"attribute\">background-position</span><span class=\"selector-pseudo\">:right</span> <span class=\"attribute\">bottom</span>;<span class=\"comment\">//背景图位置</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><h3 id=\"JavaScript-变量\"><a href=\"#JavaScript-变量\" class=\"headerlink\" title=\"JavaScript 变量\"></a>JavaScript 变量</h3><p>变量必须以字母开头</p>\n<p>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</p>\n<p>变量名称对大小写敏感（y 和 Y 是不同的变量）</p>\n<p>可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"attribute\">lastname</span>=<span class=\"string\">&quot;Doe&quot;</span>, <span class=\"attribute\">age</span>=30, <span class=\"attribute\">job</span>=<span class=\"string\">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>重新声明 JavaScript 变量</p>\n<p>如果重新声明 JavaScript 变量，该变量的值不会丢失：</p>\n<p>在以下两条语句执行后，变量 carname 的值依然是 “Volvo”：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var carname=<span class=\"string\">&quot;Volvo&quot;</span><span class=\"comment\">;</span></span><br><span class=\"line\">var carname<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure><br>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：<br><figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"symbol\">x</span>;               <span class=\"comment\">// x 为 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"symbol\">x</span> = <span class=\"number\">5</span>;           <span class=\"comment\">// 现在 x 为数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"symbol\">x</span> = <span class=\"string\">&quot;John&quot;</span>;      <span class=\"comment\">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure><br>JavaScript字符串可以使用单引号或双引号。</p>\n<p>可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var answer</span>=<span class=\"string\">&quot;It&#x27;s alright&quot;</span>;</span><br><span class=\"line\"><span class=\"attribute\">var answer</span>=<span class=\"string\">&quot;He is called &#x27;Johnny&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"attribute\">var answer</span>=<span class=\"string\">&#x27;He is called &quot;Johnny&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>JavaScript 只有一种数字类型。极大或极小的数字可以通过科学（指数）计数法来书写。<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var</span> y=<span class=\"number\">123</span>e<span class=\"number\">5</span>;      // <span class=\"number\">12300000</span></span><br><span class=\"line\"><span class=\"attribute\">var</span> z=<span class=\"number\">123</span>e-<span class=\"number\">5</span>;     // <span class=\"number\">0</span>.<span class=\"number\">00123</span></span><br></pre></td></tr></table></figure><br>JavaScript 数组<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cars=new Array()<span class=\"comment\">;</span></span><br><span class=\"line\">cars[<span class=\"number\">0</span>]=<span class=\"string\">&quot;Saab&quot;</span><span class=\"comment\">;</span></span><br><span class=\"line\">cars[<span class=\"number\">1</span>]=<span class=\"string\">&quot;Volvo&quot;</span><span class=\"comment\">;</span></span><br><span class=\"line\">cars[<span class=\"number\">2</span>]=<span class=\"string\">&quot;BMW&quot;</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var cars</span>=new Array(<span class=\"string\">&quot;Saab&quot;</span>,<span class=\"string\">&quot;Volvo&quot;</span>,<span class=\"string\">&quot;BMW&quot;</span>);</span><br><span class=\"line\"><span class=\"attribute\">var cars</span>=[<span class=\"string\">&quot;Saab&quot;</span>,<span class=\"string\">&quot;Volvo&quot;</span>,<span class=\"string\">&quot;BMW&quot;</span>];</span><br></pre></td></tr></table></figure><br>JavaScript 对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person=&#123;<span class=\"attr\">firstname:</span><span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">lastname:</span><span class=\"string\">&quot;Doe&quot;</span>, <span class=\"attr\">id:</span><span class=\"number\">5566</span>&#125;;</span><br></pre></td></tr></table></figure><br>对象属性有两种寻址方式:<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name</span>=person.lastname<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=person[<span class=\"string\">&quot;lastname&quot;</span>]<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure><br>Undefined 这个值表示变量不含有值。</p>\n<p>可以通过将变量的值设置为 null 来清空变量。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cars</span>=null<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">person</span>=null<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<img src=\"/2020/08/03/%E5%89%8D%E7%AB%AF%E6%9D%82%E9%A1%B9/htm.jpg\" class=\"\">\n<p>一些杂乱的东西。</p>","more":"<h2 id=\"html-标签\"><a href=\"#html-标签\" class=\"headerlink\" title=\"html 标签\"></a>html 标签</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span> <span class=\"comment\">&lt;!-- 1级标题 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span> <span class=\"comment\">&lt;!-- 2级标题 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>  <span class=\"comment\">&lt;!-- 文字斜体 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span> <span class=\"comment\">&lt;!-- 段落标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span> <span class=\"comment\">&lt;!-- 文字加粗 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> <span class=\"comment\">&lt;!-- 换行标记 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span> <span class=\"comment\">&lt;!-- 水平线 --&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;nbsp;</span> <span class=\"comment\">&lt;!-- 空格 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;images/1.png&quot;</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;100%&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;images/1.png&quot;</span> <span class=\"attr\">height</span> = <span class=\"string\">&quot;100px&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span> = <span class=\"string\">&quot;https://www.baidu.com/s?cl=3&amp;tn=baidutop10&amp;fr=top1000&amp;wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&amp;rsv_idx=2&amp;rsv_dl=fyb_n_homepage&amp;hisfilter=1&quot;</span>&gt;</span></span><br><span class=\"line\">                钟南山成为共和国勋章建议人选</span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span> = <span class=\"string\">&quot;https://www.baidu.com/s?cl=3&amp;tn=baidutop10&amp;fr=top1000&amp;wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&amp;rsv_idx=2&amp;rsv_dl=fyb_n_homepage&amp;hisfilter=1&quot;</span>&gt;</span></span><br><span class=\"line\">                钟南山成为共和国勋章建议人选</span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span> = <span class=\"string\">&quot;&quot;</span> <span class=\"attr\">target</span> = <span class=\"string\">&quot;_blank&quot;</span>&gt;</span>在新窗口打开链接 <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;disc&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;circle&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;square&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;1&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;a&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;A&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;i&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;I&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span> = <span class=\"string\">&quot;&quot;</span> <span class=\"attr\">title</span> = <span class=\"string\">&quot;鼠标划上去时的提示&quot;</span> <span class=\"attr\">alt</span> = <span class=\"string\">&quot;图片加载失败时的提示文字&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>给文字增加删除线<span class=\"tag\">&lt;/<span class=\"name\">del</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span>把文字变成上标</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span>给文字加下划线</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span>文字居中<span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">表格</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span> = <span class=\"string\">&quot;1px&quot;</span> <span class=\"attr\">cellspacing</span> = <span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;200px&quot;</span> <span class=\"attr\">align</span> = <span class=\"string\">&quot;center&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span> = <span class=\"string\">&quot;1px&quot;</span> <span class=\"attr\">cellspacing</span> = <span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;200px&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">align</span> = <span class=\"string\">&quot;center&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">行列合并</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span> = <span class=\"string\">&quot;3&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">rowspan</span> = <span class=\"string\">&quot;4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span> 表头</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">colgroup</span> <span class=\"attr\">span</span> = <span class=\"string\">&quot;6&quot;</span> <span class=\"attr\">width</span> = <span class=\"string\">&quot;100px&quot;</span>&gt;</span>前六列设为一组，宽均为100px</span><br><span class=\"line\"></span><br><span class=\"line\">表单</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span> = <span class=\"string\">&quot;&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- action 表单信息提交地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;text&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- password,button,radio,checkbox,submit,reset,file --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;loginname&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span> = <span class=\"string\">&quot;pwd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span> = <span class=\"string\">&quot;提交&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- value 按钮文字--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"post-get\"><a href=\"#post-get\" class=\"headerlink\" title=\"post get\"></a>post get</h2><p>提交数据:post<br>获取数据:get<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form <span class=\"function\"><span class=\"keyword\">method</span> = &quot;<span class=\"title\">post</span>&quot;/&quot;<span class=\"title\">get</span>&quot;&gt;</span></span><br></pre></td></tr></table></figure><br>get请求发送的数据都会写在地址栏上，用户可见<br>post请求发送的数据用户不可见<br>post请求能发送大量数据，而get不能</p>\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">text-align</span>: center; 文字居中方式</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>:gray;</span><br><span class=\"line\">&lt;span&gt;容器标签，包裹文本，不具有特殊功能&lt;/span&gt;</span><br><span class=\"line\">&lt;div&gt;容器标签，可以包裹任何内容，也可以容器直接相互包裹&lt;/div&gt;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: white;文字颜色</span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">24px</span>;字体大小</span><br><span class=\"line\"><span class=\"attribute\">margin</span>:auto; 让容器本身水平居中</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> id=<span class=\"string\">&quot;banner&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">80px</span>;行高</span><br><span class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">80px</span>; 高</span><br><span class=\"line\"><span class=\"attribute\">text-decoration</span>:none;去除超链接下划线</span><br><span class=\"line\"><span class=\"attribute\">border</span>:solid <span class=\"number\">1px</span> <span class=\"number\">#808080</span>;设置边框</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:<span class=\"number\">0</span> <span class=\"number\">15px</span>;变宽拉长</span><br><span class=\"line\"><span class=\"attribute\">border-right</span>:solid <span class=\"number\">1px</span> <span class=\"number\">#808080</span>;只保留右边框</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>: dash <span class=\"number\">1px</span> grey;虚下边框</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    <span class=\"selector-tag\">div</span>,img标签名 根据标签名称选择对应的所有标签</span><br><span class=\"line\">    <span class=\"selector-id\">#id</span> id选择器，同一个页面元素id不允许重复，因此id选择器只能选择单个元素</span><br><span class=\"line\">    .class名 类别选择器 选择拥有该类别的多个元素</span><br><span class=\"line\">    *通用选择器，选择所有标签</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"><span class=\"attribute\">float</span>:left;容器浮动</span><br><span class=\"line\"><span class=\"attribute\">clear</span>:left/right/both表示该元素不受左右元素浮动影响</span><br><span class=\"line\"><span class=\"attribute\">overflow</span>:auto;让父元素自动适应子浮动元素大小</span><br><span class=\"line\"><span class=\"attribute\">margin-top</span>,margin-right,margin-bottom,margin-left</span><br><span class=\"line\"><span class=\"attribute\">padding</span>:内边距</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择器优先级\"><a href=\"#选择器优先级\" class=\"headerlink\" title=\"选择器优先级\"></a>选择器优先级</h2><p>行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通用选择器</p>\n<h2 id=\"CSS文本属性\"><a href=\"#CSS文本属性\" class=\"headerlink\" title=\"CSS文本属性\"></a>CSS文本属性</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">color</span>:red;<span class=\"comment\">/*文字颜色*/</span></span><br><span class=\"line\"><span class=\"attribute\">font-family</span>:<span class=\"string\">&quot;华文中宋&quot;</span>;<span class=\"comment\">/*字体类型*/</span></span><br><span class=\"line\"><span class=\"attribute\">font-size</span>:<span class=\"number\">26px</span>;<span class=\"comment\">/*字体大小*/</span></span><br><span class=\"line\"><span class=\"attribute\">font-weight</span>:bold;<span class=\"comment\">/*文字加粗*/</span></span><br><span class=\"line\"><span class=\"attribute\">font-style</span>:italic;<span class=\"comment\">/*文字倾斜*/</span></span><br><span class=\"line\"><span class=\"attribute\">text-indent</span>:<span class=\"number\">60px</span>;<span class=\"comment\">/*首行缩进*/</span></span><br><span class=\"line\"><span class=\"attribute\">text-align</span>:center;<span class=\"comment\">/*水平对齐方式*/</span></span><br><span class=\"line\"><span class=\"attribute\">line-height</span>:<span class=\"number\">100px</span>;<span class=\"comment\">/*行高*/</span></span><br><span class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">background-color</span>:gray;<span class=\"attribute\">line-height</span>:<span class=\"number\">100px</span>;<span class=\"comment\">/*垂直居中*/</span></span><br><span class=\"line\"><span class=\"attribute\">text-decoration</span>:underline;<span class=\"comment\">/*文本修饰*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">background-image</span>：url();</span><br><span class=\"line\"><span class=\"attribute\">background-repeat</span>: no-repeat;<span class=\"comment\">//不让背景图平铺</span></span><br><span class=\"line\"><span class=\"attribute\">background-position</span><span class=\"selector-pseudo\">:right</span> <span class=\"attribute\">bottom</span>;<span class=\"comment\">//背景图位置</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><h3 id=\"JavaScript-变量\"><a href=\"#JavaScript-变量\" class=\"headerlink\" title=\"JavaScript 变量\"></a>JavaScript 变量</h3><p>变量必须以字母开头</p>\n<p>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</p>\n<p>变量名称对大小写敏感（y 和 Y 是不同的变量）</p>\n<p>可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"attribute\">lastname</span>=<span class=\"string\">&quot;Doe&quot;</span>, <span class=\"attribute\">age</span>=30, <span class=\"attribute\">job</span>=<span class=\"string\">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>重新声明 JavaScript 变量</p>\n<p>如果重新声明 JavaScript 变量，该变量的值不会丢失：</p>\n<p>在以下两条语句执行后，变量 carname 的值依然是 “Volvo”：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var carname=<span class=\"string\">&quot;Volvo&quot;</span><span class=\"comment\">;</span></span><br><span class=\"line\">var carname<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure><br>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：<br><figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"symbol\">x</span>;               <span class=\"comment\">// x 为 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"symbol\">x</span> = <span class=\"number\">5</span>;           <span class=\"comment\">// 现在 x 为数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"symbol\">x</span> = <span class=\"string\">&quot;John&quot;</span>;      <span class=\"comment\">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure><br>JavaScript字符串可以使用单引号或双引号。</p>\n<p>可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var answer</span>=<span class=\"string\">&quot;It&#x27;s alright&quot;</span>;</span><br><span class=\"line\"><span class=\"attribute\">var answer</span>=<span class=\"string\">&quot;He is called &#x27;Johnny&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"attribute\">var answer</span>=<span class=\"string\">&#x27;He is called &quot;Johnny&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>JavaScript 只有一种数字类型。极大或极小的数字可以通过科学（指数）计数法来书写。<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var</span> y=<span class=\"number\">123</span>e<span class=\"number\">5</span>;      // <span class=\"number\">12300000</span></span><br><span class=\"line\"><span class=\"attribute\">var</span> z=<span class=\"number\">123</span>e-<span class=\"number\">5</span>;     // <span class=\"number\">0</span>.<span class=\"number\">00123</span></span><br></pre></td></tr></table></figure><br>JavaScript 数组<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cars=new Array()<span class=\"comment\">;</span></span><br><span class=\"line\">cars[<span class=\"number\">0</span>]=<span class=\"string\">&quot;Saab&quot;</span><span class=\"comment\">;</span></span><br><span class=\"line\">cars[<span class=\"number\">1</span>]=<span class=\"string\">&quot;Volvo&quot;</span><span class=\"comment\">;</span></span><br><span class=\"line\">cars[<span class=\"number\">2</span>]=<span class=\"string\">&quot;BMW&quot;</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var cars</span>=new Array(<span class=\"string\">&quot;Saab&quot;</span>,<span class=\"string\">&quot;Volvo&quot;</span>,<span class=\"string\">&quot;BMW&quot;</span>);</span><br><span class=\"line\"><span class=\"attribute\">var cars</span>=[<span class=\"string\">&quot;Saab&quot;</span>,<span class=\"string\">&quot;Volvo&quot;</span>,<span class=\"string\">&quot;BMW&quot;</span>];</span><br></pre></td></tr></table></figure><br>JavaScript 对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person=&#123;<span class=\"attr\">firstname:</span><span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">lastname:</span><span class=\"string\">&quot;Doe&quot;</span>, <span class=\"attr\">id:</span><span class=\"number\">5566</span>&#125;;</span><br></pre></td></tr></table></figure><br>对象属性有两种寻址方式:<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name</span>=person.lastname<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">name</span>=person[<span class=\"string\">&quot;lastname&quot;</span>]<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure><br>Undefined 这个值表示变量不含有值。</p>\n<p>可以通过将变量的值设置为 null 来清空变量。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cars</span>=null<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">person</span>=null<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</p>"},{"title":"无关紧要","date":"2020-08-16T13:17:03.000Z","password":"df13666330971","abstract":"Here's something encrypted, password is required to continue reading.","message":"Hey, password is required here.","wrong_pass_message":"Oh, this is an invalid password. Check and try again, please.","wrong_hash_message":"Oh, these decrypted content cannot be verified, but you can still have a look.","_content":"\n其实也有那么瞬间感觉我也不是那么对不起你，也许一直以来你也并没有那么坚定。\n\n分手后你可以不用删一条说说，一条朋友圈，我甚至未曾有出现过的痕迹。\n\n我太害怕失去你。\n\n我不可否认每次你把我送你的礼物说成别人送的抑或是自己花钱买的，我未曾没有过一丝失落。\n\n我不知如何表达这种情绪，我不知道这是否会让你觉得我过于计较，或是让你为难。\n\n我几乎不表达思念，即使我无时无刻不再想你。\n\n我担心在不合时宜的时间给你过多的打扰会让你厌倦，只能试图通过等待你的消息来证明自己存在的价值。\n\n每当你很长时间不理我，我只能通过晚点回你消息来表达我的不满。\n\n每次你回到家，联系频率就会少很多，似乎把我忘了。\n\n而当你回学校总是若无其事，想让我去接你。\n\n我总是纠结于你是否表达要我去接你，我要证实自己被需要，即使我很想见你。\n\n我现在也不知道我存在的意义是什么了，我有一堆想给你的东西，可现实却是我什么都没有。\n\n我一无所有，没有钱，没有房子，我甚至连快乐都给不了你，我只能给你说一些虚无缥缈的承诺。\n\n一切都不过我自己毫无意义的执念。\n\n你对未来的期许里没有我，我再多纠缠不过给你带来困扰。\n\n你有你的一年四季，我有我的春夏秋冬。\n\n我不该继续这样了，真希望如果有来生我们可以一直在一起。\n\n也许一开始你就只想陪我走一阵，而我却想着与你走一生。\n\n祝你幸福，无论陪伴你的是国家主席还是科研院士，反正不可能是我。\n\n因为害怕失去，所以不得不装作不在乎。\n\n\n","source":"_posts/曲率驱动.md","raw":"---\ntitle: 无关紧要\ndate: 2020-08-16 21:17:03\ntags: 随笔\npassword: df13666330971\nabstract: Here's something encrypted, password is required to continue reading.\nmessage: Hey, password is required here.\nwrong_pass_message: Oh, this is an invalid password. Check and try again, please.\nwrong_hash_message: Oh, these decrypted content cannot be verified, but you can still have a look.\n---\n\n其实也有那么瞬间感觉我也不是那么对不起你，也许一直以来你也并没有那么坚定。\n\n分手后你可以不用删一条说说，一条朋友圈，我甚至未曾有出现过的痕迹。\n\n我太害怕失去你。\n\n我不可否认每次你把我送你的礼物说成别人送的抑或是自己花钱买的，我未曾没有过一丝失落。\n\n我不知如何表达这种情绪，我不知道这是否会让你觉得我过于计较，或是让你为难。\n\n我几乎不表达思念，即使我无时无刻不再想你。\n\n我担心在不合时宜的时间给你过多的打扰会让你厌倦，只能试图通过等待你的消息来证明自己存在的价值。\n\n每当你很长时间不理我，我只能通过晚点回你消息来表达我的不满。\n\n每次你回到家，联系频率就会少很多，似乎把我忘了。\n\n而当你回学校总是若无其事，想让我去接你。\n\n我总是纠结于你是否表达要我去接你，我要证实自己被需要，即使我很想见你。\n\n我现在也不知道我存在的意义是什么了，我有一堆想给你的东西，可现实却是我什么都没有。\n\n我一无所有，没有钱，没有房子，我甚至连快乐都给不了你，我只能给你说一些虚无缥缈的承诺。\n\n一切都不过我自己毫无意义的执念。\n\n你对未来的期许里没有我，我再多纠缠不过给你带来困扰。\n\n你有你的一年四季，我有我的春夏秋冬。\n\n我不该继续这样了，真希望如果有来生我们可以一直在一起。\n\n也许一开始你就只想陪我走一阵，而我却想着与你走一生。\n\n祝你幸福，无论陪伴你的是国家主席还是科研院士，反正不可能是我。\n\n因为害怕失去，所以不得不装作不在乎。\n\n\n","slug":"曲率驱动","published":1,"updated":"2020-08-25T13:23:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdo000jrouj706l0fcw","content":"<div id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"Oh, these decrypted content cannot be verified, but you can still have a look.\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" id=\"hbePass\" placeholder=\"\" />\n    <label for=\"hbePass\">Hey, password is required here.</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"58e3321f1d78afd9ee099f0e06d0ce3d15e09f8d1f028defc5f7ef557bfea515\">666645beeeea5721aee53536f3794d0e1a8c34d021b46e3a6f759609fa473fee23d473092b4f639a8899ef2d9ce3a33a1a058d223205e6868160fa8a877e06325e41021cf321501d3ae3df667d4b9e245d93fa520feace262e468078e21c2e5895a43d227dd91b34ffc2b346c546c3dc285c263e0efb51540b85b141ae77324542d790217c7dd0d711e9cd281942a9592b77ae72ec9f0d672502eb7c5ee1e402bed686db033a310a1045c812f22e9cd5604fda80616c1ac9e27851389a494df492f51e588de565534b418db25e059b96bf1dd762430754c4130d8436851eb1e76b73f24248f6cf0c475b1f4e0e25367dbeee49d89ffbe409fffde26196479e9741b7e73c3464e1297ce883e9ea56f19bf23c8d634fcb9b36123fc425153c3dbf7f96fc0d036725c2a2703afd80e39c30783a7a40ebe1db68e4ed25cb68ce4754c6f1b96e17e2a7b7e627eb52592070029c3d1f58e3452568747012aedfdce1f29cfca1e590bb55624404e6442f0f79901762c1ea62309aff8b303e6ae0c81b8b5b29046ff884ec05163b3fbe78cc6ca3405eecd4fca072234cb1e47b1ae8d69094648f5100a3a6a242834daded0a82c113f768426cda499e99f90c0eb7495d9090bc27526a84cb9ec913d27414d4f266c4f25e81d4c5593b867df2250e25f5d716af56d6639651f0cbec9522bba0bd3709cbd861565894c32834e3c9b8fa4b0e7a6c05119246fca9f6ca1f85ba54a3aaac34d015487e6113776e6396f7942bcc6570f36ddba734d211d2e10f79404582838cf4af370e11da3d01508dfa28e6d942801d62ae102e744d5da3c693ec6a836d004ea01c5d6255d3d4cc439418fcd40cceaa212f2bbcca0b3b0b2e2f26c9e3b33f1d1bb30fe690963f147c4801b7dfc9340196b997dda61ed8bc0a1a01e4aa23370e8257d8d610dc1e6a63af588641b740d71acf6f320210bbdbf772145ad380a1840e775445bfe766eeea0952dd4736ac9d53b07a22037e3106a69fe44f4b164b957a2e989d61d6c37c3985714c723c0c0c02cd626e36161ba0af3e6ea80638216d3a145df59c95437006ca8df44815759ecd1ee28c1ad53ccffb06404ed8ed5a107cde2a41ef7c27d4e72bafb03f667b03d30a4bbc977d54dfd3281c77463ff82a981e91f65fc1d6cb9461ae398d20c06252a6a6570e6960dbf5ad7a3fdb0a0d31ab0d2ae77a8bef516f6c35cf5c0bc1e66e365d22701709fcf69b07f5a302e13610e45bdc30129f65dd011207e9ad1d3a3b224c8f0cf5f61b6e87b805d92b7e91f66306a78752510439c3702c2fe7a5e5255becd407c027a057cbdbd9c1d994be7ab117771565404a98696297f7f306a3050fabad5673182d242c3e79de6427f77f59d89daf0ba61e32ebfe6ac7c8ea7f130a6aafc4c39a460f64fe831a7391705f0d6b9c2db92d5a26f06fabea6474f5a9607a5e7a94f2f1f6432d7fe5250661a9220c1b0badeff9a9910ff314fe0b6c25ca6ddcf38850ca555cf49d824dc324e9ad0c11f69336840b20aa3882f204d69b21cbaef8c9d43b873cc4a279fe4baa3f0ff19688099c1a991b7637cc33511a0ff9da35dd808200daf34849ef9809f247256b88df09eadcfde67c555388491c03f229e4d3bdaac6e74f36f7313ded1f5338973bd38666e633f742475ee0dfcf509e24835662261b869306f3b3714340479ca86d50eb8177a94983557a66a6534b8bca890dd6a4616ba90819558a85236bba65a758b2b8c09fa92a8fb28ef03516fa657842c45c0c12689b8a1a42c8c78db75930be07a5340d254f424335fb059f7a765b2e89093faed26e9ff31c5a418e9b98b81dbbff6bf7c9fc642e65cc5ec6447ea12f4bfe3466245a2461be3b46905002655477c8da568a3b7a5f96defb0b7bc19114d9ee87a6af0f866a7535e6db948d89c75f656caf337963eb3d7571f0aee72b696f80c79f91015d2d8a03d0e78fadbbf2b336b9bf6e3bbd55f0998412a0886928ccdd9de7e4cb31c53db1fb21812df20e00ba24f447ac0fb715f292cd25c95148399d1f22ee8d5a70f81970af4fec99f9bbc6a2282cf9cf05fae62ac8282ff672a0b129210b3bc32c1ef2d5cd4db3e44948d59f88202b58826c8f4972903f3b31cdd0d9b805acc0641bad1c2fd4c6d95a2e4ae768115f5275cc2692db02cf8d3bdd1b9be78ced7c5a348ca2e307792079145c4cd961ec2b315d9e3f372d907dc6762c40b5ecac8cfd7b6a19a63ed145658339b5cd00901b1106ab6649228cf74cc15fc3072f6a92a7d76ac39fa3250f70d3053999cc8dfa6f7655f163325fb15b94203a4d6a46d61f259b9466dc6b34ed9fedbb07ec5711ba823f292b3d9e0c1385dfed00e978391f208e8b1cae1462d49784a91f851bc49059bf2616ff420875a0a245fe78869263ae5a5997c56a0bd9bae42389dff7725ccd054dc7a5c4cbed84a07be9a79918780eab21225cfdc8a519453b05875f7e770913188e08e2f6fa2d60ff8f9118139f202b8865e98103b69292a7d7ebd4f3cc6dba114f8f7a97abe7c76b97cac814fc0f9feb6c17d1f00cff91e36f7245090925bd50e844cce490c73a90dc13bcc8b4e931a1fe63c119d655abbb3fdfa89d30fbfe6429c240e84b9e058130e358c619838ac5bba59e470ab800e5046bd095f3667d4b2906e0a94666da55803f8608cb2d44ce9b30b541cf1bf9ad4414fd8cafc4ac613953cbbf1822370dd9b242e0c5d5ed349d32ccafb6f7aed51c2f78ba57948f334e839cd92be949f9919c1542207b0c3210b975b950d5a17cb3db985e1cfc7e86dd02c2443d185bef0bda4e9c209950fd8f54d53b6c03f68341b29e3c8b20c04c0e3bc7a8b0b71fc7de5355c1d895b87cbf7c644efa8bf5a3fcd67289414800f81eb87caca68b3f879add1d753a9ac4d9ac0a0e1c0b85373abbd2e04c9f2af2b3f958aa3c7a7b82236d3802da1c9eaf3df89828a58373a30d8441b971ca164337332b17410fd18c922f385d3a6f4435be234c71a9e07f82b48eff892ef00e3c4ed6037c4903cd432b47000b3718df3a2324f8bff241f49097f8ff66446eac26e41003f76313606851d89562f9666fbf0e157fdb6ecd8b3126737ae2923e</script>\n</div>\n<script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>其实也有那么瞬间感觉我也不是那么对不起你，也许一直以来你也并没有那么坚定。</p>\n<p>分手后你可以不用删一条说说，一条朋友圈，我甚至未曾有出现过的痕迹。</p>\n<p>我太害怕失去你。</p>\n<p>我不可否认每次你把我送你的礼物说成别人送的抑或是自己花钱买的，我未曾没有过一丝失落。</p>\n<p>我不知如何表达这种情绪，我不知道这是否会让你觉得我过于计较，或是让你为难。</p>\n<p>我几乎不表达思念，即使我无时无刻不再想你。</p>\n<p>我担心在不合时宜的时间给你过多的打扰会让你厌倦，只能试图通过等待你的消息来证明自己存在的价值。</p>\n<p>每当你很长时间不理我，我只能通过晚点回你消息来表达我的不满。</p>\n<p>每次你回到家，联系频率就会少很多，似乎把我忘了。</p>\n<p>而当你回学校总是若无其事，想让我去接你。</p>\n<p>我总是纠结于你是否表达要我去接你，我要证实自己被需要，即使我很想见你。</p>\n<p>我现在也不知道我存在的意义是什么了，我有一堆想给你的东西，可现实却是我什么都没有。</p>\n<p>我一无所有，没有钱，没有房子，我甚至连快乐都给不了你，我只能给你说一些虚无缥缈的承诺。</p>\n<p>一切都不过我自己毫无意义的执念。</p>\n<p>你对未来的期许里没有我，我再多纠缠不过给你带来困扰。</p>\n<p>你有你的一年四季，我有我的春夏秋冬。</p>\n<p>我不该继续这样了，真希望如果有来生我们可以一直在一起。</p>\n<p>也许一开始你就只想陪我走一阵，而我却想着与你走一生。</p>\n<p>祝你幸福，无论陪伴你的是国家主席还是科研院士，反正不可能是我。</p>\n<p>因为害怕失去，所以不得不装作不在乎。</p>\n","encrypt":true},{"title":"百度之星2018复赛","date":"2020-08-08T08:07:44.000Z","mathjax":true,"_content":"\n只会两道QAQ,第二题不会。[2018百度之星复赛](http://acm.hdu.edu.cn/search.php?field=problem&key=2018%A1%B0%B0%D9%B6%C8%D6%AE%D0%C7%A1%B1%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&source=1&searchmode=source)\n\n<!-- More -->\n## 没有兄弟的舞会\n\n### 题面\n度度熊、光羽、带劲三个人是好朋友。\n\n度度熊有一棵$n$个点的有根树，其中1号点为树根。除根节点之外，每个点都有父节点，记i号点的父节点为$fa[i]$。\n\n度度熊称点$i$和点$j$是**兄弟**（其中$i≠j$）当且仅当$fa[i]=fa[j]$。\n\n第$i$个点的权值为$Ai$。现要求选出一个点集，该点集合法当且仅当**点集中至多只有一对兄弟**。\n\n度度熊想知道，在所有可行的点集中，权值和**最大**以及**最小**的点集权值和分别是多少？\n\n第一行一个数，表示数据组数$T$。\n\n每组数据第一行一个整数$n$；第二行$n−1$个数，表示$fa[2],fa[3],..,fa[n]$；第三行$n$个数，表示$Ai$。\n\n数据组数$T=100$，满足：\n\n- $1 \\leq n \\leq 1e5$\n- $−1e9\\leq Ai \\leq 1e9$\n- $1 \\leq fa[i]<i$\n\n其中90%的数据满足$n \\leq 1000$。\n\n### 思路\n\n维护每个父节点直接子节点权值的正最大值，正次大值，负最小值，负次小值。最大点集权值为所有正的最大值与最大的正次大值之和，最小点集权值为所有负最小值与最小的负次小值之和。\n\n### 代码\n```\n//\n// Created by liulex on 2020/7/27.\n//\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nint fa[100005];\nint A[100005];\nint B[100005];\nint C[100005];\nint D[100005];\nint v[100005]; \nsigned main()\n{\n    int T,n;\n    scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%d\",&n);\n\n        A[0] = B[0] = C[0] = D[0] = A[1] = B[1] = C[1] = D[1] = 0;\n        for(int i = 2; i <= n; i++){\n            scanf(\"%d\",&fa[i]);\n            A[i] = B[i] = C[i] = D[i] = 0;\n        }\n        for(int i = 1; i <= n; i++){\n            scanf(\"%d\",&v[i]);\n            if(v[i] > A[fa[i]] && v[i] > 0){\n               B[fa[i]] = A[fa[i]],A[fa[i]] = v[i];\n            }else if(v[i] > B[fa[i]] && v[i] >0){\n                B[fa[i]] = v[i];\n            }else if(v[i] < C[fa[i]] &&v[i] < 0){\n                D[fa[i]] = C[fa[i]];\n                C[fa[i]] = v[i];\n            }else if(v[i] < D[fa[i]] && v[i]  < 0){\n                D[fa[i]] = v[i];\n            }\n        }\n        long long  ma = 0,mi = 0;\n        int c = 0, d = 0;\n        for(int i = 0; i <= n; i++){\n            ma += A[i];\n            mi += C[i];\n            c = max(c,B[i]);\n            d = min(d,D[i]);\n        }\n        cout<<ma+c<<' '<<mi+d<<'\\n';\n    }\n}\n```\n\n## 带劲的and和\n\n### 题面\n度度熊专门研究过“动态传递闭包问题”，他有一万种让大家爆蛋的方法；但此刻，他只想出一道简简单单的题——至繁，归于至简。\n\n度度熊有一张$n$个点$m$条边的**无向图**，第$i$个点的点权为$vi$。\n\n如果图上存在一条**路径**使得点$i$可以走到点$j$，则称$i$,$j$是**带劲**的，记$f(i,j)=1$；否则$f(i,j)=0$。显然有$f(i,j)=f(j,i)$。\n\n度度熊想知道求出：\n$\\sum_{i=1}^{n-1}\\sum_{j=i+1}^{n}f(i,j)×max(vi,vj)×(vi\\&vj)$\n\n其中&是C++中的and位运算符，如$1\\&3=1, 2\\&3=2$。\n\n请将答案对$1e9+7$取模后输出。\n\n第一行一个数，表示数据组数$T$。\n\n每组数据第一行两个整数$n,m$；第二行$n$个数表示$vi$；接下来$m$行，每行两个数u,v，表示点u和点v之间有一条无向边。**可能有重边或自环。**\n\n数据组数$T=50$，满足：\n\n- $1\\leq n,m\\leq 100000$\n- $1\\leq vi\\leq 1e9$。\n\n其中90%的数据满足$n,m\\leq 1000$。\n\n### 思路\n\n我们可以通过并查集维护任意两点连通关系。当$i,j$属于同一连通分支时，$f(i,j)=1$，我们把这一连通分支里所有顶点权值排序，从前往后遍历，不难发现对于每一个权值$vi$,\n对答案都有$v_{i}\\sum_{j=1}^{i-1}v_{i}\\&v_{j}$贡献。问题转换成了对这个求和$\\sum_{j=1}^{i-1}v_{i}\\&v_{j}$的处理，直接考虑与运算对求和没有前缀性质。\n需要用到二进制思想，维护权值的二进制每一位出现次数的前缀和，(第$k$位记为$A_{k}$)，对于当前权值$v_{i}$，如果它的二进制第$k$位为1,那么将对求和产生$A_{k}*(1<<k)$的贡献。\n\n### 代码\n\n```\n//\n// Created by liulex on 2020/7/27.\n//\n\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n#define si signed\nint v[100005];\nsi fa[100005];\nvector<int> G[100005];\nint A[33];\nsi find(si x){\n    return fa[x] = (fa[x] == x?x:find(fa[x]));\n}\nconst long long mod = 1e9+7;\nsi main()\n{\n    si T,n,m,x,y;\n    scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%d%d\",&n,&m);\n        for(int i=0;i<=30;i++)A[i] = 0;\n        for(int i = 1; i<=n; i++){\n            scanf(\"%lld\",&v[i]);\n            fa[i] = i;\n        }\n        for(int i = 1; i <= m; i ++){\n            scanf(\"%d%d\",&x,&y);\n            if(find(x) != find(y)){\n                fa[find(x)] = find(y);\n            }\n        }\n        for(int i=1;i<=n;i++){\n            G[find(i)].push_back(v[i]);\n        }\n        long long ans = 0,t;\n        for(int i=1; i <= n; i++){\n            if(G[i].size()>1){\n\n                for(int j=0;j<=30;j++)A[j] = 0;\n                sort(G[i].begin(),G[i].end());\n                for(int j=0;j<G[i].size();j++){\n                        t = 0;\n                        for(int k = 0; k <= 30; k++) {\n                            if ((G[i][j] >> k) & 1) {\n                                t += (A[k] * (1ll << k)) % mod;\n                                t %= mod;\n                                A[k]++;\n                            }\n                        }\n                        ans += (G[i][j]*t)%mod;\n                        ans %= mod;\n                }\n            }\n            if(G[i].size())\n            G[i].clear();\n        }\n        cout<<ans<<'\\n';\n    }\n}\n```","source":"_posts/百度之星2018复赛.md","raw":"---\ntitle: 百度之星2018复赛\ndate: 2020-08-08 16:07:44\ntags: 题解\nmathjax: true\n---\n\n只会两道QAQ,第二题不会。[2018百度之星复赛](http://acm.hdu.edu.cn/search.php?field=problem&key=2018%A1%B0%B0%D9%B6%C8%D6%AE%D0%C7%A1%B1%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&source=1&searchmode=source)\n\n<!-- More -->\n## 没有兄弟的舞会\n\n### 题面\n度度熊、光羽、带劲三个人是好朋友。\n\n度度熊有一棵$n$个点的有根树，其中1号点为树根。除根节点之外，每个点都有父节点，记i号点的父节点为$fa[i]$。\n\n度度熊称点$i$和点$j$是**兄弟**（其中$i≠j$）当且仅当$fa[i]=fa[j]$。\n\n第$i$个点的权值为$Ai$。现要求选出一个点集，该点集合法当且仅当**点集中至多只有一对兄弟**。\n\n度度熊想知道，在所有可行的点集中，权值和**最大**以及**最小**的点集权值和分别是多少？\n\n第一行一个数，表示数据组数$T$。\n\n每组数据第一行一个整数$n$；第二行$n−1$个数，表示$fa[2],fa[3],..,fa[n]$；第三行$n$个数，表示$Ai$。\n\n数据组数$T=100$，满足：\n\n- $1 \\leq n \\leq 1e5$\n- $−1e9\\leq Ai \\leq 1e9$\n- $1 \\leq fa[i]<i$\n\n其中90%的数据满足$n \\leq 1000$。\n\n### 思路\n\n维护每个父节点直接子节点权值的正最大值，正次大值，负最小值，负次小值。最大点集权值为所有正的最大值与最大的正次大值之和，最小点集权值为所有负最小值与最小的负次小值之和。\n\n### 代码\n```\n//\n// Created by liulex on 2020/7/27.\n//\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nint fa[100005];\nint A[100005];\nint B[100005];\nint C[100005];\nint D[100005];\nint v[100005]; \nsigned main()\n{\n    int T,n;\n    scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%d\",&n);\n\n        A[0] = B[0] = C[0] = D[0] = A[1] = B[1] = C[1] = D[1] = 0;\n        for(int i = 2; i <= n; i++){\n            scanf(\"%d\",&fa[i]);\n            A[i] = B[i] = C[i] = D[i] = 0;\n        }\n        for(int i = 1; i <= n; i++){\n            scanf(\"%d\",&v[i]);\n            if(v[i] > A[fa[i]] && v[i] > 0){\n               B[fa[i]] = A[fa[i]],A[fa[i]] = v[i];\n            }else if(v[i] > B[fa[i]] && v[i] >0){\n                B[fa[i]] = v[i];\n            }else if(v[i] < C[fa[i]] &&v[i] < 0){\n                D[fa[i]] = C[fa[i]];\n                C[fa[i]] = v[i];\n            }else if(v[i] < D[fa[i]] && v[i]  < 0){\n                D[fa[i]] = v[i];\n            }\n        }\n        long long  ma = 0,mi = 0;\n        int c = 0, d = 0;\n        for(int i = 0; i <= n; i++){\n            ma += A[i];\n            mi += C[i];\n            c = max(c,B[i]);\n            d = min(d,D[i]);\n        }\n        cout<<ma+c<<' '<<mi+d<<'\\n';\n    }\n}\n```\n\n## 带劲的and和\n\n### 题面\n度度熊专门研究过“动态传递闭包问题”，他有一万种让大家爆蛋的方法；但此刻，他只想出一道简简单单的题——至繁，归于至简。\n\n度度熊有一张$n$个点$m$条边的**无向图**，第$i$个点的点权为$vi$。\n\n如果图上存在一条**路径**使得点$i$可以走到点$j$，则称$i$,$j$是**带劲**的，记$f(i,j)=1$；否则$f(i,j)=0$。显然有$f(i,j)=f(j,i)$。\n\n度度熊想知道求出：\n$\\sum_{i=1}^{n-1}\\sum_{j=i+1}^{n}f(i,j)×max(vi,vj)×(vi\\&vj)$\n\n其中&是C++中的and位运算符，如$1\\&3=1, 2\\&3=2$。\n\n请将答案对$1e9+7$取模后输出。\n\n第一行一个数，表示数据组数$T$。\n\n每组数据第一行两个整数$n,m$；第二行$n$个数表示$vi$；接下来$m$行，每行两个数u,v，表示点u和点v之间有一条无向边。**可能有重边或自环。**\n\n数据组数$T=50$，满足：\n\n- $1\\leq n,m\\leq 100000$\n- $1\\leq vi\\leq 1e9$。\n\n其中90%的数据满足$n,m\\leq 1000$。\n\n### 思路\n\n我们可以通过并查集维护任意两点连通关系。当$i,j$属于同一连通分支时，$f(i,j)=1$，我们把这一连通分支里所有顶点权值排序，从前往后遍历，不难发现对于每一个权值$vi$,\n对答案都有$v_{i}\\sum_{j=1}^{i-1}v_{i}\\&v_{j}$贡献。问题转换成了对这个求和$\\sum_{j=1}^{i-1}v_{i}\\&v_{j}$的处理，直接考虑与运算对求和没有前缀性质。\n需要用到二进制思想，维护权值的二进制每一位出现次数的前缀和，(第$k$位记为$A_{k}$)，对于当前权值$v_{i}$，如果它的二进制第$k$位为1,那么将对求和产生$A_{k}*(1<<k)$的贡献。\n\n### 代码\n\n```\n//\n// Created by liulex on 2020/7/27.\n//\n\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n#define si signed\nint v[100005];\nsi fa[100005];\nvector<int> G[100005];\nint A[33];\nsi find(si x){\n    return fa[x] = (fa[x] == x?x:find(fa[x]));\n}\nconst long long mod = 1e9+7;\nsi main()\n{\n    si T,n,m,x,y;\n    scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%d%d\",&n,&m);\n        for(int i=0;i<=30;i++)A[i] = 0;\n        for(int i = 1; i<=n; i++){\n            scanf(\"%lld\",&v[i]);\n            fa[i] = i;\n        }\n        for(int i = 1; i <= m; i ++){\n            scanf(\"%d%d\",&x,&y);\n            if(find(x) != find(y)){\n                fa[find(x)] = find(y);\n            }\n        }\n        for(int i=1;i<=n;i++){\n            G[find(i)].push_back(v[i]);\n        }\n        long long ans = 0,t;\n        for(int i=1; i <= n; i++){\n            if(G[i].size()>1){\n\n                for(int j=0;j<=30;j++)A[j] = 0;\n                sort(G[i].begin(),G[i].end());\n                for(int j=0;j<G[i].size();j++){\n                        t = 0;\n                        for(int k = 0; k <= 30; k++) {\n                            if ((G[i][j] >> k) & 1) {\n                                t += (A[k] * (1ll << k)) % mod;\n                                t %= mod;\n                                A[k]++;\n                            }\n                        }\n                        ans += (G[i][j]*t)%mod;\n                        ans %= mod;\n                }\n            }\n            if(G[i].size())\n            G[i].clear();\n        }\n        cout<<ans<<'\\n';\n    }\n}\n```","slug":"百度之星2018复赛","published":1,"updated":"2020-08-08T08:58:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdp000mrouj4o368lyc","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>只会两道QAQ,第二题不会。<a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2018%A1%B0%B0%D9%B6%C8%D6%AE%D0%C7%A1%B1%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&amp;source=1&amp;searchmode=source\">2018百度之星复赛</a></p>\n<a id=\"more\"></a>\n<h2 id=\"没有兄弟的舞会\"><a href=\"#没有兄弟的舞会\" class=\"headerlink\" title=\"没有兄弟的舞会\"></a>没有兄弟的舞会</h2><h3 id=\"题面\"><a href=\"#题面\" class=\"headerlink\" title=\"题面\"></a>题面</h3><p>度度熊、光羽、带劲三个人是好朋友。</p>\n<p>度度熊有一棵$n$个点的有根树，其中1号点为树根。除根节点之外，每个点都有父节点，记i号点的父节点为$fa[i]$。</p>\n<p>度度熊称点$i$和点$j$是<strong>兄弟</strong>（其中$i≠j$）当且仅当$fa[i]=fa[j]$。</p>\n<p>第$i$个点的权值为$Ai$。现要求选出一个点集，该点集合法当且仅当<strong>点集中至多只有一对兄弟</strong>。</p>\n<p>度度熊想知道，在所有可行的点集中，权值和<strong>最大</strong>以及<strong>最小</strong>的点集权值和分别是多少？</p>\n<p>第一行一个数，表示数据组数$T$。</p>\n<p>每组数据第一行一个整数$n$；第二行$n−1$个数，表示$fa[2],fa[3],..,fa[n]$；第三行$n$个数，表示$Ai$。</p>\n<p>数据组数$T=100$，满足：</p>\n<ul>\n<li>$1 \\leq n \\leq 1e5$</li>\n<li>$−1e9\\leq Ai \\leq 1e9$</li>\n<li>$1 \\leq fa[i]&lt;i$</li>\n</ul>\n<p>其中90%的数据满足$n \\leq 1000$。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>维护每个父节点直接子节点权值的正最大值，正次大值，负最小值，负次小值。最大点集权值为所有正的最大值与最大的正次大值之和，最小点集权值为所有负最小值与最小的负次小值之和。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">// <span class=\"symbol\">Created</span> by liulex on <span class=\"number\">2020</span>/<span class=\"number\">7</span>/<span class=\"number\">27.</span></span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int fa[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int <span class=\"symbol\">A</span>[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int <span class=\"symbol\">B</span>[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int <span class=\"symbol\">C</span>[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int <span class=\"symbol\">D</span>[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int v[<span class=\"number\">100005</span>]; </span><br><span class=\"line\">signed main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int <span class=\"symbol\">T</span>,n;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"symbol\">T</span>);</span><br><span class=\"line\">    while(<span class=\"symbol\">T</span>--)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"symbol\">A</span>[<span class=\"number\">0</span>] = <span class=\"symbol\">B</span>[<span class=\"number\">0</span>] = <span class=\"symbol\">C</span>[<span class=\"number\">0</span>] = <span class=\"symbol\">D</span>[<span class=\"number\">0</span>] = <span class=\"symbol\">A</span>[<span class=\"number\">1</span>] = <span class=\"symbol\">B</span>[<span class=\"number\">1</span>] = <span class=\"symbol\">C</span>[<span class=\"number\">1</span>] = <span class=\"symbol\">D</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        for(int i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;fa[i]);</span><br><span class=\"line\">            <span class=\"symbol\">A</span>[i] = <span class=\"symbol\">B</span>[i] = <span class=\"symbol\">C</span>[i] = <span class=\"symbol\">D</span>[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;v[i]);</span><br><span class=\"line\">            if(v[i] &gt; <span class=\"symbol\">A</span>[fa[i]] &amp;&amp; v[i] &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"symbol\">B</span>[fa[i]] = <span class=\"symbol\">A</span>[fa[i]],<span class=\"symbol\">A</span>[fa[i]] = v[i];</span><br><span class=\"line\">            &#125;else if(v[i] &gt; <span class=\"symbol\">B</span>[fa[i]] &amp;&amp; v[i] &gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"symbol\">B</span>[fa[i]] = v[i];</span><br><span class=\"line\">            &#125;else if(v[i] &lt; <span class=\"symbol\">C</span>[fa[i]] &amp;&amp;v[i] &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"symbol\">D</span>[fa[i]] = <span class=\"symbol\">C</span>[fa[i]];</span><br><span class=\"line\">                <span class=\"symbol\">C</span>[fa[i]] = v[i];</span><br><span class=\"line\">            &#125;else if(v[i] &lt; <span class=\"symbol\">D</span>[fa[i]] &amp;&amp; v[i]  &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"symbol\">D</span>[fa[i]] = v[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long long  ma = <span class=\"number\">0</span>,mi = <span class=\"number\">0</span>;</span><br><span class=\"line\">        int c = <span class=\"number\">0</span>, d = <span class=\"number\">0</span>;</span><br><span class=\"line\">        for(int i = <span class=\"number\">0</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            ma += <span class=\"symbol\">A</span>[i];</span><br><span class=\"line\">            mi += <span class=\"symbol\">C</span>[i];</span><br><span class=\"line\">            c = max(c,<span class=\"symbol\">B</span>[i]);</span><br><span class=\"line\">            d = min(d,<span class=\"symbol\">D</span>[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;ma+c&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt;mi+d&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"带劲的and和\"><a href=\"#带劲的and和\" class=\"headerlink\" title=\"带劲的and和\"></a>带劲的and和</h2><h3 id=\"题面-1\"><a href=\"#题面-1\" class=\"headerlink\" title=\"题面\"></a>题面</h3><p>度度熊专门研究过“动态传递闭包问题”，他有一万种让大家爆蛋的方法；但此刻，他只想出一道简简单单的题——至繁，归于至简。</p>\n<p>度度熊有一张$n$个点$m$条边的<strong>无向图</strong>，第$i$个点的点权为$vi$。</p>\n<p>如果图上存在一条<strong>路径</strong>使得点$i$可以走到点$j$，则称$i$,$j$是<strong>带劲</strong>的，记$f(i,j)=1$；否则$f(i,j)=0$。显然有$f(i,j)=f(j,i)$。</p>\n<p>度度熊想知道求出：<br>$\\sum<em>{i=1}^{n-1}\\sum</em>{j=i+1}^{n}f(i,j)×max(vi,vj)×(vi\\&amp;vj)$</p>\n<p>其中&amp;是C++中的and位运算符，如$1\\&amp;3=1, 2\\&amp;3=2$。</p>\n<p>请将答案对$1e9+7$取模后输出。</p>\n<p>第一行一个数，表示数据组数$T$。</p>\n<p>每组数据第一行两个整数$n,m$；第二行$n$个数表示$vi$；接下来$m$行，每行两个数u,v，表示点u和点v之间有一条无向边。<strong>可能有重边或自环。</strong></p>\n<p>数据组数$T=50$，满足：</p>\n<ul>\n<li>$1\\leq n,m\\leq 100000$</li>\n<li>$1\\leq vi\\leq 1e9$。</li>\n</ul>\n<p>其中90%的数据满足$n,m\\leq 1000$。</p>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>我们可以通过并查集维护任意两点连通关系。当$i,j$属于同一连通分支时，$f(i,j)=1$，我们把这一连通分支里所有顶点权值排序，从前往后遍历，不难发现对于每一个权值$vi$,<br>对答案都有$v<em>{i}\\sum</em>{j=1}^{i-1}v<em>{i}\\&amp;v</em>{j}$贡献。问题转换成了对这个求和$\\sum<em>{j=1}^{i-1}v</em>{i}\\&amp;v<em>{j}$的处理，直接考虑与运算对求和没有前缀性质。<br>需要用到二进制思想，维护权值的二进制每一位出现次数的前缀和，(第$k$位记为$A</em>{k}$)，对于当前权值$v<em>{i}$，如果它的二进制第$k$位为1,那么将对求和产生$A</em>{k}*(1&lt;&lt;k)$的贡献。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by liulex on 2020/7/27.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> si signed</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> v[<span class=\"number\">100005</span>];</span><br><span class=\"line\">si fa[<span class=\"number\">100005</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">100005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> A[<span class=\"number\">33</span>];</span><br><span class=\"line\"><span class=\"function\">si <span class=\"title\">find</span><span class=\"params\">(si x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x] = (fa[x] == x?x:<span class=\"built_in\">find</span>(fa[x]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\">si <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    si T,n,m,x,y;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">30</span>;i++)A[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;v[i]);</span><br><span class=\"line\">            fa[i] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(x) != <span class=\"built_in\">find</span>(y))&#123;</span><br><span class=\"line\">                fa[<span class=\"built_in\">find</span>(x)] = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            G[<span class=\"built_in\">find</span>(i)].push_back(v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>,t;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(G[i].<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">30</span>;j++)A[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                sort(G[i].<span class=\"built_in\">begin</span>(),G[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;G[i].<span class=\"built_in\">size</span>();j++)&#123;</span><br><span class=\"line\">                        t = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= <span class=\"number\">30</span>; k++) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((G[i][j] &gt;&gt; k) &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                                t += (A[k] * (<span class=\"number\">1l</span>l &lt;&lt; k)) % mod;</span><br><span class=\"line\">                                t %= mod;</span><br><span class=\"line\">                                A[k]++;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        ans += (G[i][j]*t)%mod;</span><br><span class=\"line\">                        ans %= mod;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(G[i].<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            G[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<p>只会两道QAQ,第二题不会。<a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2018%A1%B0%B0%D9%B6%C8%D6%AE%D0%C7%A1%B1%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&amp;source=1&amp;searchmode=source\">2018百度之星复赛</a></p>","more":"<h2 id=\"没有兄弟的舞会\"><a href=\"#没有兄弟的舞会\" class=\"headerlink\" title=\"没有兄弟的舞会\"></a>没有兄弟的舞会</h2><h3 id=\"题面\"><a href=\"#题面\" class=\"headerlink\" title=\"题面\"></a>题面</h3><p>度度熊、光羽、带劲三个人是好朋友。</p>\n<p>度度熊有一棵$n$个点的有根树，其中1号点为树根。除根节点之外，每个点都有父节点，记i号点的父节点为$fa[i]$。</p>\n<p>度度熊称点$i$和点$j$是<strong>兄弟</strong>（其中$i≠j$）当且仅当$fa[i]=fa[j]$。</p>\n<p>第$i$个点的权值为$Ai$。现要求选出一个点集，该点集合法当且仅当<strong>点集中至多只有一对兄弟</strong>。</p>\n<p>度度熊想知道，在所有可行的点集中，权值和<strong>最大</strong>以及<strong>最小</strong>的点集权值和分别是多少？</p>\n<p>第一行一个数，表示数据组数$T$。</p>\n<p>每组数据第一行一个整数$n$；第二行$n−1$个数，表示$fa[2],fa[3],..,fa[n]$；第三行$n$个数，表示$Ai$。</p>\n<p>数据组数$T=100$，满足：</p>\n<ul>\n<li>$1 \\leq n \\leq 1e5$</li>\n<li>$−1e9\\leq Ai \\leq 1e9$</li>\n<li>$1 \\leq fa[i]&lt;i$</li>\n</ul>\n<p>其中90%的数据满足$n \\leq 1000$。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>维护每个父节点直接子节点权值的正最大值，正次大值，负最小值，负次小值。最大点集权值为所有正的最大值与最大的正次大值之和，最小点集权值为所有负最小值与最小的负次小值之和。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">// <span class=\"symbol\">Created</span> by liulex on <span class=\"number\">2020</span>/<span class=\"number\">7</span>/<span class=\"number\">27.</span></span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int fa[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int <span class=\"symbol\">A</span>[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int <span class=\"symbol\">B</span>[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int <span class=\"symbol\">C</span>[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int <span class=\"symbol\">D</span>[<span class=\"number\">100005</span>];</span><br><span class=\"line\">int v[<span class=\"number\">100005</span>]; </span><br><span class=\"line\">signed main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int <span class=\"symbol\">T</span>,n;</span><br><span class=\"line\">    scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"symbol\">T</span>);</span><br><span class=\"line\">    while(<span class=\"symbol\">T</span>--)&#123;</span><br><span class=\"line\">        scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"symbol\">A</span>[<span class=\"number\">0</span>] = <span class=\"symbol\">B</span>[<span class=\"number\">0</span>] = <span class=\"symbol\">C</span>[<span class=\"number\">0</span>] = <span class=\"symbol\">D</span>[<span class=\"number\">0</span>] = <span class=\"symbol\">A</span>[<span class=\"number\">1</span>] = <span class=\"symbol\">B</span>[<span class=\"number\">1</span>] = <span class=\"symbol\">C</span>[<span class=\"number\">1</span>] = <span class=\"symbol\">D</span>[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        for(int i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;fa[i]);</span><br><span class=\"line\">            <span class=\"symbol\">A</span>[i] = <span class=\"symbol\">B</span>[i] = <span class=\"symbol\">C</span>[i] = <span class=\"symbol\">D</span>[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            scanf(<span class=\"string\">&quot;%d&quot;</span>,&amp;v[i]);</span><br><span class=\"line\">            if(v[i] &gt; <span class=\"symbol\">A</span>[fa[i]] &amp;&amp; v[i] &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"symbol\">B</span>[fa[i]] = <span class=\"symbol\">A</span>[fa[i]],<span class=\"symbol\">A</span>[fa[i]] = v[i];</span><br><span class=\"line\">            &#125;else if(v[i] &gt; <span class=\"symbol\">B</span>[fa[i]] &amp;&amp; v[i] &gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"symbol\">B</span>[fa[i]] = v[i];</span><br><span class=\"line\">            &#125;else if(v[i] &lt; <span class=\"symbol\">C</span>[fa[i]] &amp;&amp;v[i] &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"symbol\">D</span>[fa[i]] = <span class=\"symbol\">C</span>[fa[i]];</span><br><span class=\"line\">                <span class=\"symbol\">C</span>[fa[i]] = v[i];</span><br><span class=\"line\">            &#125;else if(v[i] &lt; <span class=\"symbol\">D</span>[fa[i]] &amp;&amp; v[i]  &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"symbol\">D</span>[fa[i]] = v[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long long  ma = <span class=\"number\">0</span>,mi = <span class=\"number\">0</span>;</span><br><span class=\"line\">        int c = <span class=\"number\">0</span>, d = <span class=\"number\">0</span>;</span><br><span class=\"line\">        for(int i = <span class=\"number\">0</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            ma += <span class=\"symbol\">A</span>[i];</span><br><span class=\"line\">            mi += <span class=\"symbol\">C</span>[i];</span><br><span class=\"line\">            c = max(c,<span class=\"symbol\">B</span>[i]);</span><br><span class=\"line\">            d = min(d,<span class=\"symbol\">D</span>[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;ma+c&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt;mi+d&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"带劲的and和\"><a href=\"#带劲的and和\" class=\"headerlink\" title=\"带劲的and和\"></a>带劲的and和</h2><h3 id=\"题面-1\"><a href=\"#题面-1\" class=\"headerlink\" title=\"题面\"></a>题面</h3><p>度度熊专门研究过“动态传递闭包问题”，他有一万种让大家爆蛋的方法；但此刻，他只想出一道简简单单的题——至繁，归于至简。</p>\n<p>度度熊有一张$n$个点$m$条边的<strong>无向图</strong>，第$i$个点的点权为$vi$。</p>\n<p>如果图上存在一条<strong>路径</strong>使得点$i$可以走到点$j$，则称$i$,$j$是<strong>带劲</strong>的，记$f(i,j)=1$；否则$f(i,j)=0$。显然有$f(i,j)=f(j,i)$。</p>\n<p>度度熊想知道求出：<br>$\\sum<em>{i=1}^{n-1}\\sum</em>{j=i+1}^{n}f(i,j)×max(vi,vj)×(vi\\&amp;vj)$</p>\n<p>其中&amp;是C++中的and位运算符，如$1\\&amp;3=1, 2\\&amp;3=2$。</p>\n<p>请将答案对$1e9+7$取模后输出。</p>\n<p>第一行一个数，表示数据组数$T$。</p>\n<p>每组数据第一行两个整数$n,m$；第二行$n$个数表示$vi$；接下来$m$行，每行两个数u,v，表示点u和点v之间有一条无向边。<strong>可能有重边或自环。</strong></p>\n<p>数据组数$T=50$，满足：</p>\n<ul>\n<li>$1\\leq n,m\\leq 100000$</li>\n<li>$1\\leq vi\\leq 1e9$。</li>\n</ul>\n<p>其中90%的数据满足$n,m\\leq 1000$。</p>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>我们可以通过并查集维护任意两点连通关系。当$i,j$属于同一连通分支时，$f(i,j)=1$，我们把这一连通分支里所有顶点权值排序，从前往后遍历，不难发现对于每一个权值$vi$,<br>对答案都有$v<em>{i}\\sum</em>{j=1}^{i-1}v<em>{i}\\&amp;v</em>{j}$贡献。问题转换成了对这个求和$\\sum<em>{j=1}^{i-1}v</em>{i}\\&amp;v<em>{j}$的处理，直接考虑与运算对求和没有前缀性质。<br>需要用到二进制思想，维护权值的二进制每一位出现次数的前缀和，(第$k$位记为$A</em>{k}$)，对于当前权值$v<em>{i}$，如果它的二进制第$k$位为1,那么将对求和产生$A</em>{k}*(1&lt;&lt;k)$的贡献。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by liulex on 2020/7/27.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> si signed</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> v[<span class=\"number\">100005</span>];</span><br><span class=\"line\">si fa[<span class=\"number\">100005</span>];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">100005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> A[<span class=\"number\">33</span>];</span><br><span class=\"line\"><span class=\"function\">si <span class=\"title\">find</span><span class=\"params\">(si x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x] = (fa[x] == x?x:<span class=\"built_in\">find</span>(fa[x]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\">si <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    si T,n,m,x,y;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">30</span>;i++)A[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;v[i]);</span><br><span class=\"line\">            fa[i] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(x) != <span class=\"built_in\">find</span>(y))&#123;</span><br><span class=\"line\">                fa[<span class=\"built_in\">find</span>(x)] = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            G[<span class=\"built_in\">find</span>(i)].push_back(v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>,t;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(G[i].<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">30</span>;j++)A[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                sort(G[i].<span class=\"built_in\">begin</span>(),G[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;G[i].<span class=\"built_in\">size</span>();j++)&#123;</span><br><span class=\"line\">                        t = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt;= <span class=\"number\">30</span>; k++) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((G[i][j] &gt;&gt; k) &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                                t += (A[k] * (<span class=\"number\">1l</span>l &lt;&lt; k)) % mod;</span><br><span class=\"line\">                                t %= mod;</span><br><span class=\"line\">                                A[k]++;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        ans += (G[i][j]*t)%mod;</span><br><span class=\"line\">                        ans %= mod;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(G[i].<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            G[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"haskell","date":"2020-08-27T02:34:16.000Z","_content":"\n## Introduction to Haskell\n\n* Functions are first-class, that is, functions are values which can be used in exactly the same ways as any other sort of value.\n\n* The meaning of Haskell programs is centered around evaluating expressions rather than executing instructions.\n<!-- More -->\n### 安装\n```\nsudo apt-get install haskell-platform\n```\n开启交互模式\n```\nghci\n```\n`Ctrl + z` 退出交互模式\n\n导入`test.hs`文件\n```\n:l test.hs\n```\n### type\n\nGHCi is an interactive Haskell REPL (Read-Eval-Print-Loop) that comes with GHC. At the GHCi prompt, you can evaluate expressions, load Haskell files with :load (:l) (and reload them with :reload (:r)), ask for the type of an expression with :type (:t), and many other things (try :? for a list of commands).\n```\nex01 = 3 + 2\nex02 = 8 / 2 --(4.0)\nex03 = mod 19 3\nex04 = 19 `mod` 3\nex05 = 7 ^ 222\nex06 = (-3) * (-7)\n```\n* `backticks` make a function name into an infix operator.\n* negative numbers must often be surrounded by parentheses, to avoid having the negation sign parsed as subtraction.\n\n```\n-- badArith1 = i + n\n```\n* Addition is only between values of the same numeric type, Haskell does not do implicit conversion,you must explicitly convert with:\n \n  fromIntegral: converts from any integral type (Int or Integer) to any other numeric type.\n\n  round, floor, ceiling: convert floating-point numbers to Int or Integer.\n```\n-- badArith2 = i / i\n```\n* This is an error since / performs floating-point division only. For integer division we can use div.\n```\nex07 = i `div` i\n```\n\n### Boolean logic\n```\nex08 = True && False\nex09 = not (False || True)\nex10 = 2 /= 3 (/= 不等于)\n```\n*  `if-expressions`: if b then t else f\n\nthe else part is required for an if-expression, since the if-expression must result in some value. \n\n### function\n\n* function application has higher precedence than any infix operators\n\n### List\n\n```\nhello1 :: [Char]\nhello1 = ['h', 'e', 'l', 'l', 'o']\n\nhello2 :: String\nhello2 = \"hello\"\n\nhelloSame = hello1 == hello2\n```\n\n##  Algebraic Data Types \n\n### Enumeration types\n```\ndata Thing = Shoe \n           | Ship \n           | SealingWax \n           | Cabbage \n           | King\n  deriving Show\n```\n* The deriving Show is a magical incantation which tells GHC to automatically generate default code for converting Things to Strings.\n```\nshoe :: Thing\nshoe = Shoe\n\nlistO'Things :: [Thing]\nlistO'Things = [Shoe, SealingWax, King, Cabbage, King]\n```\n\n* We can write functions on Things by pattern-matching.\n```\nisSmall :: Thing -> Bool\nisSmall Shoe       = True\nisSmall Ship       = False\nisSmall SealingWax = True\nisSmall Cabbage    = True\nisSmall King       = False\n```\nor\n```\nisSmall2 :: Thing -> Bool\nisSmall2 Ship = False\nisSmall2 King = False\nisSmall2 _    = True\n```\n\n### Beyond enumerations\n```\ndata FailableDouble = Failure\n                    | OK Double\n  deriving Show\n```\n```\nex01 = Failure\nex02 = OK 3.4\n```\n```\nsafeDiv :: Double -> Double -> FailableDouble\nsafeDiv _ 0 = Failure\nsafeDiv x y = OK (x / y)\n```\n```\nfailureToZero :: FailableDouble -> Double\nfailureToZero Failure = 0\nfailureToZero (OK d)  = d\n```\n\n* Data constructors can have more than one argument.\n```\n-- Store a person's name, age, and favourite Thing.\ndata Person = Person String Int Thing\n  deriving Show\n\nbrent :: Person\nbrent = Person \"Brent\" 31 SealingWax\n\nstan :: Person\nstan  = Person \"Stan\" 94 Cabbage\n\ngetAge :: Person -> Int\ngetAge (Person _ a _) = a\n```\n\n* the type constructor and data constructor are both named Person.\n\n### Algebraic data types in general\n\n```\ndata AlgDataType = Constr1 Type11 Type12\n                 | Constr2 Type21\n                 | Constr3 Type31 Type32 Type33\n                 | Constr4\n```\n\n* This specifies that a value of type AlgDataType can be constructed in one of four ways.\n\n*  type and data constructor names must always start with a capital letter; variables (including names of functions) must always start with a lowercase letter.\n\n### Pattern-matching\n\nWe could write something like\n```\nfoo (Constr1 a b)   = ...\nfoo (Constr2 a)     = ...\nfoo (Constr3 a b c) = ...\nfoo Constr4         = ...\n```\n\n* parentheses are required around patterns consisting of more than just a single constructor.\n\n* An underscore _ can be used as a “wildcard pattern” which matches anything.\n\n* A pattern of the form x@pat can be used to match a value against the pattern pat, but also give the name x to the entire value being matched. For example:\n```\nbaz :: Person -> String\nbaz p@(Person n _ _) = \"The name field of (\" ++ show p ++ \") is \" ++ n\n\n*Main> baz brent\n\"The name field of (Person \\\"Brent\\\" 31 SealingWax) is Brent\"\n```\n\n* 字符串用++连接\n\n* Patterns can be nested. For example:\n```\ncheckFav :: Person -> String\ncheckFav (Person n _ SealingWax) = n ++ \", you're my kind of person!\"\ncheckFav (Person n _ _)          = n ++ \", your favorite thing is lame.\"\n\n*Main> checkFav brent\n\"Brent, you're my kind of person!\"\n*Main> checkFav stan\n\"Stan, your favorite thing is lame.\"\n```\n\nIn general, the following grammar defines what can be used as a pattern:\n\n```\npat ::= _\n     |  var\n     |  var @ ( pat )\n     |  ( Constructor pat1 pat2 ... patn )\n```\n\n### Case expressions\n```\ncase exp of\n  pat1 -> exp1\n  pat2 -> exp2\n  ...\n```\nlike this:\n```\nex03 = case \"Hello\" of\n           []      -> 3\n           ('H':s) -> length s\n           _       -> 7\n```\n\n### Recursive data types\n\n* A list is either empty, or a single element followed by a remaining list.\n\n```\ndata IntList = Empty | Cons Int IntList\n```\n* Use recursive functions to process recursive data types.\n```\nintListProd :: IntList -> Int\nintListProd Empty      = 1\nintListProd (Cons x l) = x * intListProd l\n```\n* we can define a type of binary trees with an Int value stored at each internal node, and a Char stored at each leaf:\n```\ndata Tree = Leaf Char\n          | Node Tree Int Tree\n  deriving Show\n```\n\n## Haskell Prelude function\n\n### 乘方函数\n* ^ 的底数可为小数，也可为整数，指数是正整数；\n* ^^ 的底数是小数，指数是任意整数；\n* ** 的底数和指数都是小数)\n\n### 数值函数\n* signum 取符号 `signum (-3) == -1`\n* negate 相反数 `negate (-1) == 1`\n* abs 绝对值 \n* recip 倒数\n* floor 向下取整\n* ceiling 向上取整\n* round 四舍五入\n* truncate 取整\n* exp e的次幂\n* subtract 减去 `subtract 3 5 == 2`\n* gcd lcm\n* sqrt\n* max min\n* compare 比较 `compare 3 5 == LT` `compare 5 3 == GT` `compare 5 5 == EQ`\n\n### 三角函数\n* pi\n* sin cos\n* tan \n* asin acos\n* atan atan2\n* sinh cosh tanh asinh acosh atanh\n\n### 对数函数\n* log     exp为底\n* logBase `logBase 10 10 == 1.0`\n\n### 判断奇偶\n* odd even\n\n### pair函数\n* fst snd\n\n### 列表函数\n* (!!) 获取列表第几个元素 `[0,1,2,3] !! 1 == 1`\n* lookup `lookup 2 [(1, 'a'), (2, 'b'), (3, 'c')]== 'b'` 获取列表中第一个元素为2的元组中第二个元素\n* elem notElem 判断元素是否在列表中 `elem 2 [1,2,3] == True`\n* null 判断列表是否为空 `null [] == True`\n* and or 用于Bool列表 `and [False,True,True] == False`\n* all any 判断列表是否所有(存在)元素满足条件 `all even [2,3,4] == False`\n* (++) 列表连接\n* length 求列表长度\n* head 列表第一个元素\n* tail 取列表除了第一个元素的所有元素\n* last 取列表最后一个元素\n* init 取列表除最后一个元素\n* reverse 列表反转\n* cycle 反复出现列表\n* repeat 反复出现某一值\n* replicate 重复出现某一值一定次数 `replicate 3 1 == [1,1,1]`\n* take `take 2 [1, 2, 3, 4] == [1,2]` 取列表前两个元素\n* drop `drop 2 [1, 2, 3, 4] == [3,4]` 去除列表前两个元素\n* splitAt `splitAt 1 [1,2,3,4] == ([1],[2,3,4])`分割列表\n* takeWhile `takeWhile even [2, 4, 5] == [2,4]` `takeWhile odd [2, 4, 5] == []` 获取满足某一条件的前几个元素\n* dropWhile `dropWhile odd [2, 4, 5] == [5]` `dropWhile odd [2, 4, 5] == [2,4,5]`丢弃满足某一条件的前几个元素\n* span `span even [2, 4, 5] == ([2,4],[5])` 分割列表，规则同 takeWhile\n* break `break odd [2, 4, 5] == ([2,4],[5])`分割列表，规则同 dropWhile\n* maximum 列表最大元素\n* minimum\n* sum\n* product 列表元素乘积\n* enumFrom `enumFrom 2 == [2,3,4,...]`\n* enumFromThen `enumFromThen 5 3 == [5,3,1,-1,...]`\n* enumFromThenTo `enumFromThenTo 5 3 1 == [5,3,1]`\n* enumFromTo `enumFromTo 3 5 == [3,4,5]` `enumFromTo 3 1 == []`\n* show `show [2,3] == \"[2,3]\"` `show \"2\" == \"\\\"2\\\"\"`\n* read `read \"233\"::Int == 233` `read \"12\"::Double == 12.0`\n* iterate creates an infinite list where the first item is calculated by applying the function on the second argument, the second item by applying the function on the previous result and so on.\n` take 4 (iterate (2*) 1) == [1,2,4,8]` `take 4 (iterate (\\x -> (x+3)*2) 1) == [1,8,22,50]`\n* until applies a function which is passed as the second argument to the third argument and it comapares the result with the condition, if the condition evaluates to True, it prints the result, if not, it passes the result to the finction and repeats the cycle as long as the condition is matched\n`until (> 100) (*2) 1 == 128` `until odd ( `div` 2) 400 == 25`\n* zip `zip [1, 2] [4, 5] = [(1,4),(2,5)]`\n* zip3 `zip3 [1, 2] [4, 5] [7, 8] = [(1,4,7),(2,5,8)]`\n* zipWith `zipWith (+) [1, 2, 3] [4, 5, 6] = [5,7,9]`\n* zipWith3 `zipWith3 (\\x y z -> x + y + z) [1, 2, 3] [4, 5, 6] [7, 8, 9] == [12,15,18]`\n* unzip `unzip [(1, 4), (2, 5), (3, 6)] == ([1,2,3],[4,5,6])`\n* unzip3 `unzip3 [(1, 4, 7), (2, 5, 8), (3, 6, 9)] == ([1,2,3],[4,5,6],[7,8,9])`\n\n\n#### String\n* lines 分割行 `lines \"abc\\n123\\ndef\\n\" == [\"abc\",\"123\",\"def\"]`\n* words 分割单词 ` words \"abc\\n123 def\\t\" == [\"abc\",\"123\",\"def\"]`\n* unlines 合并行 `unlines [\"a\",\"b\",\"c\"] == \"a\\nb\\nc\\n\"`\n* unwords 合并单词 `unwords [\"a\",\"b\"] == \"a b\"`\n\n### 其他\n* (.) 函数复合 (f.g) x == f(g x)\n* ($) apply 函数，通常是为了省写括号\n`(map Char.toUpper . filter Char.isLower) \"ABCdef\" == \"DEF\"`\n`map Char.toUpper . filter Char.isLower $ \"ABCdef\" == \"DEF\"`\n\n## Recursion patterns, polymorphism, and the Prelude\n\n### Recursion patterns\n\n#### Map\n```\nls = [1,2,3]\naddOne x = x+1\nmap addOne ls\n```\n\n#### Filter\nWhen we want to keep only some elements of a list, and throw others away, based on a test.\n\n#### Fold\n“summarize” the elements of the list\n\n### Polymorphism\n\n#### Polymorphic data types\nFirst, let’s see how to declare a polymorphic data type.\n```haskell\ndata List t = E | C t (List t)\n```\n非泛型\n```haskell\ndata IntList = Empty | Cons Int IntList\n  deriving Show\n```\n* We have data List t = ... The t is a type variable which can stand for any type. \n* data List t = ... means that the List type is parameterized by a type, in much the same way that a function can be parameterized by some input.\n```\nlst1 :: List Int\nlst1 = C 3 (C 5 (C 2 E))\n\nlst2 :: List Char\nlst2 = C 'x' (C 'y' (C 'z' E))\n\nlst3 :: List Bool\nlst3 = C True (C False E)\n```\n\n#### Polymorphic functions\n```haskell\nfilterList :: (t -> Bool) -> List t -> List t    \nfilterList _ E = E\nfilterList p (C x xs)\n  | p x       = C x (filterList p xs)\n  | otherwise = filterList p xs\n```\n```haskell\nmapList :: (a -> b) -> List a -> List b\nmapList _ E        = E\nmapList f (C x xs) = C (f x) (mapList f xs)\n```\n\n### The Prelude\n\n#### Maybe\n```\ndata Maybe a = Nothing | Just a\n```\n* A value of type Maybe a either contains a value of type a (wrapped in the Just constructor), or it is Nothing (representing some sort of failure or error). The Data.Maybe module has functions for working with Maybe values.\n\n```\nmaybe False odd (Just 3) == True\n```\n\n#### Total and partial functions\n\n* Functions which have certain inputs that will make them recurse infinitely are also called partial.\n* Functions which are well-defined on all possible inputs are known as total functions.\n* head is what is known as a partial function: there are certain inputs for which head will crash.\n* tail, init, last, and (!!) are partial functions\n```\nhead([])\n*** Exception: Prelude.head: empty list\n```\n#### Replacing partial functions\nReplace\n```\ndoStuff1 :: [Int] -> Int\ndoStuff1 []  = 0\ndoStuff1 [_] = 0\ndoStuff1 xs  = head xs + (head (tail xs)) \n```\nas\n```\ndoStuff2 :: [Int] -> Int\ndoStuff2 []        = 0\ndoStuff2 [_]       = 0\ndoStuff2 (x1:x2:_) = x1 + x2\n```\n\n### Writing partial functions\n\nWhat if you find yourself writing a partial functions?\n\n#### Change the output type of the function to indicate the possible failure.\n\n```\ndata Maybe a = Nothing | Just a\n```\nWe could rewrite `head` safely like this\n```\nsafeHead :: [a] -> Maybe a\nsafeHead []    = Nothing\nsafeHead (x:_) = Just x\n```\n#### if some condition is really guaranteed, then the types ought to reflect the guarantee! Then the compiler can enforce your guarantees for you.\n```\ndata NonEmptyList a = NEL a [a]\n\nnelToList :: NonEmptyList a -> [a]\nnelToList (NEL x xs) = x:xs\n\nlistToNel :: [a] -> Maybe (NonEmptyList a)\nlistToNel []     = Nothing\nlistToNel (x:xs) = Just $ NEL x xs\n\nheadNEL :: NonEmptyList a -> a\nheadNEL (NEL a _) = a\n\ntailNEL :: NonEmptyList a -> [a]\ntailNEL (NEL _ as) = as\n```\n\n## Higher-order programming and type inference\n\n### Anonymous functions\n\n```haskell\ngt100 :: Integer -> Bool\ngt100 x = x > 100\n\ngreaterThan100 :: [Integer] -> [Integer]\ngreaterThan100 xs = filter gt100 xs\n```\nanonymous function:\n```haskell\ngreaterThan100_2 :: [Integer] -> [Integer]\ngreaterThan100_2 xs = filter (\\x -> x > 100) xs\n```\n* \\x -> x > 100 (the backslash is supposed to look kind of like a lambda with the short leg missing) is the function which takes a single argument x and outputs whether x is greater than 100.\n* lambda abstractions can also have multiple arguments.\n```\n(\\x y z -> [x,2*y,3*z]) 5 6 3 == [5,12,9]\n```\n*  if ? is an operator, then (?y) is equivalent to the function \\x -> x ? y, and (y?) is equivalent to \\x -> y ? x.\n```\n(>100) 102 == True\n(100>) 102 == False\n```\n`(- 1) 2`不可行？ \n\n### Function composition\n``` \nfoo :: (b -> c) -> (a -> b) -> (a -> c)\nfoo f g = \\x -> f (g x)\n```\n* foo is really called (.), and represents function composition. That is, if f and g are functions, then f . g is the function which does first g and then f.\n\n```\nmyTest :: [Integer] -> Bool\nmyTest xs = even (length (greaterThan100 xs))\n```\nWe can rewrite this as:\n```\nmyTest :: [Integer] -> Bool\nmyTest xs = even.length.greaterThan100 xs\n```\n```\nPrelude> :t (.)\n(.) :: (b -> c) -> (a -> b) -> a -> c\n```\n\n### Currying and partial application\n```\nf :: Int -> Int -> Int\nf x y = 2*x + y\n```\nequivalently write f’s type like this:\n```\nf' :: Int -> (Int -> Int)\nf' x y = 2*x + y\n```\n* representing multi-argument functions as one-argument functions returning functions\n* If we want to actually represent a function of two arguments we can use a single argument which is a tuple.\n```\nf'' :: (Int,Int) -> Int\nf'' (x,y) = 2*x + y\n```\n* In order to convert between the two representations of a two-argument function, the standard library defines functions called curry and uncurry, defined like this\n```\nschönfinkel :: ((a,b) -> c) -> a -> b -> c\nschönfinkel f x y = f (x,y)\n\nunschönfinkel :: (a -> b -> c) -> (a,b) -> c\nunschönfinkel f (x,y) = f x y\n```\n* uncurry in particular can be useful when you have a pair and want to apply a function to it. For example:\n```\nPrelude> uncurry (+) (2,3)\n5\n```\n#### Partial application\n\n* In Haskell there are no functions of multiple arguments! \n* Every function can be “partially applied” to its first (and only) argument, resulting in a function of the remaining arguments.\n* Haskell doesn’t make it easy to partially apply to an argument other than the first. \n* he one exception is infix operators, which as we’ve seen, can be partially applied to either of their two arguments using an operator section. \n\n#### Wholemeal programming\n```\nfoobar :: [Integer] -> Integer\nfoobar []     = 0\nfoobar (x:xs)\n  | x > 3     = (7*x + 2) + foobar xs\n  | otherwise = foobar xs\n```\n```\nfoobar' :: [Integer] -> Integer\nfoobar' = sum . map (\\x -> 7*x + 2) . filter (>3)\n```\n\n### Folds\nWe have one more recursion pattern on lists to talk about: folds. \nall of them somehow “combine” the elements of the list into a final answer.\n\n```haskell\nsum' :: [Integer] -> Integer\nsum' []     = 0\nsum' (x:xs) = x + sum' xs\n\nproduct' :: [Integer] -> Integer\nproduct' [] = 1\nproduct' (x:xs) = x * product' xs\n\nlength' :: [a] -> Int\nlength' []     = 0\nlength' (_:xs) = 1 + length' xs\n``` \n\ndefine higher-order functions:\n\n\n```haskell\nfold :: b -> (a -> b -> b) -> [a] -> b\nfold z f []     = z\nfold z f (x:xs) = f x (fold z f xs)\n```\n\n\n```haskell\nfold f z [a,b,c] == a `f` (b `f` (c `f` z))\n```\n\n\n```haskell\nsum''     = fold 0 (+)\nproduct'' = fold 1 (*)\nlength''  = fold 0 (\\_ s -> 1 + s)\n\n(Instead of (\\_ s -> 1 + s) we could also write (\\_ -> (1+)) or even (const (1+)).)\n```\n\n*  fold is already provided in the standard Prelude, under the name foldr\nHere are some Prelude functions which are defined in terms of foldr:\n\n```haskell\nlength :: [a] -> Int\nsum :: Num a => [a] -> a\nproduct :: Num a => [a] -> a\nand :: [Bool] -> Bool\nor :: [Bool] -> Bool\nany :: (a -> Bool) -> [a] -> Bool\nall :: (a -> Bool) -> [a] -> Bool\n```\n\n\n* There is also foldl, which folds “from the left”. \n\n\n```haskell\nfoldr f z [a,b,c] == a `f` (b `f` (c `f` z))\nfoldl f z [a,b,c] == ((z `f` a) `f` b) `f` c\n```\n\n* you should use foldl' from Data.List instead, which does the same thing as foldl but is more efficient.\n\n\n## More polymorphism and type classes\n\n### Parametricity\n\n```\nf :: a -> a -> a\nf x y = x && y\n```\n\nThe reason this doesn’t work is that the caller of a polymorphic function gets to choose the type. Here we, the implementors, have tried to choose a specific type (namely, Bool), but we may be given String, or Int, or even some type defined by someone using f, which we can’t possibly know about in advance. In other words, you can read the type\n```\na -> a -> a\n```\nas a promise that a function with this type will work no matter what type the caller chooses.\n\n### Two views on parametricity\n\n```\n(==) :: Eq a   => a -> a -> Bool\n(<)  :: Ord a  => a -> a -> Bool\nshow :: Show a => a -> String\n```\n### Type classes\n\n* Num, Eq, Ord, and Show are type classes, and we say that (==), (<), and (+) are “type-class polymorphic”.\n* Intuitively, type classes correspond to sets of types which have certain operations defined for them, and type class polymorphic functions work only for types which are instances of the type class(es) in question.\n```\nclass Eq a where\n  (==) :: a -> a -> Bool\n  (/=) :: a -> a -> Bool\n```\n* Eq is declared to be a type class with a single parameter, a.\n* Any type a which wants to be an instance of Eq must define two functions, (==) and (/=), with the indicated type signatures.\n\n```\n(==) :: Eq a => a -> a -> Bool\n```\n* The Eq a that comes before the => is a type class constraint.\n* We can read this as saying that for any type a, as long as a is an instance of Eq, (==) can take two values of type a and return a Bool.\n* Let’s make our own type and declare an instance of Eq for it. \n```\ndata Foo = F Int | G Char\n\ninstance Eq Foo where\n  (F i1) == (F i2) = i1 == i2\n  (G c1) == (G c2) = c1 == c2\n  _ == _ = False\n\n  foo1 /= foo2 = not (foo1 == foo2)\n```\n* the Eq class is actually declared like this:\n```\nclass Eq a where\n  (==), (/=) :: a -> a -> Bool\n  x == y = not (x /= y)\n  x /= y = not (x == y)\n```\nThis means that when we make an instance of Eq, we can define either (==) or (/=), whichever is more convenient; \n\n* As it turns out, Eq (along with a few other standard type classes) is special: GHC is able to automatically generate instances of Eq for us. Like so:\n```\ndata Foo' = F' Int | G' Char\n  deriving (Eq, Ord, Show)\n```\nThis tells GHC to automatically derive instances of the Eq, Ord, and Show type classes for our data type Foo.\n\n#### Type classes and Java interfaces\n\n* Both define a set of types/classes which implement a specified list of operations.\n\n1. When a Java class is defined, any interfaces it implements must be declared. Type class instances, on the other hand, are declared separately from the declaration of the corresponding types, and can even be put in a separate module.\n2. The types that can be specified for type class methods are more general and flexible than the signatures that can be given for Java interface methods, especially when multi-parameter type classes enter the picture. For example, consider a hypothetical type class\n```\nclass Blerg a b where\n  blerg :: a -> b -> Bool\n```\nUsing blerg amounts to doing multiple dispatch: which implementation of blerg the compiler should choose depends on both the types a and b. There is no easy way to do this in Java.\nHaskell type classes can also easily handle binary (or ternary, or …) methods, as in\n```\nclass Num a where\n  (+) :: a -> a -> a\n```\nThere is no nice way to do this in Java: for one thing, one of the two arguments would have to be the “privileged” one which is actually getting the (+) method invoked on it, and this asymmetry is awkward. Furthermore, because of Java’s subtyping, getting two arguments of a certain interface type does not guarantee that they are actually the same type, which makes implementing binary operators such as (+) awkward (usually requiring some runtime type checks).\n\n#### Standard type classes\n* Ord is for types whose elements can be totally ordered, that is, where any two elements can be compared to see which is less than the other. It provides comparison operations like (<) and (<=), and also the compare function.\n* Num is for “numeric” types, which support things like addition, subtraction, and multipication. One very important thing to note is that integer literals are actually type class polymorphic:\n```\nPrelude> :t 5\n5 :: Num a => a\n```\nThis means that literals like 5 can be used as Ints, Integers, Doubles, or any other type which is an instance of Num (Rational, Complex Double, or even a type you define…)\n* Show defines the method show, which is used to convert values into Strings.\n* Read is the dual of Show.\n* Integral represents whole number types such as Int and Integer.\n\n#### A type class example\n```\nclass Listable a where\n  toList :: a -> [Int]\n```\nWe can think of Listable as the class of things which can be converted to a list of Ints. Look at the type of toList:\n```\ntoList :: Listable a => a -> [Int]\n```\nFirst, an Int can be converted to an [Int] just by creating a singleton list, and Bool can be converted similarly, say, by translating True to 1 and False to 0:\n```haskell\ninstance Listable Int where\n  -- toList :: Int -> [Int]\n  toList x = [x]\n\ninstance Listable Bool where\n  toList True  = [1]\n  toList False = [0]\n```\nWe don’t need to do any work to convert a list of Int to a list of Int:\n```haskell\ninstance Listable [Int] where\n    toList = id\n```\nFinally, here’s a binary tree type which we can convert to a list by flattening:\n```haskell\ndata Tree a = Empty | Node a (Tree a) (Tree a)\ninstance Listable (Tree Int) where\n    toList Node(x,l,r) = toList l ++ [x] ++ toList r\n```\nIf we implement other functions in terms of toList, they also get a Listable constraint. \n```haskell\nsumL x = sum (toList x)\n```\n\nghci informs us that type type of sumL is\n```haskell\nsumL :: Listable a => a -> Int\n```\n\n```haskell\nfoo x y = sum (toList x) == sum (toList y) || x < y\n```\ntype foo:\n```haskell\nfoo :: (Listable a,Ord a) => a -> a -> Bool\n```\n\n```\ninstance (Listable a, Listable b) => Listable (a,b) where\n  toList (x,y) = toList x ++ toList y\n```\nNotice how we can put type class constraints on an instance as well as on a function type. This says that a pair type (a,b) is an instance of Listable as long as a and b both are. Then we get to use toList on values of types a and b in our definition of toList for a pair. Note that this definition is not recursive! The version of toList that we are defining is calling other versions of toList, not itself.\n\n## Lazy evaluation\n\n### Strict evaluation\n* Under a strict evaluation strategy, function arguments are completely evaluated before passing them to the function.\n* The benefit of strict evaluation is that it is easy to predict when and in what order things will happen. \n\n### Side effects and purity\n### Lazy evaluation\n* Under a lazy evaluation strategy, evaluation of function arguments is delayed as long as possible: they are not evaluated until it actually becomes necessary to do so. \n* When some expression is given as an argument to a function, it is simply packaged up as an unevaluated expression (called a “thunk”, don’t ask me why) without doing any actual work.\n### Pattern matching drives evaluation\n\n```haskell\nf1 :: Maybe a -> [Maybe a]\nf1 m = [m,m]\n\nf2 :: Maybe a -> [a]\nf2 Nothing  = []\nf2 (Just x) = [x]\n```\n* f1 uses its argument m, it does not need to know anything about it. m can remain completely unevaluated, and the unevaluated expression is simply put in a list. \n* f2, on the other hand, needs to know something about its argument in order to proceed: was it constructed with Nothing or Just.\n* The other important thing to note is that thunks are evaluated only enough to allow a pattern match to proceed, and no further!\n* suppose we wanted to evaluate f2 (safeHead [3^500, 49]). f2 would force evaluation of the call to safeHead [3^500, 49], which would evaluate to Just (3^500)—note that the 3^500 is not evaluated\n\n`Expressions are only evaluated when pattern-matched`\n\n`…only as far as necessary for the match to proceed, and no farther!`\n### Consequences\n#### Purity\n#### Understanding space usage\n```\n-- Standard library function foldl, provided for reference\nfoldl :: (b -> a -> b) -> b -> [a] -> b\nfoldl _ z []     = z\nfoldl f z (x:xs) = foldl f (f z x) xs\n```\n```\n  foldl (+) 0 [1,2,3]\n= foldl (+) (0+1) [2,3]\n= foldl (+) ((0+1)+2) [3]\n= foldl (+) (((0+1)+2)+3) []\n= (((0+1)+2)+3)\n= ((1+2)+3)\n= (3+3)\n= 6\n```\nSince the value of the accumulator is not demanded until recursing through the entire list, the accumulator simply builds up a big unevaluated expression (((0+1)+2)+3), which finally gets reduced to a value at the end.\n* One is that it’s simply inefficient: there’s no point in transferring all the numbers from the list into a different list-like thing (the accumulator thunk) before actually adding them up. \n* The second problem is more subtle, and more insidious: evaluating the expression (((0+1)+2)+3) actually requires pushing the 3 and 2 onto a stack before being able to compute 0+1 and then unwinding the stack, adding along the way. \nfor very long lists it’s a big problem: there is usually not as much space available for the stack, so this can lead to a stack overflow.\n* The solution in this case is to use the foldl' function instead of foldl, which adds a bit of strictness\n#### Short-circuiting operators\n```\n(&&) :: Bool -> Bool -> Bool\nTrue  && x = x\nFalse && _ = False\n```\n#### User-defined control structures\nIn Haskell, however, we can define if as a library function!\n```\nif' :: Bool -> a -> a -> a\nif' True  x _ = x\nif' False _ y = y\n```\n#### Infinite data structures\n#### Pipelining/wholemeal programming\n\n#### Dynamic programming\n\nUsing lazy evaluation we can get the Haskell runtime to work out the proper order of evaluation for us! For example, here is some Haskell code to solve the 0-1 knapsack problem.\n```\nimport Data.Array\n\nknapsack01 :: [Double]   -- values \n           -> [Integer]  -- nonnegative weights\n           -> Integer    -- knapsack size\n           -> Double     -- max possible value\nknapsack01 vs ws maxW = m!(numItems-1, maxW)\n  where numItems = length vs\n        m = array ((-1,0), (numItems-1, maxW)) $\n              [((-1,w), 0) | w <- [0 .. maxW]] ++\n              [((i,0), 0) | i <- [0 .. numItems-1]] ++\n              [((i,w), best) \n                  | i <- [0 .. numItems-1]\n                  , w <- [1 .. maxW]\n                  , let best\n                          | ws!!i > w  = m!(i-1, w)\n                          | otherwise = max (m!(i-1, w)) \n                                            (m!(i-1, w - ws!!i) + vs!!i)\n              ]\n\nexample = knapsack01 [3,4,5,8,10] [2,3,4,5,9] 20\n```","source":"_posts/haskell.md","raw":"---\ntitle: haskell\ndate: 2020-08-27 10:34:16\ntags: haskell\n---\n\n## Introduction to Haskell\n\n* Functions are first-class, that is, functions are values which can be used in exactly the same ways as any other sort of value.\n\n* The meaning of Haskell programs is centered around evaluating expressions rather than executing instructions.\n<!-- More -->\n### 安装\n```\nsudo apt-get install haskell-platform\n```\n开启交互模式\n```\nghci\n```\n`Ctrl + z` 退出交互模式\n\n导入`test.hs`文件\n```\n:l test.hs\n```\n### type\n\nGHCi is an interactive Haskell REPL (Read-Eval-Print-Loop) that comes with GHC. At the GHCi prompt, you can evaluate expressions, load Haskell files with :load (:l) (and reload them with :reload (:r)), ask for the type of an expression with :type (:t), and many other things (try :? for a list of commands).\n```\nex01 = 3 + 2\nex02 = 8 / 2 --(4.0)\nex03 = mod 19 3\nex04 = 19 `mod` 3\nex05 = 7 ^ 222\nex06 = (-3) * (-7)\n```\n* `backticks` make a function name into an infix operator.\n* negative numbers must often be surrounded by parentheses, to avoid having the negation sign parsed as subtraction.\n\n```\n-- badArith1 = i + n\n```\n* Addition is only between values of the same numeric type, Haskell does not do implicit conversion,you must explicitly convert with:\n \n  fromIntegral: converts from any integral type (Int or Integer) to any other numeric type.\n\n  round, floor, ceiling: convert floating-point numbers to Int or Integer.\n```\n-- badArith2 = i / i\n```\n* This is an error since / performs floating-point division only. For integer division we can use div.\n```\nex07 = i `div` i\n```\n\n### Boolean logic\n```\nex08 = True && False\nex09 = not (False || True)\nex10 = 2 /= 3 (/= 不等于)\n```\n*  `if-expressions`: if b then t else f\n\nthe else part is required for an if-expression, since the if-expression must result in some value. \n\n### function\n\n* function application has higher precedence than any infix operators\n\n### List\n\n```\nhello1 :: [Char]\nhello1 = ['h', 'e', 'l', 'l', 'o']\n\nhello2 :: String\nhello2 = \"hello\"\n\nhelloSame = hello1 == hello2\n```\n\n##  Algebraic Data Types \n\n### Enumeration types\n```\ndata Thing = Shoe \n           | Ship \n           | SealingWax \n           | Cabbage \n           | King\n  deriving Show\n```\n* The deriving Show is a magical incantation which tells GHC to automatically generate default code for converting Things to Strings.\n```\nshoe :: Thing\nshoe = Shoe\n\nlistO'Things :: [Thing]\nlistO'Things = [Shoe, SealingWax, King, Cabbage, King]\n```\n\n* We can write functions on Things by pattern-matching.\n```\nisSmall :: Thing -> Bool\nisSmall Shoe       = True\nisSmall Ship       = False\nisSmall SealingWax = True\nisSmall Cabbage    = True\nisSmall King       = False\n```\nor\n```\nisSmall2 :: Thing -> Bool\nisSmall2 Ship = False\nisSmall2 King = False\nisSmall2 _    = True\n```\n\n### Beyond enumerations\n```\ndata FailableDouble = Failure\n                    | OK Double\n  deriving Show\n```\n```\nex01 = Failure\nex02 = OK 3.4\n```\n```\nsafeDiv :: Double -> Double -> FailableDouble\nsafeDiv _ 0 = Failure\nsafeDiv x y = OK (x / y)\n```\n```\nfailureToZero :: FailableDouble -> Double\nfailureToZero Failure = 0\nfailureToZero (OK d)  = d\n```\n\n* Data constructors can have more than one argument.\n```\n-- Store a person's name, age, and favourite Thing.\ndata Person = Person String Int Thing\n  deriving Show\n\nbrent :: Person\nbrent = Person \"Brent\" 31 SealingWax\n\nstan :: Person\nstan  = Person \"Stan\" 94 Cabbage\n\ngetAge :: Person -> Int\ngetAge (Person _ a _) = a\n```\n\n* the type constructor and data constructor are both named Person.\n\n### Algebraic data types in general\n\n```\ndata AlgDataType = Constr1 Type11 Type12\n                 | Constr2 Type21\n                 | Constr3 Type31 Type32 Type33\n                 | Constr4\n```\n\n* This specifies that a value of type AlgDataType can be constructed in one of four ways.\n\n*  type and data constructor names must always start with a capital letter; variables (including names of functions) must always start with a lowercase letter.\n\n### Pattern-matching\n\nWe could write something like\n```\nfoo (Constr1 a b)   = ...\nfoo (Constr2 a)     = ...\nfoo (Constr3 a b c) = ...\nfoo Constr4         = ...\n```\n\n* parentheses are required around patterns consisting of more than just a single constructor.\n\n* An underscore _ can be used as a “wildcard pattern” which matches anything.\n\n* A pattern of the form x@pat can be used to match a value against the pattern pat, but also give the name x to the entire value being matched. For example:\n```\nbaz :: Person -> String\nbaz p@(Person n _ _) = \"The name field of (\" ++ show p ++ \") is \" ++ n\n\n*Main> baz brent\n\"The name field of (Person \\\"Brent\\\" 31 SealingWax) is Brent\"\n```\n\n* 字符串用++连接\n\n* Patterns can be nested. For example:\n```\ncheckFav :: Person -> String\ncheckFav (Person n _ SealingWax) = n ++ \", you're my kind of person!\"\ncheckFav (Person n _ _)          = n ++ \", your favorite thing is lame.\"\n\n*Main> checkFav brent\n\"Brent, you're my kind of person!\"\n*Main> checkFav stan\n\"Stan, your favorite thing is lame.\"\n```\n\nIn general, the following grammar defines what can be used as a pattern:\n\n```\npat ::= _\n     |  var\n     |  var @ ( pat )\n     |  ( Constructor pat1 pat2 ... patn )\n```\n\n### Case expressions\n```\ncase exp of\n  pat1 -> exp1\n  pat2 -> exp2\n  ...\n```\nlike this:\n```\nex03 = case \"Hello\" of\n           []      -> 3\n           ('H':s) -> length s\n           _       -> 7\n```\n\n### Recursive data types\n\n* A list is either empty, or a single element followed by a remaining list.\n\n```\ndata IntList = Empty | Cons Int IntList\n```\n* Use recursive functions to process recursive data types.\n```\nintListProd :: IntList -> Int\nintListProd Empty      = 1\nintListProd (Cons x l) = x * intListProd l\n```\n* we can define a type of binary trees with an Int value stored at each internal node, and a Char stored at each leaf:\n```\ndata Tree = Leaf Char\n          | Node Tree Int Tree\n  deriving Show\n```\n\n## Haskell Prelude function\n\n### 乘方函数\n* ^ 的底数可为小数，也可为整数，指数是正整数；\n* ^^ 的底数是小数，指数是任意整数；\n* ** 的底数和指数都是小数)\n\n### 数值函数\n* signum 取符号 `signum (-3) == -1`\n* negate 相反数 `negate (-1) == 1`\n* abs 绝对值 \n* recip 倒数\n* floor 向下取整\n* ceiling 向上取整\n* round 四舍五入\n* truncate 取整\n* exp e的次幂\n* subtract 减去 `subtract 3 5 == 2`\n* gcd lcm\n* sqrt\n* max min\n* compare 比较 `compare 3 5 == LT` `compare 5 3 == GT` `compare 5 5 == EQ`\n\n### 三角函数\n* pi\n* sin cos\n* tan \n* asin acos\n* atan atan2\n* sinh cosh tanh asinh acosh atanh\n\n### 对数函数\n* log     exp为底\n* logBase `logBase 10 10 == 1.0`\n\n### 判断奇偶\n* odd even\n\n### pair函数\n* fst snd\n\n### 列表函数\n* (!!) 获取列表第几个元素 `[0,1,2,3] !! 1 == 1`\n* lookup `lookup 2 [(1, 'a'), (2, 'b'), (3, 'c')]== 'b'` 获取列表中第一个元素为2的元组中第二个元素\n* elem notElem 判断元素是否在列表中 `elem 2 [1,2,3] == True`\n* null 判断列表是否为空 `null [] == True`\n* and or 用于Bool列表 `and [False,True,True] == False`\n* all any 判断列表是否所有(存在)元素满足条件 `all even [2,3,4] == False`\n* (++) 列表连接\n* length 求列表长度\n* head 列表第一个元素\n* tail 取列表除了第一个元素的所有元素\n* last 取列表最后一个元素\n* init 取列表除最后一个元素\n* reverse 列表反转\n* cycle 反复出现列表\n* repeat 反复出现某一值\n* replicate 重复出现某一值一定次数 `replicate 3 1 == [1,1,1]`\n* take `take 2 [1, 2, 3, 4] == [1,2]` 取列表前两个元素\n* drop `drop 2 [1, 2, 3, 4] == [3,4]` 去除列表前两个元素\n* splitAt `splitAt 1 [1,2,3,4] == ([1],[2,3,4])`分割列表\n* takeWhile `takeWhile even [2, 4, 5] == [2,4]` `takeWhile odd [2, 4, 5] == []` 获取满足某一条件的前几个元素\n* dropWhile `dropWhile odd [2, 4, 5] == [5]` `dropWhile odd [2, 4, 5] == [2,4,5]`丢弃满足某一条件的前几个元素\n* span `span even [2, 4, 5] == ([2,4],[5])` 分割列表，规则同 takeWhile\n* break `break odd [2, 4, 5] == ([2,4],[5])`分割列表，规则同 dropWhile\n* maximum 列表最大元素\n* minimum\n* sum\n* product 列表元素乘积\n* enumFrom `enumFrom 2 == [2,3,4,...]`\n* enumFromThen `enumFromThen 5 3 == [5,3,1,-1,...]`\n* enumFromThenTo `enumFromThenTo 5 3 1 == [5,3,1]`\n* enumFromTo `enumFromTo 3 5 == [3,4,5]` `enumFromTo 3 1 == []`\n* show `show [2,3] == \"[2,3]\"` `show \"2\" == \"\\\"2\\\"\"`\n* read `read \"233\"::Int == 233` `read \"12\"::Double == 12.0`\n* iterate creates an infinite list where the first item is calculated by applying the function on the second argument, the second item by applying the function on the previous result and so on.\n` take 4 (iterate (2*) 1) == [1,2,4,8]` `take 4 (iterate (\\x -> (x+3)*2) 1) == [1,8,22,50]`\n* until applies a function which is passed as the second argument to the third argument and it comapares the result with the condition, if the condition evaluates to True, it prints the result, if not, it passes the result to the finction and repeats the cycle as long as the condition is matched\n`until (> 100) (*2) 1 == 128` `until odd ( `div` 2) 400 == 25`\n* zip `zip [1, 2] [4, 5] = [(1,4),(2,5)]`\n* zip3 `zip3 [1, 2] [4, 5] [7, 8] = [(1,4,7),(2,5,8)]`\n* zipWith `zipWith (+) [1, 2, 3] [4, 5, 6] = [5,7,9]`\n* zipWith3 `zipWith3 (\\x y z -> x + y + z) [1, 2, 3] [4, 5, 6] [7, 8, 9] == [12,15,18]`\n* unzip `unzip [(1, 4), (2, 5), (3, 6)] == ([1,2,3],[4,5,6])`\n* unzip3 `unzip3 [(1, 4, 7), (2, 5, 8), (3, 6, 9)] == ([1,2,3],[4,5,6],[7,8,9])`\n\n\n#### String\n* lines 分割行 `lines \"abc\\n123\\ndef\\n\" == [\"abc\",\"123\",\"def\"]`\n* words 分割单词 ` words \"abc\\n123 def\\t\" == [\"abc\",\"123\",\"def\"]`\n* unlines 合并行 `unlines [\"a\",\"b\",\"c\"] == \"a\\nb\\nc\\n\"`\n* unwords 合并单词 `unwords [\"a\",\"b\"] == \"a b\"`\n\n### 其他\n* (.) 函数复合 (f.g) x == f(g x)\n* ($) apply 函数，通常是为了省写括号\n`(map Char.toUpper . filter Char.isLower) \"ABCdef\" == \"DEF\"`\n`map Char.toUpper . filter Char.isLower $ \"ABCdef\" == \"DEF\"`\n\n## Recursion patterns, polymorphism, and the Prelude\n\n### Recursion patterns\n\n#### Map\n```\nls = [1,2,3]\naddOne x = x+1\nmap addOne ls\n```\n\n#### Filter\nWhen we want to keep only some elements of a list, and throw others away, based on a test.\n\n#### Fold\n“summarize” the elements of the list\n\n### Polymorphism\n\n#### Polymorphic data types\nFirst, let’s see how to declare a polymorphic data type.\n```haskell\ndata List t = E | C t (List t)\n```\n非泛型\n```haskell\ndata IntList = Empty | Cons Int IntList\n  deriving Show\n```\n* We have data List t = ... The t is a type variable which can stand for any type. \n* data List t = ... means that the List type is parameterized by a type, in much the same way that a function can be parameterized by some input.\n```\nlst1 :: List Int\nlst1 = C 3 (C 5 (C 2 E))\n\nlst2 :: List Char\nlst2 = C 'x' (C 'y' (C 'z' E))\n\nlst3 :: List Bool\nlst3 = C True (C False E)\n```\n\n#### Polymorphic functions\n```haskell\nfilterList :: (t -> Bool) -> List t -> List t    \nfilterList _ E = E\nfilterList p (C x xs)\n  | p x       = C x (filterList p xs)\n  | otherwise = filterList p xs\n```\n```haskell\nmapList :: (a -> b) -> List a -> List b\nmapList _ E        = E\nmapList f (C x xs) = C (f x) (mapList f xs)\n```\n\n### The Prelude\n\n#### Maybe\n```\ndata Maybe a = Nothing | Just a\n```\n* A value of type Maybe a either contains a value of type a (wrapped in the Just constructor), or it is Nothing (representing some sort of failure or error). The Data.Maybe module has functions for working with Maybe values.\n\n```\nmaybe False odd (Just 3) == True\n```\n\n#### Total and partial functions\n\n* Functions which have certain inputs that will make them recurse infinitely are also called partial.\n* Functions which are well-defined on all possible inputs are known as total functions.\n* head is what is known as a partial function: there are certain inputs for which head will crash.\n* tail, init, last, and (!!) are partial functions\n```\nhead([])\n*** Exception: Prelude.head: empty list\n```\n#### Replacing partial functions\nReplace\n```\ndoStuff1 :: [Int] -> Int\ndoStuff1 []  = 0\ndoStuff1 [_] = 0\ndoStuff1 xs  = head xs + (head (tail xs)) \n```\nas\n```\ndoStuff2 :: [Int] -> Int\ndoStuff2 []        = 0\ndoStuff2 [_]       = 0\ndoStuff2 (x1:x2:_) = x1 + x2\n```\n\n### Writing partial functions\n\nWhat if you find yourself writing a partial functions?\n\n#### Change the output type of the function to indicate the possible failure.\n\n```\ndata Maybe a = Nothing | Just a\n```\nWe could rewrite `head` safely like this\n```\nsafeHead :: [a] -> Maybe a\nsafeHead []    = Nothing\nsafeHead (x:_) = Just x\n```\n#### if some condition is really guaranteed, then the types ought to reflect the guarantee! Then the compiler can enforce your guarantees for you.\n```\ndata NonEmptyList a = NEL a [a]\n\nnelToList :: NonEmptyList a -> [a]\nnelToList (NEL x xs) = x:xs\n\nlistToNel :: [a] -> Maybe (NonEmptyList a)\nlistToNel []     = Nothing\nlistToNel (x:xs) = Just $ NEL x xs\n\nheadNEL :: NonEmptyList a -> a\nheadNEL (NEL a _) = a\n\ntailNEL :: NonEmptyList a -> [a]\ntailNEL (NEL _ as) = as\n```\n\n## Higher-order programming and type inference\n\n### Anonymous functions\n\n```haskell\ngt100 :: Integer -> Bool\ngt100 x = x > 100\n\ngreaterThan100 :: [Integer] -> [Integer]\ngreaterThan100 xs = filter gt100 xs\n```\nanonymous function:\n```haskell\ngreaterThan100_2 :: [Integer] -> [Integer]\ngreaterThan100_2 xs = filter (\\x -> x > 100) xs\n```\n* \\x -> x > 100 (the backslash is supposed to look kind of like a lambda with the short leg missing) is the function which takes a single argument x and outputs whether x is greater than 100.\n* lambda abstractions can also have multiple arguments.\n```\n(\\x y z -> [x,2*y,3*z]) 5 6 3 == [5,12,9]\n```\n*  if ? is an operator, then (?y) is equivalent to the function \\x -> x ? y, and (y?) is equivalent to \\x -> y ? x.\n```\n(>100) 102 == True\n(100>) 102 == False\n```\n`(- 1) 2`不可行？ \n\n### Function composition\n``` \nfoo :: (b -> c) -> (a -> b) -> (a -> c)\nfoo f g = \\x -> f (g x)\n```\n* foo is really called (.), and represents function composition. That is, if f and g are functions, then f . g is the function which does first g and then f.\n\n```\nmyTest :: [Integer] -> Bool\nmyTest xs = even (length (greaterThan100 xs))\n```\nWe can rewrite this as:\n```\nmyTest :: [Integer] -> Bool\nmyTest xs = even.length.greaterThan100 xs\n```\n```\nPrelude> :t (.)\n(.) :: (b -> c) -> (a -> b) -> a -> c\n```\n\n### Currying and partial application\n```\nf :: Int -> Int -> Int\nf x y = 2*x + y\n```\nequivalently write f’s type like this:\n```\nf' :: Int -> (Int -> Int)\nf' x y = 2*x + y\n```\n* representing multi-argument functions as one-argument functions returning functions\n* If we want to actually represent a function of two arguments we can use a single argument which is a tuple.\n```\nf'' :: (Int,Int) -> Int\nf'' (x,y) = 2*x + y\n```\n* In order to convert between the two representations of a two-argument function, the standard library defines functions called curry and uncurry, defined like this\n```\nschönfinkel :: ((a,b) -> c) -> a -> b -> c\nschönfinkel f x y = f (x,y)\n\nunschönfinkel :: (a -> b -> c) -> (a,b) -> c\nunschönfinkel f (x,y) = f x y\n```\n* uncurry in particular can be useful when you have a pair and want to apply a function to it. For example:\n```\nPrelude> uncurry (+) (2,3)\n5\n```\n#### Partial application\n\n* In Haskell there are no functions of multiple arguments! \n* Every function can be “partially applied” to its first (and only) argument, resulting in a function of the remaining arguments.\n* Haskell doesn’t make it easy to partially apply to an argument other than the first. \n* he one exception is infix operators, which as we’ve seen, can be partially applied to either of their two arguments using an operator section. \n\n#### Wholemeal programming\n```\nfoobar :: [Integer] -> Integer\nfoobar []     = 0\nfoobar (x:xs)\n  | x > 3     = (7*x + 2) + foobar xs\n  | otherwise = foobar xs\n```\n```\nfoobar' :: [Integer] -> Integer\nfoobar' = sum . map (\\x -> 7*x + 2) . filter (>3)\n```\n\n### Folds\nWe have one more recursion pattern on lists to talk about: folds. \nall of them somehow “combine” the elements of the list into a final answer.\n\n```haskell\nsum' :: [Integer] -> Integer\nsum' []     = 0\nsum' (x:xs) = x + sum' xs\n\nproduct' :: [Integer] -> Integer\nproduct' [] = 1\nproduct' (x:xs) = x * product' xs\n\nlength' :: [a] -> Int\nlength' []     = 0\nlength' (_:xs) = 1 + length' xs\n``` \n\ndefine higher-order functions:\n\n\n```haskell\nfold :: b -> (a -> b -> b) -> [a] -> b\nfold z f []     = z\nfold z f (x:xs) = f x (fold z f xs)\n```\n\n\n```haskell\nfold f z [a,b,c] == a `f` (b `f` (c `f` z))\n```\n\n\n```haskell\nsum''     = fold 0 (+)\nproduct'' = fold 1 (*)\nlength''  = fold 0 (\\_ s -> 1 + s)\n\n(Instead of (\\_ s -> 1 + s) we could also write (\\_ -> (1+)) or even (const (1+)).)\n```\n\n*  fold is already provided in the standard Prelude, under the name foldr\nHere are some Prelude functions which are defined in terms of foldr:\n\n```haskell\nlength :: [a] -> Int\nsum :: Num a => [a] -> a\nproduct :: Num a => [a] -> a\nand :: [Bool] -> Bool\nor :: [Bool] -> Bool\nany :: (a -> Bool) -> [a] -> Bool\nall :: (a -> Bool) -> [a] -> Bool\n```\n\n\n* There is also foldl, which folds “from the left”. \n\n\n```haskell\nfoldr f z [a,b,c] == a `f` (b `f` (c `f` z))\nfoldl f z [a,b,c] == ((z `f` a) `f` b) `f` c\n```\n\n* you should use foldl' from Data.List instead, which does the same thing as foldl but is more efficient.\n\n\n## More polymorphism and type classes\n\n### Parametricity\n\n```\nf :: a -> a -> a\nf x y = x && y\n```\n\nThe reason this doesn’t work is that the caller of a polymorphic function gets to choose the type. Here we, the implementors, have tried to choose a specific type (namely, Bool), but we may be given String, or Int, or even some type defined by someone using f, which we can’t possibly know about in advance. In other words, you can read the type\n```\na -> a -> a\n```\nas a promise that a function with this type will work no matter what type the caller chooses.\n\n### Two views on parametricity\n\n```\n(==) :: Eq a   => a -> a -> Bool\n(<)  :: Ord a  => a -> a -> Bool\nshow :: Show a => a -> String\n```\n### Type classes\n\n* Num, Eq, Ord, and Show are type classes, and we say that (==), (<), and (+) are “type-class polymorphic”.\n* Intuitively, type classes correspond to sets of types which have certain operations defined for them, and type class polymorphic functions work only for types which are instances of the type class(es) in question.\n```\nclass Eq a where\n  (==) :: a -> a -> Bool\n  (/=) :: a -> a -> Bool\n```\n* Eq is declared to be a type class with a single parameter, a.\n* Any type a which wants to be an instance of Eq must define two functions, (==) and (/=), with the indicated type signatures.\n\n```\n(==) :: Eq a => a -> a -> Bool\n```\n* The Eq a that comes before the => is a type class constraint.\n* We can read this as saying that for any type a, as long as a is an instance of Eq, (==) can take two values of type a and return a Bool.\n* Let’s make our own type and declare an instance of Eq for it. \n```\ndata Foo = F Int | G Char\n\ninstance Eq Foo where\n  (F i1) == (F i2) = i1 == i2\n  (G c1) == (G c2) = c1 == c2\n  _ == _ = False\n\n  foo1 /= foo2 = not (foo1 == foo2)\n```\n* the Eq class is actually declared like this:\n```\nclass Eq a where\n  (==), (/=) :: a -> a -> Bool\n  x == y = not (x /= y)\n  x /= y = not (x == y)\n```\nThis means that when we make an instance of Eq, we can define either (==) or (/=), whichever is more convenient; \n\n* As it turns out, Eq (along with a few other standard type classes) is special: GHC is able to automatically generate instances of Eq for us. Like so:\n```\ndata Foo' = F' Int | G' Char\n  deriving (Eq, Ord, Show)\n```\nThis tells GHC to automatically derive instances of the Eq, Ord, and Show type classes for our data type Foo.\n\n#### Type classes and Java interfaces\n\n* Both define a set of types/classes which implement a specified list of operations.\n\n1. When a Java class is defined, any interfaces it implements must be declared. Type class instances, on the other hand, are declared separately from the declaration of the corresponding types, and can even be put in a separate module.\n2. The types that can be specified for type class methods are more general and flexible than the signatures that can be given for Java interface methods, especially when multi-parameter type classes enter the picture. For example, consider a hypothetical type class\n```\nclass Blerg a b where\n  blerg :: a -> b -> Bool\n```\nUsing blerg amounts to doing multiple dispatch: which implementation of blerg the compiler should choose depends on both the types a and b. There is no easy way to do this in Java.\nHaskell type classes can also easily handle binary (or ternary, or …) methods, as in\n```\nclass Num a where\n  (+) :: a -> a -> a\n```\nThere is no nice way to do this in Java: for one thing, one of the two arguments would have to be the “privileged” one which is actually getting the (+) method invoked on it, and this asymmetry is awkward. Furthermore, because of Java’s subtyping, getting two arguments of a certain interface type does not guarantee that they are actually the same type, which makes implementing binary operators such as (+) awkward (usually requiring some runtime type checks).\n\n#### Standard type classes\n* Ord is for types whose elements can be totally ordered, that is, where any two elements can be compared to see which is less than the other. It provides comparison operations like (<) and (<=), and also the compare function.\n* Num is for “numeric” types, which support things like addition, subtraction, and multipication. One very important thing to note is that integer literals are actually type class polymorphic:\n```\nPrelude> :t 5\n5 :: Num a => a\n```\nThis means that literals like 5 can be used as Ints, Integers, Doubles, or any other type which is an instance of Num (Rational, Complex Double, or even a type you define…)\n* Show defines the method show, which is used to convert values into Strings.\n* Read is the dual of Show.\n* Integral represents whole number types such as Int and Integer.\n\n#### A type class example\n```\nclass Listable a where\n  toList :: a -> [Int]\n```\nWe can think of Listable as the class of things which can be converted to a list of Ints. Look at the type of toList:\n```\ntoList :: Listable a => a -> [Int]\n```\nFirst, an Int can be converted to an [Int] just by creating a singleton list, and Bool can be converted similarly, say, by translating True to 1 and False to 0:\n```haskell\ninstance Listable Int where\n  -- toList :: Int -> [Int]\n  toList x = [x]\n\ninstance Listable Bool where\n  toList True  = [1]\n  toList False = [0]\n```\nWe don’t need to do any work to convert a list of Int to a list of Int:\n```haskell\ninstance Listable [Int] where\n    toList = id\n```\nFinally, here’s a binary tree type which we can convert to a list by flattening:\n```haskell\ndata Tree a = Empty | Node a (Tree a) (Tree a)\ninstance Listable (Tree Int) where\n    toList Node(x,l,r) = toList l ++ [x] ++ toList r\n```\nIf we implement other functions in terms of toList, they also get a Listable constraint. \n```haskell\nsumL x = sum (toList x)\n```\n\nghci informs us that type type of sumL is\n```haskell\nsumL :: Listable a => a -> Int\n```\n\n```haskell\nfoo x y = sum (toList x) == sum (toList y) || x < y\n```\ntype foo:\n```haskell\nfoo :: (Listable a,Ord a) => a -> a -> Bool\n```\n\n```\ninstance (Listable a, Listable b) => Listable (a,b) where\n  toList (x,y) = toList x ++ toList y\n```\nNotice how we can put type class constraints on an instance as well as on a function type. This says that a pair type (a,b) is an instance of Listable as long as a and b both are. Then we get to use toList on values of types a and b in our definition of toList for a pair. Note that this definition is not recursive! The version of toList that we are defining is calling other versions of toList, not itself.\n\n## Lazy evaluation\n\n### Strict evaluation\n* Under a strict evaluation strategy, function arguments are completely evaluated before passing them to the function.\n* The benefit of strict evaluation is that it is easy to predict when and in what order things will happen. \n\n### Side effects and purity\n### Lazy evaluation\n* Under a lazy evaluation strategy, evaluation of function arguments is delayed as long as possible: they are not evaluated until it actually becomes necessary to do so. \n* When some expression is given as an argument to a function, it is simply packaged up as an unevaluated expression (called a “thunk”, don’t ask me why) without doing any actual work.\n### Pattern matching drives evaluation\n\n```haskell\nf1 :: Maybe a -> [Maybe a]\nf1 m = [m,m]\n\nf2 :: Maybe a -> [a]\nf2 Nothing  = []\nf2 (Just x) = [x]\n```\n* f1 uses its argument m, it does not need to know anything about it. m can remain completely unevaluated, and the unevaluated expression is simply put in a list. \n* f2, on the other hand, needs to know something about its argument in order to proceed: was it constructed with Nothing or Just.\n* The other important thing to note is that thunks are evaluated only enough to allow a pattern match to proceed, and no further!\n* suppose we wanted to evaluate f2 (safeHead [3^500, 49]). f2 would force evaluation of the call to safeHead [3^500, 49], which would evaluate to Just (3^500)—note that the 3^500 is not evaluated\n\n`Expressions are only evaluated when pattern-matched`\n\n`…only as far as necessary for the match to proceed, and no farther!`\n### Consequences\n#### Purity\n#### Understanding space usage\n```\n-- Standard library function foldl, provided for reference\nfoldl :: (b -> a -> b) -> b -> [a] -> b\nfoldl _ z []     = z\nfoldl f z (x:xs) = foldl f (f z x) xs\n```\n```\n  foldl (+) 0 [1,2,3]\n= foldl (+) (0+1) [2,3]\n= foldl (+) ((0+1)+2) [3]\n= foldl (+) (((0+1)+2)+3) []\n= (((0+1)+2)+3)\n= ((1+2)+3)\n= (3+3)\n= 6\n```\nSince the value of the accumulator is not demanded until recursing through the entire list, the accumulator simply builds up a big unevaluated expression (((0+1)+2)+3), which finally gets reduced to a value at the end.\n* One is that it’s simply inefficient: there’s no point in transferring all the numbers from the list into a different list-like thing (the accumulator thunk) before actually adding them up. \n* The second problem is more subtle, and more insidious: evaluating the expression (((0+1)+2)+3) actually requires pushing the 3 and 2 onto a stack before being able to compute 0+1 and then unwinding the stack, adding along the way. \nfor very long lists it’s a big problem: there is usually not as much space available for the stack, so this can lead to a stack overflow.\n* The solution in this case is to use the foldl' function instead of foldl, which adds a bit of strictness\n#### Short-circuiting operators\n```\n(&&) :: Bool -> Bool -> Bool\nTrue  && x = x\nFalse && _ = False\n```\n#### User-defined control structures\nIn Haskell, however, we can define if as a library function!\n```\nif' :: Bool -> a -> a -> a\nif' True  x _ = x\nif' False _ y = y\n```\n#### Infinite data structures\n#### Pipelining/wholemeal programming\n\n#### Dynamic programming\n\nUsing lazy evaluation we can get the Haskell runtime to work out the proper order of evaluation for us! For example, here is some Haskell code to solve the 0-1 knapsack problem.\n```\nimport Data.Array\n\nknapsack01 :: [Double]   -- values \n           -> [Integer]  -- nonnegative weights\n           -> Integer    -- knapsack size\n           -> Double     -- max possible value\nknapsack01 vs ws maxW = m!(numItems-1, maxW)\n  where numItems = length vs\n        m = array ((-1,0), (numItems-1, maxW)) $\n              [((-1,w), 0) | w <- [0 .. maxW]] ++\n              [((i,0), 0) | i <- [0 .. numItems-1]] ++\n              [((i,w), best) \n                  | i <- [0 .. numItems-1]\n                  , w <- [1 .. maxW]\n                  , let best\n                          | ws!!i > w  = m!(i-1, w)\n                          | otherwise = max (m!(i-1, w)) \n                                            (m!(i-1, w - ws!!i) + vs!!i)\n              ]\n\nexample = knapsack01 [3,4,5,8,10] [2,3,4,5,9] 20\n```","slug":"haskell","published":1,"updated":"2020-09-04T10:11:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdu000wrouj22zt9iwv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"Introduction-to-Haskell\"><a href=\"#Introduction-to-Haskell\" class=\"headerlink\" title=\"Introduction to Haskell\"></a>Introduction to Haskell</h2><ul>\n<li><p>Functions are first-class, that is, functions are values which can be used in exactly the same ways as any other sort of value.</p>\n</li>\n<li><p>The meaning of Haskell programs is centered around evaluating expressions rather than executing instructions.</p>\n<a id=\"more\"></a>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install haskell-<span class=\"built_in\">platform</span></span><br></pre></td></tr></table></figure>\n<p>开启交互模式</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ghci</span></span><br></pre></td></tr></table></figure>\n<p><code>Ctrl + z</code> 退出交互模式</p>\n</li>\n</ul>\n<p>导入<code>test.hs</code>文件<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:l</span> <span class=\"selector-tag\">test</span><span class=\"selector-class\">.hs</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>GHCi is an interactive Haskell REPL (Read-Eval-Print-Loop) that comes with GHC. At the GHCi prompt, you can evaluate expressions, load Haskell files with :load (:l) (and reload them with :reload (:r)), ask for the type of an expression with :type (:t), and many other things (try :? for a list of commands).<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ex01</span> = <span class=\"number\">3</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">ex02</span> = <span class=\"number\">8</span> / <span class=\"number\">2</span> --(<span class=\"number\">4</span>.<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"attribute\">ex03</span> = mod <span class=\"number\">19</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attribute\">ex04</span> = <span class=\"number\">19</span> `mod` <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attribute\">ex05</span> = <span class=\"number\">7</span> ^ <span class=\"number\">222</span></span><br><span class=\"line\"><span class=\"attribute\">ex06</span> = (-<span class=\"number\">3</span>) * (-<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>backticks</code> make a function name into an infix operator.</li>\n<li>negative numbers must often be surrounded by parentheses, to avoid having the negation sign parsed as subtraction.</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- badArith1 = i + n</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Addition is only between values of the same numeric type, Haskell does not do implicit conversion,you must explicitly convert with:</p>\n<p>fromIntegral: converts from any integral type (Int or Integer) to any other numeric type.</p>\n<p>round, floor, ceiling: convert floating-point numbers to Int or Integer.</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- badArith2 = i / i</span></span><br></pre></td></tr></table></figure></li>\n<li>This is an error since / performs floating-point division only. For integer division we can use div.<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ex07 = i `div` i</span><br></pre></td></tr></table></figure>\n<h3 id=\"Boolean-logic\"><a href=\"#Boolean-logic\" class=\"headerlink\" title=\"Boolean logic\"></a>Boolean logic</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ex08</span> = <span class=\"literal\">True</span> &amp;&amp; <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">ex09</span> = not (<span class=\"literal\">False</span> || <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"attr\">ex10</span> = <span class=\"number\">2</span> /= <span class=\"number\">3</span> (/= 不等于)</span><br></pre></td></tr></table></figure></li>\n<li><code>if-expressions</code>: if b then t else f</li>\n</ul>\n<p>the else part is required for an if-expression, since the if-expression must result in some value. </p>\n<h3 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"function\"></a>function</h3><ul>\n<li>function application has higher precedence than any infix operators</li>\n</ul>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello1 :: [Char]</span><br><span class=\"line\">hello1 = [<span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">hello2 :: String</span><br><span class=\"line\">hello2 = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">helloSame = hello1 == hello2</span><br></pre></td></tr></table></figure>\n<h2 id=\"Algebraic-Data-Types\"><a href=\"#Algebraic-Data-Types\" class=\"headerlink\" title=\"Algebraic Data Types\"></a>Algebraic Data Types</h2><h3 id=\"Enumeration-types\"><a href=\"#Enumeration-types\" class=\"headerlink\" title=\"Enumeration types\"></a>Enumeration types</h3><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data Thing = Shoe </span><br><span class=\"line\">           | <span class=\"type\">Ship</span> </span><br><span class=\"line\">           | <span class=\"type\">SealingWax</span> </span><br><span class=\"line\">           | <span class=\"type\">Cabbage</span> </span><br><span class=\"line\">           | <span class=\"type\">King</span></span><br><span class=\"line\">  deriving <span class=\"keyword\">Show</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>The deriving Show is a magical incantation which tells GHC to automatically generate default code for converting Things to Strings.<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">shoe </span>:: Thing</span><br><span class=\"line\"><span class=\"keyword\">shoe </span>= <span class=\"keyword\">Shoe</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">listO&#x27;Things </span>:: [Thing]</span><br><span class=\"line\">listO<span class=\"string\">&#x27;Things = [Shoe, SealingWax, King, Cabbage, King]</span></span><br></pre></td></tr></table></figure></li>\n<li>We can write functions on Things by pattern-matching.<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">isSmall ::</span> <span class=\"string\">Thing</span> <span class=\"string\">-&gt;</span> <span class=\"string\">Bool</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">Shoe</span>       <span class=\"string\">=</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">Ship</span>       <span class=\"string\">=</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">SealingWax</span> <span class=\"string\">=</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">Cabbage</span>    <span class=\"string\">=</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">King</span>       <span class=\"string\">=</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\nor<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">isSmall2 ::</span> <span class=\"string\">Thing</span> <span class=\"string\">-&gt;</span> <span class=\"string\">Bool</span></span><br><span class=\"line\"><span class=\"string\">isSmall2</span> <span class=\"string\">Ship</span> <span class=\"string\">=</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"string\">isSmall2</span> <span class=\"string\">King</span> <span class=\"string\">=</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"string\">isSmall2</span> <span class=\"string\">_</span>    <span class=\"string\">=</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Beyond-enumerations\"><a href=\"#Beyond-enumerations\" class=\"headerlink\" title=\"Beyond enumerations\"></a>Beyond enumerations</h3><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">FailableDouble</span> = <span class=\"type\">Failure</span></span></span><br><span class=\"line\">                    | <span class=\"type\">OK</span> <span class=\"type\">Double</span></span><br><span class=\"line\">  <span class=\"keyword\">deriving</span> <span class=\"type\">Show</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ex01</span> = Failure</span><br><span class=\"line\"><span class=\"attr\">ex02</span> = OK <span class=\"number\">3.4</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">safeDiv :: Double -&gt; Double -&gt; FailableDouble</span><br><span class=\"line\">safeDiv _ <span class=\"number\">0</span> = Failure</span><br><span class=\"line\">safeDiv <span class=\"symbol\">x</span> <span class=\"symbol\">y</span> = OK (<span class=\"symbol\">x</span> / <span class=\"symbol\">y</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">failureToZero :: FailableDouble -&gt; Double</span><br><span class=\"line\">failureToZero Failure = 0</span><br><span class=\"line\">failureToZero (OK d)  = d</span><br></pre></td></tr></table></figure></li>\n<li>Data constructors can have more than one argument.<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Store a <span class=\"keyword\">person</span>&#x27;s name, age, and favourite <span class=\"keyword\">Thing</span>.</span><br><span class=\"line\">data <span class=\"keyword\">Person</span> = <span class=\"keyword\">Person</span> String Int <span class=\"keyword\">Thing</span></span><br><span class=\"line\">  deriving Show</span><br><span class=\"line\"></span><br><span class=\"line\">brent :: <span class=\"keyword\">Person</span></span><br><span class=\"line\">brent = <span class=\"keyword\">Person</span> <span class=\"string\">&quot;Brent&quot;</span> 31 SealingWax</span><br><span class=\"line\"></span><br><span class=\"line\">stan :: <span class=\"keyword\">Person</span></span><br><span class=\"line\">stan  = <span class=\"keyword\">Person</span> <span class=\"string\">&quot;Stan&quot;</span> 94 Cabbage</span><br><span class=\"line\"></span><br><span class=\"line\">getAge :: <span class=\"keyword\">Person</span> -&gt; Int</span><br><span class=\"line\">getAge (<span class=\"keyword\">Person</span> _ a _) = a</span><br></pre></td></tr></table></figure></li>\n<li>the type constructor and data constructor are both named Person.</li>\n</ul>\n<h3 id=\"Algebraic-data-types-in-general\"><a href=\"#Algebraic-data-types-in-general\" class=\"headerlink\" title=\"Algebraic data types in general\"></a>Algebraic data types in general</h3><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data AlgDataType = Co<span class=\"symbol\">nstr1</span> Type<span class=\"number\">11</span> Type<span class=\"number\">12</span></span><br><span class=\"line\">                 | Co<span class=\"symbol\">nstr2</span> Type<span class=\"number\">21</span></span><br><span class=\"line\">                 | Co<span class=\"symbol\">nstr3</span> Type<span class=\"number\">31</span> Type<span class=\"number\">32</span> Type<span class=\"number\">33</span></span><br><span class=\"line\">                 | Co<span class=\"symbol\">nstr4</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>This specifies that a value of type AlgDataType can be constructed in one of four ways.</p>\n</li>\n<li><p>type and data constructor names must always start with a capital letter; variables (including names of functions) must always start with a lowercase letter.</p>\n</li>\n</ul>\n<h3 id=\"Pattern-matching\"><a href=\"#Pattern-matching\" class=\"headerlink\" title=\"Pattern-matching\"></a>Pattern-matching</h3><p>We could write something like<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo <span class=\"comment\">(Constr1 a b)</span>   = ...</span><br><span class=\"line\">foo <span class=\"comment\">(Constr2 a)</span>     = ...</span><br><span class=\"line\">foo <span class=\"comment\">(Constr3 a b c)</span> = ...</span><br><span class=\"line\">foo Co<span class=\"symbol\">nstr4</span>         = ...</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>parentheses are required around patterns consisting of more than just a single constructor.</p>\n</li>\n<li><p>An underscore _ can be used as a “wildcard pattern” which matches anything.</p>\n</li>\n<li><p>A pattern of the form x@pat can be used to match a value against the pattern pat, but also give the name x to the entire value being matched. For example:</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">baz </span>:: Person -&gt; String</span><br><span class=\"line\"><span class=\"keyword\">baz </span>p@(Person n _ _) = <span class=\"string\">&quot;The name field of (&quot;</span> ++ <span class=\"keyword\">show </span>p ++ <span class=\"string\">&quot;) is &quot;</span> ++ n</span><br><span class=\"line\"></span><br><span class=\"line\">*Main&gt; <span class=\"keyword\">baz </span><span class=\"keyword\">brent</span></span><br><span class=\"line\"><span class=\"keyword\">&quot;The </span>name field of (Person \\<span class=\"string\">&quot;Brent\\&quot; 31 SealingWax) is Brent&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>字符串用++连接</p>\n</li>\n<li><p>Patterns can be nested. For example:</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkFav <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Person -&gt; String</span><br><span class=\"line\">checkFav (Person <span class=\"built_in\">n</span> _ SealingWax) = <span class=\"built_in\">n</span> ++ <span class=\"string\">&quot;, you&#x27;re my kind of person!&quot;</span></span><br><span class=\"line\">checkFav (Person <span class=\"built_in\">n</span> _ _)          = <span class=\"built_in\">n</span> ++ <span class=\"string\">&quot;, your favorite thing is lame.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">*Main&gt; checkFav brent</span><br><span class=\"line\"><span class=\"string\">&quot;Brent, you&#x27;re my kind of person!&quot;</span></span><br><span class=\"line\">*Main&gt; checkFav stan</span><br><span class=\"line\"><span class=\"string\">&quot;Stan, your favorite thing is lame.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>In general, the following grammar defines what can be used as a pattern:</p>\n</li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pat ::= _</span><br><span class=\"line\">     |  <span class=\"keyword\">var</span></span><br><span class=\"line\">     |  <span class=\"keyword\">var</span> @ ( pat )</span><br><span class=\"line\">     |  ( <span class=\"function\"><span class=\"keyword\">Constructor</span> <span class=\"title\">pat1</span> <span class=\"title\">pat2</span> ... <span class=\"title\">patn</span> )</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Case-expressions\"><a href=\"#Case-expressions\" class=\"headerlink\" title=\"Case expressions\"></a>Case expressions</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case <span class=\"built_in\">exp</span> of</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">pat1</span> -&gt;</span> exp1</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">pat2</span> -&gt;</span> exp2</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<p>like this:<br><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ex03 = <span class=\"keyword\">case</span> <span class=\"string\">&quot;Hello&quot;</span> <span class=\"keyword\">of</span></span><br><span class=\"line\">           []      -&gt; <span class=\"number\">3</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"params\">(<span class=\"string\">&#x27;H&#x27;</span>:s)</span> -&gt;</span> length s</span><br><span class=\"line\">           _       -&gt; <span class=\"number\">7</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Recursive-data-types\"><a href=\"#Recursive-data-types\" class=\"headerlink\" title=\"Recursive data types\"></a>Recursive data types</h3><ul>\n<li>A list is either empty, or a single element followed by a remaining list.</li>\n</ul>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> IntList = Empty | Cons <span class=\"built_in\">Int</span> IntList</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Use recursive functions to process recursive data types.<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>ListProd :: IntList -&gt; Int</span><br><span class=\"line\"><span class=\"built_in\">int</span>ListProd Empty      = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>ListProd (Cons x l) = x * <span class=\"built_in\">int</span>ListProd l</span><br></pre></td></tr></table></figure></li>\n<li>we can define a type of binary trees with an Int value stored at each internal node, and a Char stored at each leaf:<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data Tree = Leaf Char</span><br><span class=\"line\">          | <span class=\"keyword\">Node</span> <span class=\"title\">Tree</span> Int Tree</span><br><span class=\"line\">  deriving Show</span><br></pre></td></tr></table></figure>\n<h2 id=\"Haskell-Prelude-function\"><a href=\"#Haskell-Prelude-function\" class=\"headerlink\" title=\"Haskell Prelude function\"></a>Haskell Prelude function</h2></li>\n</ul>\n<h3 id=\"乘方函数\"><a href=\"#乘方函数\" class=\"headerlink\" title=\"乘方函数\"></a>乘方函数</h3><ul>\n<li>^ 的底数可为小数，也可为整数，指数是正整数；</li>\n<li>^^ 的底数是小数，指数是任意整数；</li>\n<li>** 的底数和指数都是小数)</li>\n</ul>\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><ul>\n<li>signum 取符号 <code>signum (-3) == -1</code></li>\n<li>negate 相反数 <code>negate (-1) == 1</code></li>\n<li>abs 绝对值 </li>\n<li>recip 倒数</li>\n<li>floor 向下取整</li>\n<li>ceiling 向上取整</li>\n<li>round 四舍五入</li>\n<li>truncate 取整</li>\n<li>exp e的次幂</li>\n<li>subtract 减去 <code>subtract 3 5 == 2</code></li>\n<li>gcd lcm</li>\n<li>sqrt</li>\n<li>max min</li>\n<li>compare 比较 <code>compare 3 5 == LT</code> <code>compare 5 3 == GT</code> <code>compare 5 5 == EQ</code></li>\n</ul>\n<h3 id=\"三角函数\"><a href=\"#三角函数\" class=\"headerlink\" title=\"三角函数\"></a>三角函数</h3><ul>\n<li>pi</li>\n<li>sin cos</li>\n<li>tan </li>\n<li>asin acos</li>\n<li>atan atan2</li>\n<li>sinh cosh tanh asinh acosh atanh</li>\n</ul>\n<h3 id=\"对数函数\"><a href=\"#对数函数\" class=\"headerlink\" title=\"对数函数\"></a>对数函数</h3><ul>\n<li>log     exp为底</li>\n<li>logBase <code>logBase 10 10 == 1.0</code></li>\n</ul>\n<h3 id=\"判断奇偶\"><a href=\"#判断奇偶\" class=\"headerlink\" title=\"判断奇偶\"></a>判断奇偶</h3><ul>\n<li>odd even</li>\n</ul>\n<h3 id=\"pair函数\"><a href=\"#pair函数\" class=\"headerlink\" title=\"pair函数\"></a>pair函数</h3><ul>\n<li>fst snd</li>\n</ul>\n<h3 id=\"列表函数\"><a href=\"#列表函数\" class=\"headerlink\" title=\"列表函数\"></a>列表函数</h3><ul>\n<li>(!!) 获取列表第几个元素 <code>[0,1,2,3] !! 1 == 1</code></li>\n<li>lookup <code>lookup 2 [(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]== &#39;b&#39;</code> 获取列表中第一个元素为2的元组中第二个元素</li>\n<li>elem notElem 判断元素是否在列表中 <code>elem 2 [1,2,3] == True</code></li>\n<li>null 判断列表是否为空 <code>null [] == True</code></li>\n<li>and or 用于Bool列表 <code>and [False,True,True] == False</code></li>\n<li>all any 判断列表是否所有(存在)元素满足条件 <code>all even [2,3,4] == False</code></li>\n<li>(++) 列表连接</li>\n<li>length 求列表长度</li>\n<li>head 列表第一个元素</li>\n<li>tail 取列表除了第一个元素的所有元素</li>\n<li>last 取列表最后一个元素</li>\n<li>init 取列表除最后一个元素</li>\n<li>reverse 列表反转</li>\n<li>cycle 反复出现列表</li>\n<li>repeat 反复出现某一值</li>\n<li>replicate 重复出现某一值一定次数 <code>replicate 3 1 == [1,1,1]</code></li>\n<li>take <code>take 2 [1, 2, 3, 4] == [1,2]</code> 取列表前两个元素</li>\n<li>drop <code>drop 2 [1, 2, 3, 4] == [3,4]</code> 去除列表前两个元素</li>\n<li>splitAt <code>splitAt 1 [1,2,3,4] == ([1],[2,3,4])</code>分割列表</li>\n<li>takeWhile <code>takeWhile even [2, 4, 5] == [2,4]</code> <code>takeWhile odd [2, 4, 5] == []</code> 获取满足某一条件的前几个元素</li>\n<li>dropWhile <code>dropWhile odd [2, 4, 5] == [5]</code> <code>dropWhile odd [2, 4, 5] == [2,4,5]</code>丢弃满足某一条件的前几个元素</li>\n<li>span <code>span even [2, 4, 5] == ([2,4],[5])</code> 分割列表，规则同 takeWhile</li>\n<li>break <code>break odd [2, 4, 5] == ([2,4],[5])</code>分割列表，规则同 dropWhile</li>\n<li>maximum 列表最大元素</li>\n<li>minimum</li>\n<li>sum</li>\n<li>product 列表元素乘积</li>\n<li>enumFrom <code>enumFrom 2 == [2,3,4,...]</code></li>\n<li>enumFromThen <code>enumFromThen 5 3 == [5,3,1,-1,...]</code></li>\n<li>enumFromThenTo <code>enumFromThenTo 5 3 1 == [5,3,1]</code></li>\n<li>enumFromTo <code>enumFromTo 3 5 == [3,4,5]</code> <code>enumFromTo 3 1 == []</code></li>\n<li>show <code>show [2,3] == &quot;[2,3]&quot;</code> <code>show &quot;2&quot; == &quot;\\&quot;2\\&quot;&quot;</code></li>\n<li>read <code>read &quot;233&quot;::Int == 233</code> <code>read &quot;12&quot;::Double == 12.0</code></li>\n<li>iterate creates an infinite list where the first item is calculated by applying the function on the second argument, the second item by applying the function on the previous result and so on.<br><code>take 4 (iterate (2*) 1) == [1,2,4,8]</code> <code>take 4 (iterate (\\x -&gt; (x+3)*2) 1) == [1,8,22,50]</code></li>\n<li>until applies a function which is passed as the second argument to the third argument and it comapares the result with the condition, if the condition evaluates to True, it prints the result, if not, it passes the result to the finction and repeats the cycle as long as the condition is matched<br><code>until (&gt; 100) (*2) 1 == 128</code> <code>until odd (</code>div<code>2) 400 == 25</code></li>\n<li>zip <code>zip [1, 2] [4, 5] = [(1,4),(2,5)]</code></li>\n<li>zip3 <code>zip3 [1, 2] [4, 5] [7, 8] = [(1,4,7),(2,5,8)]</code></li>\n<li>zipWith <code>zipWith (+) [1, 2, 3] [4, 5, 6] = [5,7,9]</code></li>\n<li>zipWith3 <code>zipWith3 (\\x y z -&gt; x + y + z) [1, 2, 3] [4, 5, 6] [7, 8, 9] == [12,15,18]</code></li>\n<li>unzip <code>unzip [(1, 4), (2, 5), (3, 6)] == ([1,2,3],[4,5,6])</code></li>\n<li>unzip3 <code>unzip3 [(1, 4, 7), (2, 5, 8), (3, 6, 9)] == ([1,2,3],[4,5,6],[7,8,9])</code></li>\n</ul>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><ul>\n<li>lines 分割行 <code>lines &quot;abc\\n123\\ndef\\n&quot; == [&quot;abc&quot;,&quot;123&quot;,&quot;def&quot;]</code></li>\n<li>words 分割单词 <code>words &quot;abc\\n123 def\\t&quot; == [&quot;abc&quot;,&quot;123&quot;,&quot;def&quot;]</code></li>\n<li>unlines 合并行 <code>unlines [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] == &quot;a\\nb\\nc\\n&quot;</code></li>\n<li>unwords 合并单词 <code>unwords [&quot;a&quot;,&quot;b&quot;] == &quot;a b&quot;</code></li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>(.) 函数复合 (f.g) x == f(g x)</li>\n<li>($) apply 函数，通常是为了省写括号<br><code>(map Char.toUpper . filter Char.isLower) &quot;ABCdef&quot; == &quot;DEF&quot;</code><br><code>map Char.toUpper . filter Char.isLower $ &quot;ABCdef&quot; == &quot;DEF&quot;</code></li>\n</ul>\n<h2 id=\"Recursion-patterns-polymorphism-and-the-Prelude\"><a href=\"#Recursion-patterns-polymorphism-and-the-Prelude\" class=\"headerlink\" title=\"Recursion patterns, polymorphism, and the Prelude\"></a>Recursion patterns, polymorphism, and the Prelude</h2><h3 id=\"Recursion-patterns\"><a href=\"#Recursion-patterns\" class=\"headerlink\" title=\"Recursion patterns\"></a>Recursion patterns</h3><h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ls</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">addOne <span class=\"attr\">x</span> = x+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">map</span> addOne ls</span><br></pre></td></tr></table></figure>\n<h4 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h4><p>When we want to keep only some elements of a list, and throw others away, based on a test.</p>\n<h4 id=\"Fold\"><a href=\"#Fold\" class=\"headerlink\" title=\"Fold\"></a>Fold</h4><p>“summarize” the elements of the list</p>\n<h3 id=\"Polymorphism\"><a href=\"#Polymorphism\" class=\"headerlink\" title=\"Polymorphism\"></a>Polymorphism</h3><h4 id=\"Polymorphic-data-types\"><a href=\"#Polymorphic-data-types\" class=\"headerlink\" title=\"Polymorphic data types\"></a>Polymorphic data types</h4><p>First, let’s see how to declare a polymorphic data type.<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">List</span> t = <span class=\"type\">E</span> | <span class=\"type\">C</span> t (<span class=\"type\">List</span> <span class=\"title\">t</span>)</span></span><br></pre></td></tr></table></figure><br>非泛型<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">IntList</span> = <span class=\"type\">Empty</span> | <span class=\"type\">Cons</span> <span class=\"type\">Int</span> <span class=\"type\">IntList</span></span></span><br><span class=\"line\">  <span class=\"keyword\">deriving</span> <span class=\"type\">Show</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>We have data List t = … The t is a type variable which can stand for any type. </li>\n<li>data List t = … means that the List type is parameterized by a type, in much the same way that a function can be parameterized by some input.<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">lst1</span> <span class=\"operator\">::</span> <span class=\"built_in\">List</span> <span class=\"variable\">Int</span></span><br><span class=\"line\"><span class=\"variable\">lst1</span> <span class=\"operator\">=</span> <span class=\"built_in\">C</span> <span class=\"number\">3</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"number\">5</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"number\">2</span> <span class=\"built_in\">E</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">lst2</span> <span class=\"operator\">::</span> <span class=\"built_in\">List</span> <span class=\"variable\">Char</span></span><br><span class=\"line\"><span class=\"variable\">lst2</span> <span class=\"operator\">=</span> <span class=\"built_in\">C</span> <span class=\"operator\">&#x27;</span><span class=\"variable\">x</span><span class=\"operator\">&#x27;</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"operator\">&#x27;</span><span class=\"variable\">y</span><span class=\"operator\">&#x27;</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"operator\">&#x27;</span><span class=\"variable\">z</span><span class=\"operator\">&#x27;</span> <span class=\"built_in\">E</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">lst3</span> <span class=\"operator\">::</span> <span class=\"built_in\">List</span> <span class=\"variable\">Bool</span></span><br><span class=\"line\"><span class=\"variable\">lst3</span> <span class=\"operator\">=</span> <span class=\"built_in\">C</span> <span class=\"built_in\">True</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"built_in\">False</span> <span class=\"built_in\">E</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Polymorphic-functions\"><a href=\"#Polymorphic-functions\" class=\"headerlink\" title=\"Polymorphic functions\"></a>Polymorphic functions</h4><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">filterList</span> :: (t -&gt; <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">List</span> t -&gt; <span class=\"type\">List</span> t    </span><br><span class=\"line\"><span class=\"title\">filterList</span> _ <span class=\"type\">E</span> = <span class=\"type\">E</span></span><br><span class=\"line\"><span class=\"title\">filterList</span> p (<span class=\"type\">C</span> x xs)</span><br><span class=\"line\">  | p x       = <span class=\"type\">C</span> x (filterList p xs)</span><br><span class=\"line\">  | otherwise = filterList p xs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">mapList</span> :: (a -&gt; b) -&gt; <span class=\"type\">List</span> a -&gt; <span class=\"type\">List</span> b</span><br><span class=\"line\"><span class=\"title\">mapList</span> _ <span class=\"type\">E</span>        = <span class=\"type\">E</span></span><br><span class=\"line\"><span class=\"title\">mapList</span> f (<span class=\"type\">C</span> x xs) = <span class=\"type\">C</span> (f x) (mapList f xs)</span><br></pre></td></tr></table></figure>\n<h3 id=\"The-Prelude\"><a href=\"#The-Prelude\" class=\"headerlink\" title=\"The Prelude\"></a>The Prelude</h3></li>\n</ul>\n<h4 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h4><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Maybe</span> a = <span class=\"type\">Nothing</span> | <span class=\"type\">Just</span> a</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>A value of type Maybe a either contains a value of type a (wrapped in the Just constructor), or it is Nothing (representing some sort of failure or error). The Data.Maybe module has functions for working with Maybe values.</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">maybe</span> <span class=\"literal\">False</span> <span class=\"string\">odd</span> <span class=\"string\">(Just</span> <span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">==</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Total-and-partial-functions\"><a href=\"#Total-and-partial-functions\" class=\"headerlink\" title=\"Total and partial functions\"></a>Total and partial functions</h4><ul>\n<li>Functions which have certain inputs that will make them recurse infinitely are also called partial.</li>\n<li>Functions which are well-defined on all possible inputs are known as total functions.</li>\n<li>head is what is known as a partial function: there are certain inputs for which head will crash.</li>\n<li>tail, init, last, and (!!) are partial functions<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">head</span>(<span class=\"selector-attr\">[]</span>)</span><br><span class=\"line\">*** <span class=\"selector-tag\">Exception</span>: <span class=\"selector-tag\">Prelude</span><span class=\"selector-class\">.head</span>: <span class=\"selector-tag\">empty</span> <span class=\"selector-tag\">list</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Replacing-partial-functions\"><a href=\"#Replacing-partial-functions\" class=\"headerlink\" title=\"Replacing partial functions\"></a>Replacing partial functions</h4>Replace<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doStuff1 :: [<span class=\"built_in\">Int</span>] -&gt; <span class=\"built_in\">Int</span></span><br><span class=\"line\">doStuff1 []  = <span class=\"number\">0</span></span><br><span class=\"line\">doStuff1 [_] = <span class=\"number\">0</span></span><br><span class=\"line\">doStuff1 xs  = head xs + (head (tail xs)) </span><br></pre></td></tr></table></figure>\nas<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doStuff2 :<span class=\"type\"></span>: [<span class=\"keyword\">Int</span>] -&gt; <span class=\"keyword\">Int</span></span><br><span class=\"line\">doStuff2 []        = <span class=\"number\">0</span></span><br><span class=\"line\">doStuff2 [<span class=\"literal\">_</span>]       = <span class=\"number\">0</span></span><br><span class=\"line\">doStuff2 (x1:<span class=\"type\">x2</span>:<span class=\"literal\">_</span>) = x1 + x2</span><br></pre></td></tr></table></figure>\n<h3 id=\"Writing-partial-functions\"><a href=\"#Writing-partial-functions\" class=\"headerlink\" title=\"Writing partial functions\"></a>Writing partial functions</h3></li>\n</ul>\n<p>What if you find yourself writing a partial functions?</p>\n<h4 id=\"Change-the-output-type-of-the-function-to-indicate-the-possible-failure\"><a href=\"#Change-the-output-type-of-the-function-to-indicate-the-possible-failure\" class=\"headerlink\" title=\"Change the output type of the function to indicate the possible failure.\"></a>Change the output type of the function to indicate the possible failure.</h4><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Maybe</span> a = <span class=\"type\">Nothing</span> | <span class=\"type\">Just</span> a</span></span><br></pre></td></tr></table></figure>\n<p>We could rewrite <code>head</code> safely like this<br><figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">safeHead <span class=\"comment\">:: [a] -&gt; Maybe a</span></span><br><span class=\"line\">safeHead []    = Nothing</span><br><span class=\"line\">safeHead (x:_) = Just x</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"if-some-condition-is-really-guaranteed-then-the-types-ought-to-reflect-the-guarantee-Then-the-compiler-can-enforce-your-guarantees-for-you\"><a href=\"#if-some-condition-is-really-guaranteed-then-the-types-ought-to-reflect-the-guarantee-Then-the-compiler-can-enforce-your-guarantees-for-you\" class=\"headerlink\" title=\"if some condition is really guaranteed, then the types ought to reflect the guarantee! Then the compiler can enforce your guarantees for you.\"></a>if some condition is really guaranteed, then the types ought to reflect the guarantee! Then the compiler can enforce your guarantees for you.</h4><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data NonEmptyList <span class=\"keyword\">a</span> = NEL <span class=\"keyword\">a</span> [<span class=\"keyword\">a</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">nelToList :: NonEmptyList <span class=\"keyword\">a</span> -&gt; [<span class=\"keyword\">a</span>]</span><br><span class=\"line\">nelToList (NEL x xs) = x:xs</span><br><span class=\"line\"></span><br><span class=\"line\">listToNel :: [<span class=\"keyword\">a</span>] -&gt; Maybe (NonEmptyList <span class=\"keyword\">a</span>)</span><br><span class=\"line\">listToNel []     = Nothing</span><br><span class=\"line\">listToNel (x:xs) = Just $ NEL x xs</span><br><span class=\"line\"></span><br><span class=\"line\">headNEL :: NonEmptyList <span class=\"keyword\">a</span> -&gt; <span class=\"keyword\">a</span></span><br><span class=\"line\">headNEL (NEL <span class=\"keyword\">a</span> _) = <span class=\"keyword\">a</span></span><br><span class=\"line\"></span><br><span class=\"line\">tailNEL :: NonEmptyList <span class=\"keyword\">a</span> -&gt; [<span class=\"keyword\">a</span>]</span><br><span class=\"line\">tailNEL (NEL _ <span class=\"keyword\">as</span>) = <span class=\"keyword\">as</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Higher-order-programming-and-type-inference\"><a href=\"#Higher-order-programming-and-type-inference\" class=\"headerlink\" title=\"Higher-order programming and type inference\"></a>Higher-order programming and type inference</h2><h3 id=\"Anonymous-functions\"><a href=\"#Anonymous-functions\" class=\"headerlink\" title=\"Anonymous functions\"></a>Anonymous functions</h3><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">gt100</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">gt100</span> x = x &gt; <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">greaterThan100</span> :: [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">greaterThan100</span> xs = filter gt100 xs</span><br></pre></td></tr></table></figure>\n<p>anonymous function:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">greaterThan100_2</span> :: [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">greaterThan100_2</span> xs = filter (\\x -&gt; x &gt; <span class=\"number\">100</span>) xs</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\\x -&gt; x &gt; 100 (the backslash is supposed to look kind of like a lambda with the short leg missing) is the function which takes a single argument x and outputs whether x is greater than 100.</li>\n<li>lambda abstractions can also have multiple arguments.<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\<span class=\"symbol\">x</span> <span class=\"symbol\">y</span> z -&gt; [<span class=\"symbol\">x</span>,<span class=\"number\">2</span>*<span class=\"symbol\">y</span>,<span class=\"number\">3</span>*z]) <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">3</span> == [<span class=\"number\">5</span>,<span class=\"number\">12</span>,<span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure></li>\n<li>if ? is an operator, then (?y) is equivalent to the function \\x -&gt; x ? y, and (y?) is equivalent to \\x -&gt; y ? x.<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">(&gt;100)</span> <span class=\"number\">102</span> <span class=\"string\">==</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">(100&gt;)</span> <span class=\"number\">102</span> <span class=\"string\">==</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<code>(- 1) 2</code>不可行？ </li>\n</ul>\n<h3 id=\"Function-composition\"><a href=\"#Function-composition\" class=\"headerlink\" title=\"Function composition\"></a>Function composition</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span> :: (b -&gt;</span> <span class=\"function\"><span class=\"title\">c</span>) -&gt;</span> (<span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">b</span>) -&gt;</span> (<span class=\"function\"><span class=\"title\">a</span> -&gt;</span> c)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span> f g = \\x -&gt;</span> f (g x)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>foo is really called (.), and represents function composition. That is, if f and g are functions, then f . g is the function which does first g and then f.</li>\n</ul>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myTest :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">myTest xs = even (length (greaterThan100 xs))</span><br></pre></td></tr></table></figure>\n<p>We can rewrite this as:<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myTest :: [Integer] -&gt; <span class=\"built_in\">Bool</span></span><br><span class=\"line\">myTest xs = even.length.greaterThan100 xs</span><br></pre></td></tr></table></figure><br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Prelude&gt; :t (.)</span><br><span class=\"line\">(.) :: (<span class=\"function\"><span class=\"title\">b</span> -&gt;</span> <span class=\"function\"><span class=\"title\">c</span>) -&gt;</span> (<span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">b</span>) -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> c</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Currying-and-partial-application\"><a href=\"#Currying-and-partial-application\" class=\"headerlink\" title=\"Currying and partial application\"></a>Currying and partial application</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f :: <span class=\"built_in\">Int</span> -&gt; <span class=\"built_in\">Int</span> -&gt; <span class=\"built_in\">Int</span></span><br><span class=\"line\">f x y = <span class=\"number\">2</span>*x + y</span><br></pre></td></tr></table></figure>\n<p>equivalently write f’s type like this:<br><figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f&#x27; :: <span class=\"type\">Int</span> -&gt; (<span class=\"type\">Int</span> -&gt; <span class=\"type\">Int</span>)</span><br><span class=\"line\">f&#x27; x y = <span class=\"number\">2</span>*x + y</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>representing multi-argument functions as one-argument functions returning functions</li>\n<li>If we want to actually represent a function of two arguments we can use a single argument which is a tuple.<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f<span class=\"string\">&#x27;&#x27;</span> :: (<span class=\"built_in\">Int</span>,<span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span></span><br><span class=\"line\">f<span class=\"string\">&#x27;&#x27;</span> (x,y) = <span class=\"number\">2</span>*x + y</span><br></pre></td></tr></table></figure></li>\n<li>In order to convert between the two representations of a two-argument function, the standard library defines functions called curry and uncurry, defined like this<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">sch</span>önfinkel :: ((a,b) -&gt;</span> <span class=\"function\"><span class=\"title\">c</span>) -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">b</span> -&gt;</span> c</span><br><span class=\"line\">schönfinkel f x y = f (x,y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">unsch</span>önfinkel :: (a -&gt;</span> <span class=\"function\"><span class=\"title\">b</span> -&gt;</span> <span class=\"function\"><span class=\"title\">c</span>) -&gt;</span> (<span class=\"function\"><span class=\"title\">a</span>,b) -&gt;</span> c</span><br><span class=\"line\">unschönfinkel f (x,y) = f x y</span><br></pre></td></tr></table></figure></li>\n<li><p>uncurry in particular can be useful when you have a pair and want to apply a function to it. For example:</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Prelude</span>&gt; uncurry (+) (<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"attribute\">5</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Partial-application\"><a href=\"#Partial-application\" class=\"headerlink\" title=\"Partial application\"></a>Partial application</h4></li>\n<li><p>In Haskell there are no functions of multiple arguments! </p>\n</li>\n<li>Every function can be “partially applied” to its first (and only) argument, resulting in a function of the remaining arguments.</li>\n<li>Haskell doesn’t make it easy to partially apply to an argument other than the first. </li>\n<li>he one exception is infix operators, which as we’ve seen, can be partially applied to either of their two arguments using an operator section. </li>\n</ul>\n<h4 id=\"Wholemeal-programming\"><a href=\"#Wholemeal-programming\" class=\"headerlink\" title=\"Wholemeal programming\"></a>Wholemeal programming</h4><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foobar :: [Integer] -&gt; Integer</span><br><span class=\"line\">foobar []     = <span class=\"number\">0</span></span><br><span class=\"line\">foobar (x:xs)</span><br><span class=\"line\">  | <span class=\"type\">x</span> &gt; <span class=\"number\">3</span>     = (<span class=\"number\">7</span>*x + <span class=\"number\">2</span>) + foobar xs</span><br><span class=\"line\">  | <span class=\"type\">otherwise</span> = foobar xs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fooba<span class=\"string\">r&#x27; :: [Integer] -&gt; Integer</span></span><br><span class=\"line\"><span class=\"string\">foobar&#x27;</span> = sum . map (\\x -&gt; <span class=\"number\">7</span>*x + <span class=\"number\">2</span>) . filter (&gt;<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Folds\"><a href=\"#Folds\" class=\"headerlink\" title=\"Folds\"></a>Folds</h3><p>We have one more recursion pattern on lists to talk about: folds.<br>all of them somehow “combine” the elements of the list into a final answer.</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">sum&#x27;</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">sum&#x27;</span> []     = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">sum&#x27;</span> (x:xs) = x + sum&#x27; xs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">product&#x27;</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">product&#x27;</span> [] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"title\">product&#x27;</span> (x:xs) = x * product&#x27; xs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">length&#x27;</span> :: [a] -&gt; <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"title\">length&#x27;</span> []     = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">length&#x27;</span> (_:xs) = <span class=\"number\">1</span> + length&#x27; xs</span><br></pre></td></tr></table></figure>\n<p>define higher-order functions:</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">fold</span> :: b -&gt; (a -&gt; b -&gt; b) -&gt; [a] -&gt; b</span><br><span class=\"line\"><span class=\"title\">fold</span> z f []     = z</span><br><span class=\"line\"><span class=\"title\">fold</span> z f (x:xs) = f x (fold z f xs)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">fold</span> f z [a,b,c] == a `f` (b `f` (c `f` z))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">sum&#x27;&#x27;</span>     = fold <span class=\"number\">0</span> (+)</span><br><span class=\"line\"><span class=\"title\">product&#x27;&#x27;</span> = fold <span class=\"number\">1</span> (*)</span><br><span class=\"line\"><span class=\"title\">length&#x27;&#x27;</span>  = fold <span class=\"number\">0</span> (\\_ s -&gt; <span class=\"number\">1</span> + s)</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"type\">Instead</span> <span class=\"keyword\">of</span> (\\_ s -&gt; <span class=\"number\">1</span> + s) we could also write (\\_ -&gt; (<span class=\"number\">1</span>+)) or even (const (<span class=\"number\">1</span>+)).)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>fold is already provided in the standard Prelude, under the name foldr<br>Here are some Prelude functions which are defined in terms of foldr:</li>\n</ul>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">length</span> :: [a] -&gt; <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"title\">sum</span> :: <span class=\"type\">Num</span> a =&gt; [a] -&gt; a</span><br><span class=\"line\"><span class=\"title\">product</span> :: <span class=\"type\">Num</span> a =&gt; [a] -&gt; a</span><br><span class=\"line\"><span class=\"title\">and</span> :: [<span class=\"type\">Bool</span>] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">or</span> :: [<span class=\"type\">Bool</span>] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">any</span> :: (a -&gt; <span class=\"type\">Bool</span>) -&gt; [a] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">all</span> :: (a -&gt; <span class=\"type\">Bool</span>) -&gt; [a] -&gt; <span class=\"type\">Bool</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>There is also foldl, which folds “from the left”. </li>\n</ul>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">foldr</span> f z [a,b,c] == a `f` (b `f` (c `f` z))</span><br><span class=\"line\"><span class=\"title\">foldl</span> f z [a,b,c] == ((z `f` a) `f` b) `f` c</span><br></pre></td></tr></table></figure>\n<ul>\n<li>you should use foldl’ from Data.List instead, which does the same thing as foldl but is more efficient.</li>\n</ul>\n<h2 id=\"More-polymorphism-and-type-classes\"><a href=\"#More-polymorphism-and-type-classes\" class=\"headerlink\" title=\"More polymorphism and type classes\"></a>More polymorphism and type classes</h2><h3 id=\"Parametricity\"><a href=\"#Parametricity\" class=\"headerlink\" title=\"Parametricity\"></a>Parametricity</h3><figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f :: a -&gt; a -&gt; a</span><br><span class=\"line\">f <span class=\"symbol\">x</span> <span class=\"symbol\">y</span> = <span class=\"symbol\">x</span> &amp;&amp; <span class=\"symbol\">y</span></span><br></pre></td></tr></table></figure>\n<p>The reason this doesn’t work is that the caller of a polymorphic function gets to choose the type. Here we, the implementors, have tried to choose a specific type (namely, Bool), but we may be given String, or Int, or even some type defined by someone using f, which we can’t possibly know about in advance. In other words, you can read the type<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> a</span><br></pre></td></tr></table></figure><br>as a promise that a function with this type will work no matter what type the caller chooses.</p>\n<h3 id=\"Two-views-on-parametricity\"><a href=\"#Two-views-on-parametricity\" class=\"headerlink\" title=\"Two views on parametricity\"></a>Two views on parametricity</h3><figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(==) <span class=\"comment\">:: Eq a   =&gt; a -&gt; a -&gt; Bool</span></span><br><span class=\"line\">(&lt;)  <span class=\"comment\">:: Ord a  =&gt; a -&gt; a -&gt; Bool</span></span><br><span class=\"line\">show <span class=\"comment\">:: Show a =&gt; a -&gt; String</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Type-classes\"><a href=\"#Type-classes\" class=\"headerlink\" title=\"Type classes\"></a>Type classes</h3><ul>\n<li>Num, Eq, Ord, and Show are type classes, and we say that (==), (&lt;), and (+) are “type-class polymorphic”.</li>\n<li>Intuitively, type classes correspond to sets of types which have certain operations defined for them, and type class polymorphic functions work only for types which are instances of the type class(es) in question.<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Eq a <span class=\"keyword\">where</span></span><br><span class=\"line\">  (==) :: <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> Bool</span><br><span class=\"line\">  (/=) :: <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> Bool</span><br></pre></td></tr></table></figure></li>\n<li>Eq is declared to be a type class with a single parameter, a.</li>\n<li>Any type a which wants to be an instance of Eq must define two functions, (==) and (/=), with the indicated type signatures.</li>\n</ul>\n<figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(==) <span class=\"comment\">:: Eq a =&gt; a -&gt; a -&gt; Bool</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>The Eq a that comes before the =&gt; is a type class constraint.</li>\n<li>We can read this as saying that for any type a, as long as a is an instance of Eq, (==) can take two values of type a and return a Bool.</li>\n<li>Let’s make our own type and declare an instance of Eq for it. <figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data Foo = F Int | G Char</span><br><span class=\"line\"></span><br><span class=\"line\">instance Eq Foo where</span><br><span class=\"line\">  (F i1) == (F i2) = i1 == i2</span><br><span class=\"line\">  (G c1) == (G c2) = c1 == c2</span><br><span class=\"line\">  _ == _ = False</span><br><span class=\"line\"></span><br><span class=\"line\">  foo1 /= foo2 =<span class=\"built_in\"> not </span>(foo1 == foo2)</span><br></pre></td></tr></table></figure></li>\n<li><p>the Eq class is actually declared like this:</p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Eq a where</span><br><span class=\"line\">  (==), (/=) :: a -&gt; a -&gt; Bool</span><br><span class=\"line\">  <span class=\"symbol\">x</span> == <span class=\"symbol\">y</span> = <span class=\"keyword\">not</span> (<span class=\"symbol\">x</span> /= <span class=\"symbol\">y</span>)</span><br><span class=\"line\">  <span class=\"symbol\">x</span> /= <span class=\"symbol\">y</span> = <span class=\"keyword\">not</span> (<span class=\"symbol\">x</span> == <span class=\"symbol\">y</span>)</span><br></pre></td></tr></table></figure>\n<p>This means that when we make an instance of Eq, we can define either (==) or (/=), whichever is more convenient; </p>\n</li>\n<li><p>As it turns out, Eq (along with a few other standard type classes) is special: GHC is able to automatically generate instances of Eq for us. Like so:</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Foo&#x27;</span> = <span class=\"type\">F&#x27;</span> <span class=\"type\">Int</span> | <span class=\"type\">G&#x27;</span> <span class=\"type\">Char</span></span></span><br><span class=\"line\">  <span class=\"keyword\">deriving</span> (<span class=\"type\">Eq</span>, <span class=\"type\">Ord</span>, <span class=\"type\">Show</span>)</span><br></pre></td></tr></table></figure>\n<p>This tells GHC to automatically derive instances of the Eq, Ord, and Show type classes for our data type Foo.</p>\n</li>\n</ul>\n<h4 id=\"Type-classes-and-Java-interfaces\"><a href=\"#Type-classes-and-Java-interfaces\" class=\"headerlink\" title=\"Type classes and Java interfaces\"></a>Type classes and Java interfaces</h4><ul>\n<li>Both define a set of types/classes which implement a specified list of operations.</li>\n</ul>\n<ol>\n<li>When a Java class is defined, any interfaces it implements must be declared. Type class instances, on the other hand, are declared separately from the declaration of the corresponding types, and can even be put in a separate module.</li>\n<li>The types that can be specified for type class methods are more general and flexible than the signatures that can be given for Java interface methods, especially when multi-parameter type classes enter the picture. For example, consider a hypothetical type class<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Blerg a b <span class=\"keyword\">where</span></span><br><span class=\"line\">  blerg :: a -&gt; b -&gt; <span class=\"built_in\">Bool</span></span><br></pre></td></tr></table></figure>\nUsing blerg amounts to doing multiple dispatch: which implementation of blerg the compiler should choose depends on both the types a and b. There is no easy way to do this in Java.<br>Haskell type classes can also easily handle binary (or ternary, or …) methods, as in<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">Num</span> a <span class=\"keyword\">where</span></span></span><br><span class=\"line\">  (+) :: a -&gt; a -&gt; a</span><br></pre></td></tr></table></figure>\nThere is no nice way to do this in Java: for one thing, one of the two arguments would have to be the “privileged” one which is actually getting the (+) method invoked on it, and this asymmetry is awkward. Furthermore, because of Java’s subtyping, getting two arguments of a certain interface type does not guarantee that they are actually the same type, which makes implementing binary operators such as (+) awkward (usually requiring some runtime type checks).</li>\n</ol>\n<h4 id=\"Standard-type-classes\"><a href=\"#Standard-type-classes\" class=\"headerlink\" title=\"Standard type classes\"></a>Standard type classes</h4><ul>\n<li>Ord is for types whose elements can be totally ordered, that is, where any two elements can be compared to see which is less than the other. It provides comparison operations like (&lt;) and (&lt;=), and also the compare function.</li>\n<li>Num is for “numeric” types, which support things like addition, subtraction, and multipication. One very important thing to note is that integer literals are actually type class polymorphic:<figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Prelude&gt; :t 5</span><br><span class=\"line\">5 <span class=\"comment\">:: Num a =&gt; a</span></span><br></pre></td></tr></table></figure>\nThis means that literals like 5 can be used as Ints, Integers, Doubles, or any other type which is an instance of Num (Rational, Complex Double, or even a type you define…)</li>\n<li>Show defines the method show, which is used to convert values into Strings.</li>\n<li>Read is the dual of Show.</li>\n<li>Integral represents whole number types such as Int and Integer.</li>\n</ul>\n<h4 id=\"A-type-class-example\"><a href=\"#A-type-class-example\" class=\"headerlink\" title=\"A type class example\"></a>A type class example</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Listable a <span class=\"keyword\">where</span></span><br><span class=\"line\">  toList :: a -&gt; [<span class=\"built_in\">Int</span>]</span><br></pre></td></tr></table></figure>\n<p>We can think of Listable as the class of things which can be converted to a list of Ints. Look at the type of toList:<br><figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toList <span class=\"comment\">:: Listable a =&gt; a -&gt; [Int]</span></span><br></pre></td></tr></table></figure><br>First, an Int can be converted to an [Int] just by creating a singleton list, and Bool can be converted similarly, say, by translating True to 1 and False to 0:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Listable</span> <span class=\"type\">Int</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">  <span class=\"comment\">-- toList :: Int -&gt; [Int]</span></span><br><span class=\"line\">  toList x = [x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Listable</span> <span class=\"type\">Bool</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">  toList <span class=\"type\">True</span>  = [<span class=\"number\">1</span>]</span><br><span class=\"line\">  toList <span class=\"type\">False</span> = [<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><br>We don’t need to do any work to convert a list of Int to a list of Int:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Listable</span> [<span class=\"type\">Int</span>] <span class=\"keyword\">where</span></span></span><br><span class=\"line\">    toList = id</span><br></pre></td></tr></table></figure><br>Finally, here’s a binary tree type which we can convert to a list by flattening:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Tree</span> a = <span class=\"type\">Empty</span> | <span class=\"type\">Node</span> a (<span class=\"type\">Tree</span> <span class=\"title\">a</span>) (<span class=\"type\">Tree</span> <span class=\"title\">a</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Listable</span> (<span class=\"type\">Tree</span> <span class=\"type\">Int</span>) <span class=\"keyword\">where</span></span></span><br><span class=\"line\">    toList <span class=\"type\">Node</span>(x,l,r) = toList l ++ [x] ++ toList r</span><br></pre></td></tr></table></figure><br>If we implement other functions in terms of toList, they also get a Listable constraint.<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">sumL</span> x = sum (toList x)</span><br></pre></td></tr></table></figure><br>ghci informs us that type type of sumL is<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">sumL</span> :: <span class=\"type\">Listable</span> a =&gt; a -&gt; <span class=\"type\">Int</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">foo</span> x y = sum (toList x) == sum (toList y) || x &lt; y</span><br></pre></td></tr></table></figure><br>type foo:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">foo</span> :: (<span class=\"type\">Listable</span> a,<span class=\"type\">Ord</span> a) =&gt; a -&gt; a -&gt; <span class=\"type\">Bool</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> (<span class=\"type\">Listable</span> <span class=\"title\">a</span>, <span class=\"type\">Listable</span> <span class=\"title\">b</span>) =&gt; <span class=\"type\">Listable</span> (<span class=\"title\">a</span>,<span class=\"title\">b</span>) <span class=\"keyword\">where</span></span></span><br><span class=\"line\">  toList (x,y) = toList x ++ toList y</span><br></pre></td></tr></table></figure><br>Notice how we can put type class constraints on an instance as well as on a function type. This says that a pair type (a,b) is an instance of Listable as long as a and b both are. Then we get to use toList on values of types a and b in our definition of toList for a pair. Note that this definition is not recursive! The version of toList that we are defining is calling other versions of toList, not itself.</p>\n<h2 id=\"Lazy-evaluation\"><a href=\"#Lazy-evaluation\" class=\"headerlink\" title=\"Lazy evaluation\"></a>Lazy evaluation</h2><h3 id=\"Strict-evaluation\"><a href=\"#Strict-evaluation\" class=\"headerlink\" title=\"Strict evaluation\"></a>Strict evaluation</h3><ul>\n<li>Under a strict evaluation strategy, function arguments are completely evaluated before passing them to the function.</li>\n<li>The benefit of strict evaluation is that it is easy to predict when and in what order things will happen. </li>\n</ul>\n<h3 id=\"Side-effects-and-purity\"><a href=\"#Side-effects-and-purity\" class=\"headerlink\" title=\"Side effects and purity\"></a>Side effects and purity</h3><h3 id=\"Lazy-evaluation-1\"><a href=\"#Lazy-evaluation-1\" class=\"headerlink\" title=\"Lazy evaluation\"></a>Lazy evaluation</h3><ul>\n<li>Under a lazy evaluation strategy, evaluation of function arguments is delayed as long as possible: they are not evaluated until it actually becomes necessary to do so. </li>\n<li>When some expression is given as an argument to a function, it is simply packaged up as an unevaluated expression (called a “thunk”, don’t ask me why) without doing any actual work.<h3 id=\"Pattern-matching-drives-evaluation\"><a href=\"#Pattern-matching-drives-evaluation\" class=\"headerlink\" title=\"Pattern matching drives evaluation\"></a>Pattern matching drives evaluation</h3></li>\n</ul>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">f1</span> :: <span class=\"type\">Maybe</span> a -&gt; [<span class=\"type\">Maybe</span> a]</span><br><span class=\"line\"><span class=\"title\">f1</span> m = [m,m]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">f2</span> :: <span class=\"type\">Maybe</span> a -&gt; [a]</span><br><span class=\"line\"><span class=\"title\">f2</span> <span class=\"type\">Nothing</span>  = []</span><br><span class=\"line\"><span class=\"title\">f2</span> (<span class=\"type\">Just</span> x) = [x]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>f1 uses its argument m, it does not need to know anything about it. m can remain completely unevaluated, and the unevaluated expression is simply put in a list. </li>\n<li>f2, on the other hand, needs to know something about its argument in order to proceed: was it constructed with Nothing or Just.</li>\n<li>The other important thing to note is that thunks are evaluated only enough to allow a pattern match to proceed, and no further!</li>\n<li>suppose we wanted to evaluate f2 (safeHead [3^500, 49]). f2 would force evaluation of the call to safeHead [3^500, 49], which would evaluate to Just (3^500)—note that the 3^500 is not evaluated</li>\n</ul>\n<p><code>Expressions are only evaluated when pattern-matched</code></p>\n<p><code>…only as far as necessary for the match to proceed, and no farther!</code></p>\n<h3 id=\"Consequences\"><a href=\"#Consequences\" class=\"headerlink\" title=\"Consequences\"></a>Consequences</h3><h4 id=\"Purity\"><a href=\"#Purity\" class=\"headerlink\" title=\"Purity\"></a>Purity</h4><h4 id=\"Understanding-space-usage\"><a href=\"#Understanding-space-usage\" class=\"headerlink\" title=\"Understanding space usage\"></a>Understanding space usage</h4><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Standard library function foldl, provided <span class=\"keyword\">for</span> reference</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">foldl</span> :: (b -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">b</span>) -&gt;</span> <span class=\"function\"><span class=\"title\">b</span> -&gt;</span> [<span class=\"function\"><span class=\"title\">a</span>] -&gt;</span> b</span><br><span class=\"line\">foldl _ z []     = z</span><br><span class=\"line\">foldl f z (x:xs) = foldl f (f z x) xs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">  foldl (+) 0 [1,2,3]</span></span><br><span class=\"line\"><span class=\"section\">= foldl (+) (0+1) [2,3]</span></span><br><span class=\"line\"><span class=\"section\">= foldl (+) ((0+1)+2) [3]</span></span><br><span class=\"line\"><span class=\"section\">= foldl (+) (((0+1)+2)+3) []</span></span><br><span class=\"line\"><span class=\"section\">= (((0+1)+2)+3)</span></span><br><span class=\"line\"><span class=\"section\">= ((1+2)+3)</span></span><br><span class=\"line\"><span class=\"section\">= (3+3)</span></span><br><span class=\"line\"><span class=\"section\">= 6</span></span><br></pre></td></tr></table></figure>\n<p>Since the value of the accumulator is not demanded until recursing through the entire list, the accumulator simply builds up a big unevaluated expression (((0+1)+2)+3), which finally gets reduced to a value at the end.</p>\n<ul>\n<li>One is that it’s simply inefficient: there’s no point in transferring all the numbers from the list into a different list-like thing (the accumulator thunk) before actually adding them up. </li>\n<li>The second problem is more subtle, and more insidious: evaluating the expression (((0+1)+2)+3) actually requires pushing the 3 and 2 onto a stack before being able to compute 0+1 and then unwinding the stack, adding along the way.<br>for very long lists it’s a big problem: there is usually not as much space available for the stack, so this can lead to a stack overflow.</li>\n<li>The solution in this case is to use the foldl’ function instead of foldl, which adds a bit of strictness<h4 id=\"Short-circuiting-operators\"><a href=\"#Short-circuiting-operators\" class=\"headerlink\" title=\"Short-circuiting operators\"></a>Short-circuiting operators</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&amp;&amp;) :: <span class=\"built_in\">Bool</span> -&gt; <span class=\"built_in\">Bool</span> -&gt; <span class=\"built_in\">Bool</span></span><br><span class=\"line\"><span class=\"literal\">True</span>  &amp;&amp; x = x</span><br><span class=\"line\"><span class=\"literal\">False</span> &amp;&amp; _ = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"User-defined-control-structures\"><a href=\"#User-defined-control-structures\" class=\"headerlink\" title=\"User-defined control structures\"></a>User-defined control structures</h4>In Haskell, however, we can define if as a library function!<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if&#x27; :: <span class=\"type\">Bool</span> -&gt; a -&gt; a -&gt; a</span><br><span class=\"line\">if&#x27; <span class=\"type\">True</span>  x _ = x</span><br><span class=\"line\">if&#x27; <span class=\"type\">False</span> _ y = y</span><br></pre></td></tr></table></figure>\n<h4 id=\"Infinite-data-structures\"><a href=\"#Infinite-data-structures\" class=\"headerlink\" title=\"Infinite data structures\"></a>Infinite data structures</h4><h4 id=\"Pipelining-wholemeal-programming\"><a href=\"#Pipelining-wholemeal-programming\" class=\"headerlink\" title=\"Pipelining/wholemeal programming\"></a>Pipelining/wholemeal programming</h4></li>\n</ul>\n<h4 id=\"Dynamic-programming\"><a href=\"#Dynamic-programming\" class=\"headerlink\" title=\"Dynamic programming\"></a>Dynamic programming</h4><p>Using lazy evaluation we can get the Haskell runtime to work out the proper order of evaluation for us! For example, here is some Haskell code to solve the 0-1 knapsack problem.<br><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Data.Array</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">knapsack01</span> :: [<span class=\"type\">Double</span>]   <span class=\"comment\">-- values </span></span><br><span class=\"line\">           -&gt; [<span class=\"type\">Integer</span>]  <span class=\"comment\">-- nonnegative weights</span></span><br><span class=\"line\">           -&gt; <span class=\"type\">Integer</span>    <span class=\"comment\">-- knapsack size</span></span><br><span class=\"line\">           -&gt; <span class=\"type\">Double</span>     <span class=\"comment\">-- max possible value</span></span><br><span class=\"line\"><span class=\"title\">knapsack01</span> vs ws maxW = m!(numItems<span class=\"number\">-1</span>, maxW)</span><br><span class=\"line\">  <span class=\"keyword\">where</span> numItems = length vs</span><br><span class=\"line\">        m = array ((<span class=\"number\">-1</span>,<span class=\"number\">0</span>), (numItems<span class=\"number\">-1</span>, maxW)) $</span><br><span class=\"line\">              [((<span class=\"number\">-1</span>,w), <span class=\"number\">0</span>) | w &lt;- [<span class=\"number\">0</span> .. maxW]] ++</span><br><span class=\"line\">              [((i,<span class=\"number\">0</span>), <span class=\"number\">0</span>) | i &lt;- [<span class=\"number\">0</span> .. numItems<span class=\"number\">-1</span>]] ++</span><br><span class=\"line\">              [((i,w), best) </span><br><span class=\"line\">                  | i &lt;- [<span class=\"number\">0</span> .. numItems<span class=\"number\">-1</span>]</span><br><span class=\"line\">                  , w &lt;- [<span class=\"number\">1</span> .. maxW]</span><br><span class=\"line\">                  , <span class=\"keyword\">let</span> best</span><br><span class=\"line\">                          | ws!!i &gt; w  = m!(i<span class=\"number\">-1</span>, w)</span><br><span class=\"line\">                          | otherwise = max (m!(i<span class=\"number\">-1</span>, w)) </span><br><span class=\"line\">                                            (m!(i<span class=\"number\">-1</span>, w - ws!!i) + vs!!i)</span><br><span class=\"line\">              ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">example</span> = knapsack01 [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>] [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>] <span class=\"number\">20</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<h2 id=\"Introduction-to-Haskell\"><a href=\"#Introduction-to-Haskell\" class=\"headerlink\" title=\"Introduction to Haskell\"></a>Introduction to Haskell</h2><ul>\n<li><p>Functions are first-class, that is, functions are values which can be used in exactly the same ways as any other sort of value.</p>\n</li>\n<li><p>The meaning of Haskell programs is centered around evaluating expressions rather than executing instructions.</p>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install haskell-<span class=\"built_in\">platform</span></span><br></pre></td></tr></table></figure>\n<p>开启交互模式</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ghci</span></span><br></pre></td></tr></table></figure>\n<p><code>Ctrl + z</code> 退出交互模式</p>\n</li>\n</ul>\n<p>导入<code>test.hs</code>文件<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:l</span> <span class=\"selector-tag\">test</span><span class=\"selector-class\">.hs</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>GHCi is an interactive Haskell REPL (Read-Eval-Print-Loop) that comes with GHC. At the GHCi prompt, you can evaluate expressions, load Haskell files with :load (:l) (and reload them with :reload (:r)), ask for the type of an expression with :type (:t), and many other things (try :? for a list of commands).<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ex01</span> = <span class=\"number\">3</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">ex02</span> = <span class=\"number\">8</span> / <span class=\"number\">2</span> --(<span class=\"number\">4</span>.<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"attribute\">ex03</span> = mod <span class=\"number\">19</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attribute\">ex04</span> = <span class=\"number\">19</span> `mod` <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attribute\">ex05</span> = <span class=\"number\">7</span> ^ <span class=\"number\">222</span></span><br><span class=\"line\"><span class=\"attribute\">ex06</span> = (-<span class=\"number\">3</span>) * (-<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>backticks</code> make a function name into an infix operator.</li>\n<li>negative numbers must often be surrounded by parentheses, to avoid having the negation sign parsed as subtraction.</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- badArith1 = i + n</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Addition is only between values of the same numeric type, Haskell does not do implicit conversion,you must explicitly convert with:</p>\n<p>fromIntegral: converts from any integral type (Int or Integer) to any other numeric type.</p>\n<p>round, floor, ceiling: convert floating-point numbers to Int or Integer.</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- badArith2 = i / i</span></span><br></pre></td></tr></table></figure></li>\n<li>This is an error since / performs floating-point division only. For integer division we can use div.<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ex07 = i `div` i</span><br></pre></td></tr></table></figure>\n<h3 id=\"Boolean-logic\"><a href=\"#Boolean-logic\" class=\"headerlink\" title=\"Boolean logic\"></a>Boolean logic</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ex08</span> = <span class=\"literal\">True</span> &amp;&amp; <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"attr\">ex09</span> = not (<span class=\"literal\">False</span> || <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"attr\">ex10</span> = <span class=\"number\">2</span> /= <span class=\"number\">3</span> (/= 不等于)</span><br></pre></td></tr></table></figure></li>\n<li><code>if-expressions</code>: if b then t else f</li>\n</ul>\n<p>the else part is required for an if-expression, since the if-expression must result in some value. </p>\n<h3 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"function\"></a>function</h3><ul>\n<li>function application has higher precedence than any infix operators</li>\n</ul>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello1 :: [Char]</span><br><span class=\"line\">hello1 = [<span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">hello2 :: String</span><br><span class=\"line\">hello2 = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">helloSame = hello1 == hello2</span><br></pre></td></tr></table></figure>\n<h2 id=\"Algebraic-Data-Types\"><a href=\"#Algebraic-Data-Types\" class=\"headerlink\" title=\"Algebraic Data Types\"></a>Algebraic Data Types</h2><h3 id=\"Enumeration-types\"><a href=\"#Enumeration-types\" class=\"headerlink\" title=\"Enumeration types\"></a>Enumeration types</h3><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data Thing = Shoe </span><br><span class=\"line\">           | <span class=\"type\">Ship</span> </span><br><span class=\"line\">           | <span class=\"type\">SealingWax</span> </span><br><span class=\"line\">           | <span class=\"type\">Cabbage</span> </span><br><span class=\"line\">           | <span class=\"type\">King</span></span><br><span class=\"line\">  deriving <span class=\"keyword\">Show</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>The deriving Show is a magical incantation which tells GHC to automatically generate default code for converting Things to Strings.<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">shoe </span>:: Thing</span><br><span class=\"line\"><span class=\"keyword\">shoe </span>= <span class=\"keyword\">Shoe</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">listO&#x27;Things </span>:: [Thing]</span><br><span class=\"line\">listO<span class=\"string\">&#x27;Things = [Shoe, SealingWax, King, Cabbage, King]</span></span><br></pre></td></tr></table></figure></li>\n<li>We can write functions on Things by pattern-matching.<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">isSmall ::</span> <span class=\"string\">Thing</span> <span class=\"string\">-&gt;</span> <span class=\"string\">Bool</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">Shoe</span>       <span class=\"string\">=</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">Ship</span>       <span class=\"string\">=</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">SealingWax</span> <span class=\"string\">=</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">Cabbage</span>    <span class=\"string\">=</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">isSmall</span> <span class=\"string\">King</span>       <span class=\"string\">=</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\nor<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">isSmall2 ::</span> <span class=\"string\">Thing</span> <span class=\"string\">-&gt;</span> <span class=\"string\">Bool</span></span><br><span class=\"line\"><span class=\"string\">isSmall2</span> <span class=\"string\">Ship</span> <span class=\"string\">=</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"string\">isSmall2</span> <span class=\"string\">King</span> <span class=\"string\">=</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"string\">isSmall2</span> <span class=\"string\">_</span>    <span class=\"string\">=</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Beyond-enumerations\"><a href=\"#Beyond-enumerations\" class=\"headerlink\" title=\"Beyond enumerations\"></a>Beyond enumerations</h3><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">FailableDouble</span> = <span class=\"type\">Failure</span></span></span><br><span class=\"line\">                    | <span class=\"type\">OK</span> <span class=\"type\">Double</span></span><br><span class=\"line\">  <span class=\"keyword\">deriving</span> <span class=\"type\">Show</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ex01</span> = Failure</span><br><span class=\"line\"><span class=\"attr\">ex02</span> = OK <span class=\"number\">3.4</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">safeDiv :: Double -&gt; Double -&gt; FailableDouble</span><br><span class=\"line\">safeDiv _ <span class=\"number\">0</span> = Failure</span><br><span class=\"line\">safeDiv <span class=\"symbol\">x</span> <span class=\"symbol\">y</span> = OK (<span class=\"symbol\">x</span> / <span class=\"symbol\">y</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">failureToZero :: FailableDouble -&gt; Double</span><br><span class=\"line\">failureToZero Failure = 0</span><br><span class=\"line\">failureToZero (OK d)  = d</span><br></pre></td></tr></table></figure></li>\n<li>Data constructors can have more than one argument.<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Store a <span class=\"keyword\">person</span>&#x27;s name, age, and favourite <span class=\"keyword\">Thing</span>.</span><br><span class=\"line\">data <span class=\"keyword\">Person</span> = <span class=\"keyword\">Person</span> String Int <span class=\"keyword\">Thing</span></span><br><span class=\"line\">  deriving Show</span><br><span class=\"line\"></span><br><span class=\"line\">brent :: <span class=\"keyword\">Person</span></span><br><span class=\"line\">brent = <span class=\"keyword\">Person</span> <span class=\"string\">&quot;Brent&quot;</span> 31 SealingWax</span><br><span class=\"line\"></span><br><span class=\"line\">stan :: <span class=\"keyword\">Person</span></span><br><span class=\"line\">stan  = <span class=\"keyword\">Person</span> <span class=\"string\">&quot;Stan&quot;</span> 94 Cabbage</span><br><span class=\"line\"></span><br><span class=\"line\">getAge :: <span class=\"keyword\">Person</span> -&gt; Int</span><br><span class=\"line\">getAge (<span class=\"keyword\">Person</span> _ a _) = a</span><br></pre></td></tr></table></figure></li>\n<li>the type constructor and data constructor are both named Person.</li>\n</ul>\n<h3 id=\"Algebraic-data-types-in-general\"><a href=\"#Algebraic-data-types-in-general\" class=\"headerlink\" title=\"Algebraic data types in general\"></a>Algebraic data types in general</h3><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data AlgDataType = Co<span class=\"symbol\">nstr1</span> Type<span class=\"number\">11</span> Type<span class=\"number\">12</span></span><br><span class=\"line\">                 | Co<span class=\"symbol\">nstr2</span> Type<span class=\"number\">21</span></span><br><span class=\"line\">                 | Co<span class=\"symbol\">nstr3</span> Type<span class=\"number\">31</span> Type<span class=\"number\">32</span> Type<span class=\"number\">33</span></span><br><span class=\"line\">                 | Co<span class=\"symbol\">nstr4</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>This specifies that a value of type AlgDataType can be constructed in one of four ways.</p>\n</li>\n<li><p>type and data constructor names must always start with a capital letter; variables (including names of functions) must always start with a lowercase letter.</p>\n</li>\n</ul>\n<h3 id=\"Pattern-matching\"><a href=\"#Pattern-matching\" class=\"headerlink\" title=\"Pattern-matching\"></a>Pattern-matching</h3><p>We could write something like<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo <span class=\"comment\">(Constr1 a b)</span>   = ...</span><br><span class=\"line\">foo <span class=\"comment\">(Constr2 a)</span>     = ...</span><br><span class=\"line\">foo <span class=\"comment\">(Constr3 a b c)</span> = ...</span><br><span class=\"line\">foo Co<span class=\"symbol\">nstr4</span>         = ...</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>parentheses are required around patterns consisting of more than just a single constructor.</p>\n</li>\n<li><p>An underscore _ can be used as a “wildcard pattern” which matches anything.</p>\n</li>\n<li><p>A pattern of the form x@pat can be used to match a value against the pattern pat, but also give the name x to the entire value being matched. For example:</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">baz </span>:: Person -&gt; String</span><br><span class=\"line\"><span class=\"keyword\">baz </span>p@(Person n _ _) = <span class=\"string\">&quot;The name field of (&quot;</span> ++ <span class=\"keyword\">show </span>p ++ <span class=\"string\">&quot;) is &quot;</span> ++ n</span><br><span class=\"line\"></span><br><span class=\"line\">*Main&gt; <span class=\"keyword\">baz </span><span class=\"keyword\">brent</span></span><br><span class=\"line\"><span class=\"keyword\">&quot;The </span>name field of (Person \\<span class=\"string\">&quot;Brent\\&quot; 31 SealingWax) is Brent&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>字符串用++连接</p>\n</li>\n<li><p>Patterns can be nested. For example:</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkFav <span class=\"symbol\">:</span><span class=\"symbol\">:</span> Person -&gt; String</span><br><span class=\"line\">checkFav (Person <span class=\"built_in\">n</span> _ SealingWax) = <span class=\"built_in\">n</span> ++ <span class=\"string\">&quot;, you&#x27;re my kind of person!&quot;</span></span><br><span class=\"line\">checkFav (Person <span class=\"built_in\">n</span> _ _)          = <span class=\"built_in\">n</span> ++ <span class=\"string\">&quot;, your favorite thing is lame.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">*Main&gt; checkFav brent</span><br><span class=\"line\"><span class=\"string\">&quot;Brent, you&#x27;re my kind of person!&quot;</span></span><br><span class=\"line\">*Main&gt; checkFav stan</span><br><span class=\"line\"><span class=\"string\">&quot;Stan, your favorite thing is lame.&quot;</span></span><br></pre></td></tr></table></figure>\n<p>In general, the following grammar defines what can be used as a pattern:</p>\n</li>\n</ul>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pat ::= _</span><br><span class=\"line\">     |  <span class=\"keyword\">var</span></span><br><span class=\"line\">     |  <span class=\"keyword\">var</span> @ ( pat )</span><br><span class=\"line\">     |  ( <span class=\"function\"><span class=\"keyword\">Constructor</span> <span class=\"title\">pat1</span> <span class=\"title\">pat2</span> ... <span class=\"title\">patn</span> )</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Case-expressions\"><a href=\"#Case-expressions\" class=\"headerlink\" title=\"Case expressions\"></a>Case expressions</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case <span class=\"built_in\">exp</span> of</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">pat1</span> -&gt;</span> exp1</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">pat2</span> -&gt;</span> exp2</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<p>like this:<br><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ex03 = <span class=\"keyword\">case</span> <span class=\"string\">&quot;Hello&quot;</span> <span class=\"keyword\">of</span></span><br><span class=\"line\">           []      -&gt; <span class=\"number\">3</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"params\">(<span class=\"string\">&#x27;H&#x27;</span>:s)</span> -&gt;</span> length s</span><br><span class=\"line\">           _       -&gt; <span class=\"number\">7</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Recursive-data-types\"><a href=\"#Recursive-data-types\" class=\"headerlink\" title=\"Recursive data types\"></a>Recursive data types</h3><ul>\n<li>A list is either empty, or a single element followed by a remaining list.</li>\n</ul>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> IntList = Empty | Cons <span class=\"built_in\">Int</span> IntList</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Use recursive functions to process recursive data types.<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>ListProd :: IntList -&gt; Int</span><br><span class=\"line\"><span class=\"built_in\">int</span>ListProd Empty      = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>ListProd (Cons x l) = x * <span class=\"built_in\">int</span>ListProd l</span><br></pre></td></tr></table></figure></li>\n<li>we can define a type of binary trees with an Int value stored at each internal node, and a Char stored at each leaf:<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data Tree = Leaf Char</span><br><span class=\"line\">          | <span class=\"keyword\">Node</span> <span class=\"title\">Tree</span> Int Tree</span><br><span class=\"line\">  deriving Show</span><br></pre></td></tr></table></figure>\n<h2 id=\"Haskell-Prelude-function\"><a href=\"#Haskell-Prelude-function\" class=\"headerlink\" title=\"Haskell Prelude function\"></a>Haskell Prelude function</h2></li>\n</ul>\n<h3 id=\"乘方函数\"><a href=\"#乘方函数\" class=\"headerlink\" title=\"乘方函数\"></a>乘方函数</h3><ul>\n<li>^ 的底数可为小数，也可为整数，指数是正整数；</li>\n<li>^^ 的底数是小数，指数是任意整数；</li>\n<li>** 的底数和指数都是小数)</li>\n</ul>\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><ul>\n<li>signum 取符号 <code>signum (-3) == -1</code></li>\n<li>negate 相反数 <code>negate (-1) == 1</code></li>\n<li>abs 绝对值 </li>\n<li>recip 倒数</li>\n<li>floor 向下取整</li>\n<li>ceiling 向上取整</li>\n<li>round 四舍五入</li>\n<li>truncate 取整</li>\n<li>exp e的次幂</li>\n<li>subtract 减去 <code>subtract 3 5 == 2</code></li>\n<li>gcd lcm</li>\n<li>sqrt</li>\n<li>max min</li>\n<li>compare 比较 <code>compare 3 5 == LT</code> <code>compare 5 3 == GT</code> <code>compare 5 5 == EQ</code></li>\n</ul>\n<h3 id=\"三角函数\"><a href=\"#三角函数\" class=\"headerlink\" title=\"三角函数\"></a>三角函数</h3><ul>\n<li>pi</li>\n<li>sin cos</li>\n<li>tan </li>\n<li>asin acos</li>\n<li>atan atan2</li>\n<li>sinh cosh tanh asinh acosh atanh</li>\n</ul>\n<h3 id=\"对数函数\"><a href=\"#对数函数\" class=\"headerlink\" title=\"对数函数\"></a>对数函数</h3><ul>\n<li>log     exp为底</li>\n<li>logBase <code>logBase 10 10 == 1.0</code></li>\n</ul>\n<h3 id=\"判断奇偶\"><a href=\"#判断奇偶\" class=\"headerlink\" title=\"判断奇偶\"></a>判断奇偶</h3><ul>\n<li>odd even</li>\n</ul>\n<h3 id=\"pair函数\"><a href=\"#pair函数\" class=\"headerlink\" title=\"pair函数\"></a>pair函数</h3><ul>\n<li>fst snd</li>\n</ul>\n<h3 id=\"列表函数\"><a href=\"#列表函数\" class=\"headerlink\" title=\"列表函数\"></a>列表函数</h3><ul>\n<li>(!!) 获取列表第几个元素 <code>[0,1,2,3] !! 1 == 1</code></li>\n<li>lookup <code>lookup 2 [(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]== &#39;b&#39;</code> 获取列表中第一个元素为2的元组中第二个元素</li>\n<li>elem notElem 判断元素是否在列表中 <code>elem 2 [1,2,3] == True</code></li>\n<li>null 判断列表是否为空 <code>null [] == True</code></li>\n<li>and or 用于Bool列表 <code>and [False,True,True] == False</code></li>\n<li>all any 判断列表是否所有(存在)元素满足条件 <code>all even [2,3,4] == False</code></li>\n<li>(++) 列表连接</li>\n<li>length 求列表长度</li>\n<li>head 列表第一个元素</li>\n<li>tail 取列表除了第一个元素的所有元素</li>\n<li>last 取列表最后一个元素</li>\n<li>init 取列表除最后一个元素</li>\n<li>reverse 列表反转</li>\n<li>cycle 反复出现列表</li>\n<li>repeat 反复出现某一值</li>\n<li>replicate 重复出现某一值一定次数 <code>replicate 3 1 == [1,1,1]</code></li>\n<li>take <code>take 2 [1, 2, 3, 4] == [1,2]</code> 取列表前两个元素</li>\n<li>drop <code>drop 2 [1, 2, 3, 4] == [3,4]</code> 去除列表前两个元素</li>\n<li>splitAt <code>splitAt 1 [1,2,3,4] == ([1],[2,3,4])</code>分割列表</li>\n<li>takeWhile <code>takeWhile even [2, 4, 5] == [2,4]</code> <code>takeWhile odd [2, 4, 5] == []</code> 获取满足某一条件的前几个元素</li>\n<li>dropWhile <code>dropWhile odd [2, 4, 5] == [5]</code> <code>dropWhile odd [2, 4, 5] == [2,4,5]</code>丢弃满足某一条件的前几个元素</li>\n<li>span <code>span even [2, 4, 5] == ([2,4],[5])</code> 分割列表，规则同 takeWhile</li>\n<li>break <code>break odd [2, 4, 5] == ([2,4],[5])</code>分割列表，规则同 dropWhile</li>\n<li>maximum 列表最大元素</li>\n<li>minimum</li>\n<li>sum</li>\n<li>product 列表元素乘积</li>\n<li>enumFrom <code>enumFrom 2 == [2,3,4,...]</code></li>\n<li>enumFromThen <code>enumFromThen 5 3 == [5,3,1,-1,...]</code></li>\n<li>enumFromThenTo <code>enumFromThenTo 5 3 1 == [5,3,1]</code></li>\n<li>enumFromTo <code>enumFromTo 3 5 == [3,4,5]</code> <code>enumFromTo 3 1 == []</code></li>\n<li>show <code>show [2,3] == &quot;[2,3]&quot;</code> <code>show &quot;2&quot; == &quot;\\&quot;2\\&quot;&quot;</code></li>\n<li>read <code>read &quot;233&quot;::Int == 233</code> <code>read &quot;12&quot;::Double == 12.0</code></li>\n<li>iterate creates an infinite list where the first item is calculated by applying the function on the second argument, the second item by applying the function on the previous result and so on.<br><code>take 4 (iterate (2*) 1) == [1,2,4,8]</code> <code>take 4 (iterate (\\x -&gt; (x+3)*2) 1) == [1,8,22,50]</code></li>\n<li>until applies a function which is passed as the second argument to the third argument and it comapares the result with the condition, if the condition evaluates to True, it prints the result, if not, it passes the result to the finction and repeats the cycle as long as the condition is matched<br><code>until (&gt; 100) (*2) 1 == 128</code> <code>until odd (</code>div<code>2) 400 == 25</code></li>\n<li>zip <code>zip [1, 2] [4, 5] = [(1,4),(2,5)]</code></li>\n<li>zip3 <code>zip3 [1, 2] [4, 5] [7, 8] = [(1,4,7),(2,5,8)]</code></li>\n<li>zipWith <code>zipWith (+) [1, 2, 3] [4, 5, 6] = [5,7,9]</code></li>\n<li>zipWith3 <code>zipWith3 (\\x y z -&gt; x + y + z) [1, 2, 3] [4, 5, 6] [7, 8, 9] == [12,15,18]</code></li>\n<li>unzip <code>unzip [(1, 4), (2, 5), (3, 6)] == ([1,2,3],[4,5,6])</code></li>\n<li>unzip3 <code>unzip3 [(1, 4, 7), (2, 5, 8), (3, 6, 9)] == ([1,2,3],[4,5,6],[7,8,9])</code></li>\n</ul>\n<h4 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h4><ul>\n<li>lines 分割行 <code>lines &quot;abc\\n123\\ndef\\n&quot; == [&quot;abc&quot;,&quot;123&quot;,&quot;def&quot;]</code></li>\n<li>words 分割单词 <code>words &quot;abc\\n123 def\\t&quot; == [&quot;abc&quot;,&quot;123&quot;,&quot;def&quot;]</code></li>\n<li>unlines 合并行 <code>unlines [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] == &quot;a\\nb\\nc\\n&quot;</code></li>\n<li>unwords 合并单词 <code>unwords [&quot;a&quot;,&quot;b&quot;] == &quot;a b&quot;</code></li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>(.) 函数复合 (f.g) x == f(g x)</li>\n<li>($) apply 函数，通常是为了省写括号<br><code>(map Char.toUpper . filter Char.isLower) &quot;ABCdef&quot; == &quot;DEF&quot;</code><br><code>map Char.toUpper . filter Char.isLower $ &quot;ABCdef&quot; == &quot;DEF&quot;</code></li>\n</ul>\n<h2 id=\"Recursion-patterns-polymorphism-and-the-Prelude\"><a href=\"#Recursion-patterns-polymorphism-and-the-Prelude\" class=\"headerlink\" title=\"Recursion patterns, polymorphism, and the Prelude\"></a>Recursion patterns, polymorphism, and the Prelude</h2><h3 id=\"Recursion-patterns\"><a href=\"#Recursion-patterns\" class=\"headerlink\" title=\"Recursion patterns\"></a>Recursion patterns</h3><h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ls</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">addOne <span class=\"attr\">x</span> = x+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">map</span> addOne ls</span><br></pre></td></tr></table></figure>\n<h4 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h4><p>When we want to keep only some elements of a list, and throw others away, based on a test.</p>\n<h4 id=\"Fold\"><a href=\"#Fold\" class=\"headerlink\" title=\"Fold\"></a>Fold</h4><p>“summarize” the elements of the list</p>\n<h3 id=\"Polymorphism\"><a href=\"#Polymorphism\" class=\"headerlink\" title=\"Polymorphism\"></a>Polymorphism</h3><h4 id=\"Polymorphic-data-types\"><a href=\"#Polymorphic-data-types\" class=\"headerlink\" title=\"Polymorphic data types\"></a>Polymorphic data types</h4><p>First, let’s see how to declare a polymorphic data type.<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">List</span> t = <span class=\"type\">E</span> | <span class=\"type\">C</span> t (<span class=\"type\">List</span> <span class=\"title\">t</span>)</span></span><br></pre></td></tr></table></figure><br>非泛型<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">IntList</span> = <span class=\"type\">Empty</span> | <span class=\"type\">Cons</span> <span class=\"type\">Int</span> <span class=\"type\">IntList</span></span></span><br><span class=\"line\">  <span class=\"keyword\">deriving</span> <span class=\"type\">Show</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>We have data List t = … The t is a type variable which can stand for any type. </li>\n<li>data List t = … means that the List type is parameterized by a type, in much the same way that a function can be parameterized by some input.<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">lst1</span> <span class=\"operator\">::</span> <span class=\"built_in\">List</span> <span class=\"variable\">Int</span></span><br><span class=\"line\"><span class=\"variable\">lst1</span> <span class=\"operator\">=</span> <span class=\"built_in\">C</span> <span class=\"number\">3</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"number\">5</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"number\">2</span> <span class=\"built_in\">E</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">lst2</span> <span class=\"operator\">::</span> <span class=\"built_in\">List</span> <span class=\"variable\">Char</span></span><br><span class=\"line\"><span class=\"variable\">lst2</span> <span class=\"operator\">=</span> <span class=\"built_in\">C</span> <span class=\"operator\">&#x27;</span><span class=\"variable\">x</span><span class=\"operator\">&#x27;</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"operator\">&#x27;</span><span class=\"variable\">y</span><span class=\"operator\">&#x27;</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"operator\">&#x27;</span><span class=\"variable\">z</span><span class=\"operator\">&#x27;</span> <span class=\"built_in\">E</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">lst3</span> <span class=\"operator\">::</span> <span class=\"built_in\">List</span> <span class=\"variable\">Bool</span></span><br><span class=\"line\"><span class=\"variable\">lst3</span> <span class=\"operator\">=</span> <span class=\"built_in\">C</span> <span class=\"built_in\">True</span> <span class=\"punctuation\">(</span><span class=\"built_in\">C</span> <span class=\"built_in\">False</span> <span class=\"built_in\">E</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Polymorphic-functions\"><a href=\"#Polymorphic-functions\" class=\"headerlink\" title=\"Polymorphic functions\"></a>Polymorphic functions</h4><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">filterList</span> :: (t -&gt; <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">List</span> t -&gt; <span class=\"type\">List</span> t    </span><br><span class=\"line\"><span class=\"title\">filterList</span> _ <span class=\"type\">E</span> = <span class=\"type\">E</span></span><br><span class=\"line\"><span class=\"title\">filterList</span> p (<span class=\"type\">C</span> x xs)</span><br><span class=\"line\">  | p x       = <span class=\"type\">C</span> x (filterList p xs)</span><br><span class=\"line\">  | otherwise = filterList p xs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">mapList</span> :: (a -&gt; b) -&gt; <span class=\"type\">List</span> a -&gt; <span class=\"type\">List</span> b</span><br><span class=\"line\"><span class=\"title\">mapList</span> _ <span class=\"type\">E</span>        = <span class=\"type\">E</span></span><br><span class=\"line\"><span class=\"title\">mapList</span> f (<span class=\"type\">C</span> x xs) = <span class=\"type\">C</span> (f x) (mapList f xs)</span><br></pre></td></tr></table></figure>\n<h3 id=\"The-Prelude\"><a href=\"#The-Prelude\" class=\"headerlink\" title=\"The Prelude\"></a>The Prelude</h3></li>\n</ul>\n<h4 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h4><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Maybe</span> a = <span class=\"type\">Nothing</span> | <span class=\"type\">Just</span> a</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>A value of type Maybe a either contains a value of type a (wrapped in the Just constructor), or it is Nothing (representing some sort of failure or error). The Data.Maybe module has functions for working with Maybe values.</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">maybe</span> <span class=\"literal\">False</span> <span class=\"string\">odd</span> <span class=\"string\">(Just</span> <span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">==</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Total-and-partial-functions\"><a href=\"#Total-and-partial-functions\" class=\"headerlink\" title=\"Total and partial functions\"></a>Total and partial functions</h4><ul>\n<li>Functions which have certain inputs that will make them recurse infinitely are also called partial.</li>\n<li>Functions which are well-defined on all possible inputs are known as total functions.</li>\n<li>head is what is known as a partial function: there are certain inputs for which head will crash.</li>\n<li>tail, init, last, and (!!) are partial functions<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">head</span>(<span class=\"selector-attr\">[]</span>)</span><br><span class=\"line\">*** <span class=\"selector-tag\">Exception</span>: <span class=\"selector-tag\">Prelude</span><span class=\"selector-class\">.head</span>: <span class=\"selector-tag\">empty</span> <span class=\"selector-tag\">list</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Replacing-partial-functions\"><a href=\"#Replacing-partial-functions\" class=\"headerlink\" title=\"Replacing partial functions\"></a>Replacing partial functions</h4>Replace<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doStuff1 :: [<span class=\"built_in\">Int</span>] -&gt; <span class=\"built_in\">Int</span></span><br><span class=\"line\">doStuff1 []  = <span class=\"number\">0</span></span><br><span class=\"line\">doStuff1 [_] = <span class=\"number\">0</span></span><br><span class=\"line\">doStuff1 xs  = head xs + (head (tail xs)) </span><br></pre></td></tr></table></figure>\nas<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doStuff2 :<span class=\"type\"></span>: [<span class=\"keyword\">Int</span>] -&gt; <span class=\"keyword\">Int</span></span><br><span class=\"line\">doStuff2 []        = <span class=\"number\">0</span></span><br><span class=\"line\">doStuff2 [<span class=\"literal\">_</span>]       = <span class=\"number\">0</span></span><br><span class=\"line\">doStuff2 (x1:<span class=\"type\">x2</span>:<span class=\"literal\">_</span>) = x1 + x2</span><br></pre></td></tr></table></figure>\n<h3 id=\"Writing-partial-functions\"><a href=\"#Writing-partial-functions\" class=\"headerlink\" title=\"Writing partial functions\"></a>Writing partial functions</h3></li>\n</ul>\n<p>What if you find yourself writing a partial functions?</p>\n<h4 id=\"Change-the-output-type-of-the-function-to-indicate-the-possible-failure\"><a href=\"#Change-the-output-type-of-the-function-to-indicate-the-possible-failure\" class=\"headerlink\" title=\"Change the output type of the function to indicate the possible failure.\"></a>Change the output type of the function to indicate the possible failure.</h4><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Maybe</span> a = <span class=\"type\">Nothing</span> | <span class=\"type\">Just</span> a</span></span><br></pre></td></tr></table></figure>\n<p>We could rewrite <code>head</code> safely like this<br><figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">safeHead <span class=\"comment\">:: [a] -&gt; Maybe a</span></span><br><span class=\"line\">safeHead []    = Nothing</span><br><span class=\"line\">safeHead (x:_) = Just x</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"if-some-condition-is-really-guaranteed-then-the-types-ought-to-reflect-the-guarantee-Then-the-compiler-can-enforce-your-guarantees-for-you\"><a href=\"#if-some-condition-is-really-guaranteed-then-the-types-ought-to-reflect-the-guarantee-Then-the-compiler-can-enforce-your-guarantees-for-you\" class=\"headerlink\" title=\"if some condition is really guaranteed, then the types ought to reflect the guarantee! Then the compiler can enforce your guarantees for you.\"></a>if some condition is really guaranteed, then the types ought to reflect the guarantee! Then the compiler can enforce your guarantees for you.</h4><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data NonEmptyList <span class=\"keyword\">a</span> = NEL <span class=\"keyword\">a</span> [<span class=\"keyword\">a</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">nelToList :: NonEmptyList <span class=\"keyword\">a</span> -&gt; [<span class=\"keyword\">a</span>]</span><br><span class=\"line\">nelToList (NEL x xs) = x:xs</span><br><span class=\"line\"></span><br><span class=\"line\">listToNel :: [<span class=\"keyword\">a</span>] -&gt; Maybe (NonEmptyList <span class=\"keyword\">a</span>)</span><br><span class=\"line\">listToNel []     = Nothing</span><br><span class=\"line\">listToNel (x:xs) = Just $ NEL x xs</span><br><span class=\"line\"></span><br><span class=\"line\">headNEL :: NonEmptyList <span class=\"keyword\">a</span> -&gt; <span class=\"keyword\">a</span></span><br><span class=\"line\">headNEL (NEL <span class=\"keyword\">a</span> _) = <span class=\"keyword\">a</span></span><br><span class=\"line\"></span><br><span class=\"line\">tailNEL :: NonEmptyList <span class=\"keyword\">a</span> -&gt; [<span class=\"keyword\">a</span>]</span><br><span class=\"line\">tailNEL (NEL _ <span class=\"keyword\">as</span>) = <span class=\"keyword\">as</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Higher-order-programming-and-type-inference\"><a href=\"#Higher-order-programming-and-type-inference\" class=\"headerlink\" title=\"Higher-order programming and type inference\"></a>Higher-order programming and type inference</h2><h3 id=\"Anonymous-functions\"><a href=\"#Anonymous-functions\" class=\"headerlink\" title=\"Anonymous functions\"></a>Anonymous functions</h3><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">gt100</span> :: <span class=\"type\">Integer</span> -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">gt100</span> x = x &gt; <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">greaterThan100</span> :: [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">greaterThan100</span> xs = filter gt100 xs</span><br></pre></td></tr></table></figure>\n<p>anonymous function:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">greaterThan100_2</span> :: [<span class=\"type\">Integer</span>] -&gt; [<span class=\"type\">Integer</span>]</span><br><span class=\"line\"><span class=\"title\">greaterThan100_2</span> xs = filter (\\x -&gt; x &gt; <span class=\"number\">100</span>) xs</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\\x -&gt; x &gt; 100 (the backslash is supposed to look kind of like a lambda with the short leg missing) is the function which takes a single argument x and outputs whether x is greater than 100.</li>\n<li>lambda abstractions can also have multiple arguments.<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\<span class=\"symbol\">x</span> <span class=\"symbol\">y</span> z -&gt; [<span class=\"symbol\">x</span>,<span class=\"number\">2</span>*<span class=\"symbol\">y</span>,<span class=\"number\">3</span>*z]) <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">3</span> == [<span class=\"number\">5</span>,<span class=\"number\">12</span>,<span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure></li>\n<li>if ? is an operator, then (?y) is equivalent to the function \\x -&gt; x ? y, and (y?) is equivalent to \\x -&gt; y ? x.<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">(&gt;100)</span> <span class=\"number\">102</span> <span class=\"string\">==</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">(100&gt;)</span> <span class=\"number\">102</span> <span class=\"string\">==</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<code>(- 1) 2</code>不可行？ </li>\n</ul>\n<h3 id=\"Function-composition\"><a href=\"#Function-composition\" class=\"headerlink\" title=\"Function composition\"></a>Function composition</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span> :: (b -&gt;</span> <span class=\"function\"><span class=\"title\">c</span>) -&gt;</span> (<span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">b</span>) -&gt;</span> (<span class=\"function\"><span class=\"title\">a</span> -&gt;</span> c)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span> f g = \\x -&gt;</span> f (g x)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>foo is really called (.), and represents function composition. That is, if f and g are functions, then f . g is the function which does first g and then f.</li>\n</ul>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myTest :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">myTest xs = even (length (greaterThan100 xs))</span><br></pre></td></tr></table></figure>\n<p>We can rewrite this as:<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myTest :: [Integer] -&gt; <span class=\"built_in\">Bool</span></span><br><span class=\"line\">myTest xs = even.length.greaterThan100 xs</span><br></pre></td></tr></table></figure><br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Prelude&gt; :t (.)</span><br><span class=\"line\">(.) :: (<span class=\"function\"><span class=\"title\">b</span> -&gt;</span> <span class=\"function\"><span class=\"title\">c</span>) -&gt;</span> (<span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">b</span>) -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> c</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Currying-and-partial-application\"><a href=\"#Currying-and-partial-application\" class=\"headerlink\" title=\"Currying and partial application\"></a>Currying and partial application</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f :: <span class=\"built_in\">Int</span> -&gt; <span class=\"built_in\">Int</span> -&gt; <span class=\"built_in\">Int</span></span><br><span class=\"line\">f x y = <span class=\"number\">2</span>*x + y</span><br></pre></td></tr></table></figure>\n<p>equivalently write f’s type like this:<br><figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f&#x27; :: <span class=\"type\">Int</span> -&gt; (<span class=\"type\">Int</span> -&gt; <span class=\"type\">Int</span>)</span><br><span class=\"line\">f&#x27; x y = <span class=\"number\">2</span>*x + y</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>representing multi-argument functions as one-argument functions returning functions</li>\n<li>If we want to actually represent a function of two arguments we can use a single argument which is a tuple.<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f<span class=\"string\">&#x27;&#x27;</span> :: (<span class=\"built_in\">Int</span>,<span class=\"built_in\">Int</span>) -&gt; <span class=\"built_in\">Int</span></span><br><span class=\"line\">f<span class=\"string\">&#x27;&#x27;</span> (x,y) = <span class=\"number\">2</span>*x + y</span><br></pre></td></tr></table></figure></li>\n<li>In order to convert between the two representations of a two-argument function, the standard library defines functions called curry and uncurry, defined like this<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">sch</span>önfinkel :: ((a,b) -&gt;</span> <span class=\"function\"><span class=\"title\">c</span>) -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">b</span> -&gt;</span> c</span><br><span class=\"line\">schönfinkel f x y = f (x,y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">unsch</span>önfinkel :: (a -&gt;</span> <span class=\"function\"><span class=\"title\">b</span> -&gt;</span> <span class=\"function\"><span class=\"title\">c</span>) -&gt;</span> (<span class=\"function\"><span class=\"title\">a</span>,b) -&gt;</span> c</span><br><span class=\"line\">unschönfinkel f (x,y) = f x y</span><br></pre></td></tr></table></figure></li>\n<li><p>uncurry in particular can be useful when you have a pair and want to apply a function to it. For example:</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Prelude</span>&gt; uncurry (+) (<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"attribute\">5</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Partial-application\"><a href=\"#Partial-application\" class=\"headerlink\" title=\"Partial application\"></a>Partial application</h4></li>\n<li><p>In Haskell there are no functions of multiple arguments! </p>\n</li>\n<li>Every function can be “partially applied” to its first (and only) argument, resulting in a function of the remaining arguments.</li>\n<li>Haskell doesn’t make it easy to partially apply to an argument other than the first. </li>\n<li>he one exception is infix operators, which as we’ve seen, can be partially applied to either of their two arguments using an operator section. </li>\n</ul>\n<h4 id=\"Wholemeal-programming\"><a href=\"#Wholemeal-programming\" class=\"headerlink\" title=\"Wholemeal programming\"></a>Wholemeal programming</h4><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foobar :: [Integer] -&gt; Integer</span><br><span class=\"line\">foobar []     = <span class=\"number\">0</span></span><br><span class=\"line\">foobar (x:xs)</span><br><span class=\"line\">  | <span class=\"type\">x</span> &gt; <span class=\"number\">3</span>     = (<span class=\"number\">7</span>*x + <span class=\"number\">2</span>) + foobar xs</span><br><span class=\"line\">  | <span class=\"type\">otherwise</span> = foobar xs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fooba<span class=\"string\">r&#x27; :: [Integer] -&gt; Integer</span></span><br><span class=\"line\"><span class=\"string\">foobar&#x27;</span> = sum . map (\\x -&gt; <span class=\"number\">7</span>*x + <span class=\"number\">2</span>) . filter (&gt;<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Folds\"><a href=\"#Folds\" class=\"headerlink\" title=\"Folds\"></a>Folds</h3><p>We have one more recursion pattern on lists to talk about: folds.<br>all of them somehow “combine” the elements of the list into a final answer.</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">sum&#x27;</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">sum&#x27;</span> []     = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">sum&#x27;</span> (x:xs) = x + sum&#x27; xs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">product&#x27;</span> :: [<span class=\"type\">Integer</span>] -&gt; <span class=\"type\">Integer</span></span><br><span class=\"line\"><span class=\"title\">product&#x27;</span> [] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"title\">product&#x27;</span> (x:xs) = x * product&#x27; xs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">length&#x27;</span> :: [a] -&gt; <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"title\">length&#x27;</span> []     = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title\">length&#x27;</span> (_:xs) = <span class=\"number\">1</span> + length&#x27; xs</span><br></pre></td></tr></table></figure>\n<p>define higher-order functions:</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">fold</span> :: b -&gt; (a -&gt; b -&gt; b) -&gt; [a] -&gt; b</span><br><span class=\"line\"><span class=\"title\">fold</span> z f []     = z</span><br><span class=\"line\"><span class=\"title\">fold</span> z f (x:xs) = f x (fold z f xs)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">fold</span> f z [a,b,c] == a `f` (b `f` (c `f` z))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">sum&#x27;&#x27;</span>     = fold <span class=\"number\">0</span> (+)</span><br><span class=\"line\"><span class=\"title\">product&#x27;&#x27;</span> = fold <span class=\"number\">1</span> (*)</span><br><span class=\"line\"><span class=\"title\">length&#x27;&#x27;</span>  = fold <span class=\"number\">0</span> (\\_ s -&gt; <span class=\"number\">1</span> + s)</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"type\">Instead</span> <span class=\"keyword\">of</span> (\\_ s -&gt; <span class=\"number\">1</span> + s) we could also write (\\_ -&gt; (<span class=\"number\">1</span>+)) or even (const (<span class=\"number\">1</span>+)).)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>fold is already provided in the standard Prelude, under the name foldr<br>Here are some Prelude functions which are defined in terms of foldr:</li>\n</ul>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">length</span> :: [a] -&gt; <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"title\">sum</span> :: <span class=\"type\">Num</span> a =&gt; [a] -&gt; a</span><br><span class=\"line\"><span class=\"title\">product</span> :: <span class=\"type\">Num</span> a =&gt; [a] -&gt; a</span><br><span class=\"line\"><span class=\"title\">and</span> :: [<span class=\"type\">Bool</span>] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">or</span> :: [<span class=\"type\">Bool</span>] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">any</span> :: (a -&gt; <span class=\"type\">Bool</span>) -&gt; [a] -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\"><span class=\"title\">all</span> :: (a -&gt; <span class=\"type\">Bool</span>) -&gt; [a] -&gt; <span class=\"type\">Bool</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>There is also foldl, which folds “from the left”. </li>\n</ul>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">foldr</span> f z [a,b,c] == a `f` (b `f` (c `f` z))</span><br><span class=\"line\"><span class=\"title\">foldl</span> f z [a,b,c] == ((z `f` a) `f` b) `f` c</span><br></pre></td></tr></table></figure>\n<ul>\n<li>you should use foldl’ from Data.List instead, which does the same thing as foldl but is more efficient.</li>\n</ul>\n<h2 id=\"More-polymorphism-and-type-classes\"><a href=\"#More-polymorphism-and-type-classes\" class=\"headerlink\" title=\"More polymorphism and type classes\"></a>More polymorphism and type classes</h2><h3 id=\"Parametricity\"><a href=\"#Parametricity\" class=\"headerlink\" title=\"Parametricity\"></a>Parametricity</h3><figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f :: a -&gt; a -&gt; a</span><br><span class=\"line\">f <span class=\"symbol\">x</span> <span class=\"symbol\">y</span> = <span class=\"symbol\">x</span> &amp;&amp; <span class=\"symbol\">y</span></span><br></pre></td></tr></table></figure>\n<p>The reason this doesn’t work is that the caller of a polymorphic function gets to choose the type. Here we, the implementors, have tried to choose a specific type (namely, Bool), but we may be given String, or Int, or even some type defined by someone using f, which we can’t possibly know about in advance. In other words, you can read the type<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> a</span><br></pre></td></tr></table></figure><br>as a promise that a function with this type will work no matter what type the caller chooses.</p>\n<h3 id=\"Two-views-on-parametricity\"><a href=\"#Two-views-on-parametricity\" class=\"headerlink\" title=\"Two views on parametricity\"></a>Two views on parametricity</h3><figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(==) <span class=\"comment\">:: Eq a   =&gt; a -&gt; a -&gt; Bool</span></span><br><span class=\"line\">(&lt;)  <span class=\"comment\">:: Ord a  =&gt; a -&gt; a -&gt; Bool</span></span><br><span class=\"line\">show <span class=\"comment\">:: Show a =&gt; a -&gt; String</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Type-classes\"><a href=\"#Type-classes\" class=\"headerlink\" title=\"Type classes\"></a>Type classes</h3><ul>\n<li>Num, Eq, Ord, and Show are type classes, and we say that (==), (&lt;), and (+) are “type-class polymorphic”.</li>\n<li>Intuitively, type classes correspond to sets of types which have certain operations defined for them, and type class polymorphic functions work only for types which are instances of the type class(es) in question.<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Eq a <span class=\"keyword\">where</span></span><br><span class=\"line\">  (==) :: <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> Bool</span><br><span class=\"line\">  (/=) :: <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> Bool</span><br></pre></td></tr></table></figure></li>\n<li>Eq is declared to be a type class with a single parameter, a.</li>\n<li>Any type a which wants to be an instance of Eq must define two functions, (==) and (/=), with the indicated type signatures.</li>\n</ul>\n<figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(==) <span class=\"comment\">:: Eq a =&gt; a -&gt; a -&gt; Bool</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>The Eq a that comes before the =&gt; is a type class constraint.</li>\n<li>We can read this as saying that for any type a, as long as a is an instance of Eq, (==) can take two values of type a and return a Bool.</li>\n<li>Let’s make our own type and declare an instance of Eq for it. <figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data Foo = F Int | G Char</span><br><span class=\"line\"></span><br><span class=\"line\">instance Eq Foo where</span><br><span class=\"line\">  (F i1) == (F i2) = i1 == i2</span><br><span class=\"line\">  (G c1) == (G c2) = c1 == c2</span><br><span class=\"line\">  _ == _ = False</span><br><span class=\"line\"></span><br><span class=\"line\">  foo1 /= foo2 =<span class=\"built_in\"> not </span>(foo1 == foo2)</span><br></pre></td></tr></table></figure></li>\n<li><p>the Eq class is actually declared like this:</p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Eq a where</span><br><span class=\"line\">  (==), (/=) :: a -&gt; a -&gt; Bool</span><br><span class=\"line\">  <span class=\"symbol\">x</span> == <span class=\"symbol\">y</span> = <span class=\"keyword\">not</span> (<span class=\"symbol\">x</span> /= <span class=\"symbol\">y</span>)</span><br><span class=\"line\">  <span class=\"symbol\">x</span> /= <span class=\"symbol\">y</span> = <span class=\"keyword\">not</span> (<span class=\"symbol\">x</span> == <span class=\"symbol\">y</span>)</span><br></pre></td></tr></table></figure>\n<p>This means that when we make an instance of Eq, we can define either (==) or (/=), whichever is more convenient; </p>\n</li>\n<li><p>As it turns out, Eq (along with a few other standard type classes) is special: GHC is able to automatically generate instances of Eq for us. Like so:</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Foo&#x27;</span> = <span class=\"type\">F&#x27;</span> <span class=\"type\">Int</span> | <span class=\"type\">G&#x27;</span> <span class=\"type\">Char</span></span></span><br><span class=\"line\">  <span class=\"keyword\">deriving</span> (<span class=\"type\">Eq</span>, <span class=\"type\">Ord</span>, <span class=\"type\">Show</span>)</span><br></pre></td></tr></table></figure>\n<p>This tells GHC to automatically derive instances of the Eq, Ord, and Show type classes for our data type Foo.</p>\n</li>\n</ul>\n<h4 id=\"Type-classes-and-Java-interfaces\"><a href=\"#Type-classes-and-Java-interfaces\" class=\"headerlink\" title=\"Type classes and Java interfaces\"></a>Type classes and Java interfaces</h4><ul>\n<li>Both define a set of types/classes which implement a specified list of operations.</li>\n</ul>\n<ol>\n<li>When a Java class is defined, any interfaces it implements must be declared. Type class instances, on the other hand, are declared separately from the declaration of the corresponding types, and can even be put in a separate module.</li>\n<li>The types that can be specified for type class methods are more general and flexible than the signatures that can be given for Java interface methods, especially when multi-parameter type classes enter the picture. For example, consider a hypothetical type class<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Blerg a b <span class=\"keyword\">where</span></span><br><span class=\"line\">  blerg :: a -&gt; b -&gt; <span class=\"built_in\">Bool</span></span><br></pre></td></tr></table></figure>\nUsing blerg amounts to doing multiple dispatch: which implementation of blerg the compiler should choose depends on both the types a and b. There is no easy way to do this in Java.<br>Haskell type classes can also easily handle binary (or ternary, or …) methods, as in<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">Num</span> a <span class=\"keyword\">where</span></span></span><br><span class=\"line\">  (+) :: a -&gt; a -&gt; a</span><br></pre></td></tr></table></figure>\nThere is no nice way to do this in Java: for one thing, one of the two arguments would have to be the “privileged” one which is actually getting the (+) method invoked on it, and this asymmetry is awkward. Furthermore, because of Java’s subtyping, getting two arguments of a certain interface type does not guarantee that they are actually the same type, which makes implementing binary operators such as (+) awkward (usually requiring some runtime type checks).</li>\n</ol>\n<h4 id=\"Standard-type-classes\"><a href=\"#Standard-type-classes\" class=\"headerlink\" title=\"Standard type classes\"></a>Standard type classes</h4><ul>\n<li>Ord is for types whose elements can be totally ordered, that is, where any two elements can be compared to see which is less than the other. It provides comparison operations like (&lt;) and (&lt;=), and also the compare function.</li>\n<li>Num is for “numeric” types, which support things like addition, subtraction, and multipication. One very important thing to note is that integer literals are actually type class polymorphic:<figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Prelude&gt; :t 5</span><br><span class=\"line\">5 <span class=\"comment\">:: Num a =&gt; a</span></span><br></pre></td></tr></table></figure>\nThis means that literals like 5 can be used as Ints, Integers, Doubles, or any other type which is an instance of Num (Rational, Complex Double, or even a type you define…)</li>\n<li>Show defines the method show, which is used to convert values into Strings.</li>\n<li>Read is the dual of Show.</li>\n<li>Integral represents whole number types such as Int and Integer.</li>\n</ul>\n<h4 id=\"A-type-class-example\"><a href=\"#A-type-class-example\" class=\"headerlink\" title=\"A type class example\"></a>A type class example</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Listable a <span class=\"keyword\">where</span></span><br><span class=\"line\">  toList :: a -&gt; [<span class=\"built_in\">Int</span>]</span><br></pre></td></tr></table></figure>\n<p>We can think of Listable as the class of things which can be converted to a list of Ints. Look at the type of toList:<br><figure class=\"highlight mizar\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toList <span class=\"comment\">:: Listable a =&gt; a -&gt; [Int]</span></span><br></pre></td></tr></table></figure><br>First, an Int can be converted to an [Int] just by creating a singleton list, and Bool can be converted similarly, say, by translating True to 1 and False to 0:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Listable</span> <span class=\"type\">Int</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">  <span class=\"comment\">-- toList :: Int -&gt; [Int]</span></span><br><span class=\"line\">  toList x = [x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Listable</span> <span class=\"type\">Bool</span> <span class=\"keyword\">where</span></span></span><br><span class=\"line\">  toList <span class=\"type\">True</span>  = [<span class=\"number\">1</span>]</span><br><span class=\"line\">  toList <span class=\"type\">False</span> = [<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><br>We don’t need to do any work to convert a list of Int to a list of Int:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Listable</span> [<span class=\"type\">Int</span>] <span class=\"keyword\">where</span></span></span><br><span class=\"line\">    toList = id</span><br></pre></td></tr></table></figure><br>Finally, here’s a binary tree type which we can convert to a list by flattening:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> <span class=\"type\">Tree</span> a = <span class=\"type\">Empty</span> | <span class=\"type\">Node</span> a (<span class=\"type\">Tree</span> <span class=\"title\">a</span>) (<span class=\"type\">Tree</span> <span class=\"title\">a</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> <span class=\"type\">Listable</span> (<span class=\"type\">Tree</span> <span class=\"type\">Int</span>) <span class=\"keyword\">where</span></span></span><br><span class=\"line\">    toList <span class=\"type\">Node</span>(x,l,r) = toList l ++ [x] ++ toList r</span><br></pre></td></tr></table></figure><br>If we implement other functions in terms of toList, they also get a Listable constraint.<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">sumL</span> x = sum (toList x)</span><br></pre></td></tr></table></figure><br>ghci informs us that type type of sumL is<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">sumL</span> :: <span class=\"type\">Listable</span> a =&gt; a -&gt; <span class=\"type\">Int</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">foo</span> x y = sum (toList x) == sum (toList y) || x &lt; y</span><br></pre></td></tr></table></figure><br>type foo:<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">foo</span> :: (<span class=\"type\">Listable</span> a,<span class=\"type\">Ord</span> a) =&gt; a -&gt; a -&gt; <span class=\"type\">Bool</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">instance</span> (<span class=\"type\">Listable</span> <span class=\"title\">a</span>, <span class=\"type\">Listable</span> <span class=\"title\">b</span>) =&gt; <span class=\"type\">Listable</span> (<span class=\"title\">a</span>,<span class=\"title\">b</span>) <span class=\"keyword\">where</span></span></span><br><span class=\"line\">  toList (x,y) = toList x ++ toList y</span><br></pre></td></tr></table></figure><br>Notice how we can put type class constraints on an instance as well as on a function type. This says that a pair type (a,b) is an instance of Listable as long as a and b both are. Then we get to use toList on values of types a and b in our definition of toList for a pair. Note that this definition is not recursive! The version of toList that we are defining is calling other versions of toList, not itself.</p>\n<h2 id=\"Lazy-evaluation\"><a href=\"#Lazy-evaluation\" class=\"headerlink\" title=\"Lazy evaluation\"></a>Lazy evaluation</h2><h3 id=\"Strict-evaluation\"><a href=\"#Strict-evaluation\" class=\"headerlink\" title=\"Strict evaluation\"></a>Strict evaluation</h3><ul>\n<li>Under a strict evaluation strategy, function arguments are completely evaluated before passing them to the function.</li>\n<li>The benefit of strict evaluation is that it is easy to predict when and in what order things will happen. </li>\n</ul>\n<h3 id=\"Side-effects-and-purity\"><a href=\"#Side-effects-and-purity\" class=\"headerlink\" title=\"Side effects and purity\"></a>Side effects and purity</h3><h3 id=\"Lazy-evaluation-1\"><a href=\"#Lazy-evaluation-1\" class=\"headerlink\" title=\"Lazy evaluation\"></a>Lazy evaluation</h3><ul>\n<li>Under a lazy evaluation strategy, evaluation of function arguments is delayed as long as possible: they are not evaluated until it actually becomes necessary to do so. </li>\n<li>When some expression is given as an argument to a function, it is simply packaged up as an unevaluated expression (called a “thunk”, don’t ask me why) without doing any actual work.<h3 id=\"Pattern-matching-drives-evaluation\"><a href=\"#Pattern-matching-drives-evaluation\" class=\"headerlink\" title=\"Pattern matching drives evaluation\"></a>Pattern matching drives evaluation</h3></li>\n</ul>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">f1</span> :: <span class=\"type\">Maybe</span> a -&gt; [<span class=\"type\">Maybe</span> a]</span><br><span class=\"line\"><span class=\"title\">f1</span> m = [m,m]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">f2</span> :: <span class=\"type\">Maybe</span> a -&gt; [a]</span><br><span class=\"line\"><span class=\"title\">f2</span> <span class=\"type\">Nothing</span>  = []</span><br><span class=\"line\"><span class=\"title\">f2</span> (<span class=\"type\">Just</span> x) = [x]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>f1 uses its argument m, it does not need to know anything about it. m can remain completely unevaluated, and the unevaluated expression is simply put in a list. </li>\n<li>f2, on the other hand, needs to know something about its argument in order to proceed: was it constructed with Nothing or Just.</li>\n<li>The other important thing to note is that thunks are evaluated only enough to allow a pattern match to proceed, and no further!</li>\n<li>suppose we wanted to evaluate f2 (safeHead [3^500, 49]). f2 would force evaluation of the call to safeHead [3^500, 49], which would evaluate to Just (3^500)—note that the 3^500 is not evaluated</li>\n</ul>\n<p><code>Expressions are only evaluated when pattern-matched</code></p>\n<p><code>…only as far as necessary for the match to proceed, and no farther!</code></p>\n<h3 id=\"Consequences\"><a href=\"#Consequences\" class=\"headerlink\" title=\"Consequences\"></a>Consequences</h3><h4 id=\"Purity\"><a href=\"#Purity\" class=\"headerlink\" title=\"Purity\"></a>Purity</h4><h4 id=\"Understanding-space-usage\"><a href=\"#Understanding-space-usage\" class=\"headerlink\" title=\"Understanding space usage\"></a>Understanding space usage</h4><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Standard library function foldl, provided <span class=\"keyword\">for</span> reference</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">foldl</span> :: (b -&gt;</span> <span class=\"function\"><span class=\"title\">a</span> -&gt;</span> <span class=\"function\"><span class=\"title\">b</span>) -&gt;</span> <span class=\"function\"><span class=\"title\">b</span> -&gt;</span> [<span class=\"function\"><span class=\"title\">a</span>] -&gt;</span> b</span><br><span class=\"line\">foldl _ z []     = z</span><br><span class=\"line\">foldl f z (x:xs) = foldl f (f z x) xs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">  foldl (+) 0 [1,2,3]</span></span><br><span class=\"line\"><span class=\"section\">= foldl (+) (0+1) [2,3]</span></span><br><span class=\"line\"><span class=\"section\">= foldl (+) ((0+1)+2) [3]</span></span><br><span class=\"line\"><span class=\"section\">= foldl (+) (((0+1)+2)+3) []</span></span><br><span class=\"line\"><span class=\"section\">= (((0+1)+2)+3)</span></span><br><span class=\"line\"><span class=\"section\">= ((1+2)+3)</span></span><br><span class=\"line\"><span class=\"section\">= (3+3)</span></span><br><span class=\"line\"><span class=\"section\">= 6</span></span><br></pre></td></tr></table></figure>\n<p>Since the value of the accumulator is not demanded until recursing through the entire list, the accumulator simply builds up a big unevaluated expression (((0+1)+2)+3), which finally gets reduced to a value at the end.</p>\n<ul>\n<li>One is that it’s simply inefficient: there’s no point in transferring all the numbers from the list into a different list-like thing (the accumulator thunk) before actually adding them up. </li>\n<li>The second problem is more subtle, and more insidious: evaluating the expression (((0+1)+2)+3) actually requires pushing the 3 and 2 onto a stack before being able to compute 0+1 and then unwinding the stack, adding along the way.<br>for very long lists it’s a big problem: there is usually not as much space available for the stack, so this can lead to a stack overflow.</li>\n<li>The solution in this case is to use the foldl’ function instead of foldl, which adds a bit of strictness<h4 id=\"Short-circuiting-operators\"><a href=\"#Short-circuiting-operators\" class=\"headerlink\" title=\"Short-circuiting operators\"></a>Short-circuiting operators</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&amp;&amp;) :: <span class=\"built_in\">Bool</span> -&gt; <span class=\"built_in\">Bool</span> -&gt; <span class=\"built_in\">Bool</span></span><br><span class=\"line\"><span class=\"literal\">True</span>  &amp;&amp; x = x</span><br><span class=\"line\"><span class=\"literal\">False</span> &amp;&amp; _ = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"User-defined-control-structures\"><a href=\"#User-defined-control-structures\" class=\"headerlink\" title=\"User-defined control structures\"></a>User-defined control structures</h4>In Haskell, however, we can define if as a library function!<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if&#x27; :: <span class=\"type\">Bool</span> -&gt; a -&gt; a -&gt; a</span><br><span class=\"line\">if&#x27; <span class=\"type\">True</span>  x _ = x</span><br><span class=\"line\">if&#x27; <span class=\"type\">False</span> _ y = y</span><br></pre></td></tr></table></figure>\n<h4 id=\"Infinite-data-structures\"><a href=\"#Infinite-data-structures\" class=\"headerlink\" title=\"Infinite data structures\"></a>Infinite data structures</h4><h4 id=\"Pipelining-wholemeal-programming\"><a href=\"#Pipelining-wholemeal-programming\" class=\"headerlink\" title=\"Pipelining/wholemeal programming\"></a>Pipelining/wholemeal programming</h4></li>\n</ul>\n<h4 id=\"Dynamic-programming\"><a href=\"#Dynamic-programming\" class=\"headerlink\" title=\"Dynamic programming\"></a>Dynamic programming</h4><p>Using lazy evaluation we can get the Haskell runtime to work out the proper order of evaluation for us! For example, here is some Haskell code to solve the 0-1 knapsack problem.<br><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Data.Array</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">knapsack01</span> :: [<span class=\"type\">Double</span>]   <span class=\"comment\">-- values </span></span><br><span class=\"line\">           -&gt; [<span class=\"type\">Integer</span>]  <span class=\"comment\">-- nonnegative weights</span></span><br><span class=\"line\">           -&gt; <span class=\"type\">Integer</span>    <span class=\"comment\">-- knapsack size</span></span><br><span class=\"line\">           -&gt; <span class=\"type\">Double</span>     <span class=\"comment\">-- max possible value</span></span><br><span class=\"line\"><span class=\"title\">knapsack01</span> vs ws maxW = m!(numItems<span class=\"number\">-1</span>, maxW)</span><br><span class=\"line\">  <span class=\"keyword\">where</span> numItems = length vs</span><br><span class=\"line\">        m = array ((<span class=\"number\">-1</span>,<span class=\"number\">0</span>), (numItems<span class=\"number\">-1</span>, maxW)) $</span><br><span class=\"line\">              [((<span class=\"number\">-1</span>,w), <span class=\"number\">0</span>) | w &lt;- [<span class=\"number\">0</span> .. maxW]] ++</span><br><span class=\"line\">              [((i,<span class=\"number\">0</span>), <span class=\"number\">0</span>) | i &lt;- [<span class=\"number\">0</span> .. numItems<span class=\"number\">-1</span>]] ++</span><br><span class=\"line\">              [((i,w), best) </span><br><span class=\"line\">                  | i &lt;- [<span class=\"number\">0</span> .. numItems<span class=\"number\">-1</span>]</span><br><span class=\"line\">                  , w &lt;- [<span class=\"number\">1</span> .. maxW]</span><br><span class=\"line\">                  , <span class=\"keyword\">let</span> best</span><br><span class=\"line\">                          | ws!!i &gt; w  = m!(i<span class=\"number\">-1</span>, w)</span><br><span class=\"line\">                          | otherwise = max (m!(i<span class=\"number\">-1</span>, w)) </span><br><span class=\"line\">                                            (m!(i<span class=\"number\">-1</span>, w - ws!!i) + vs!!i)</span><br><span class=\"line\">              ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">example</span> = knapsack01 [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>] [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>] <span class=\"number\">20</span></span><br></pre></td></tr></table></figure></p>"},{"title":"关于本站","date":"2020-08-02T00:23:04.000Z","mathjax":true,"_content":"\n{% asset_img test.jpg %}\n\n本站诞生史。\n\n<!-- more -->\n\n## hexo 初始化\n\n\n{% meting \"2909007895\" \"netease\" \"playlist\" %}\n\n\n\n```\nhexo init\nnpm install\nnpm install hexo-deployer-git --save\nhexo clean\nhexo g -d\nhexo s -d\n```\n\n## 安装next主题\n\n最新next仓库\nhttps://github.com/next-theme/hexo-theme-next\n\n```\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n## 文本添加音乐\n\n### 安装hexo-tag-aplayer\n\n```\nnpm install --save hexo-tag-aplayer\n```\n\n### 使用\n```\n{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}\n```\n\n参数：\n\ntitle : 曲目标题\n\nauthor: 曲目作者\n\nurl: 音乐文件 URL 地址\n\npicture_url: (可选) 音乐对应的图片地址\n\nnarrow: （可选）播放器袖珍风格\n\nautoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能\n\nwidth:xxx: (可选) 播放器宽度 (默认: 100%)\n\nlrc:xxx: （可选）歌词文件 URL 地址\n\n当开启 Hexo 的 文章资源文件夹 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：\n\n```\n{% aplayer \"Caffeine\" \"Jeff Williams\" \"caffeine.mp3\" \"picture.jpg\" \"lrc:caffeine.txt\" %}\n```\n\n#### 播放列表\n```\n{% aplayerlist %}\n{\n    \"narrow\": false,                          // （可选）播放器袖珍风格\n    \"autoplay\": true,                         // （可选) 自动播放，移动端浏览器暂时不支持此功能\n    \"mode\": \"random\",                         // （可选）曲目循环类型，有 'random'（随机播放）, 'single' (单曲播放), 'circulation' (循环播放), 'order' (列表播放)， 默认：'circulation' \n    \"showlrc\": 3,                             // （可选）歌词显示配置项，可选项有：1,2,3\n    \"mutex\": true,                            // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停\n    \"theme\": \"#e6d0b2\",\t                      // （可选）播放器风格色彩设置，默认：#b7daff\n    \"preload\": \"metadata\",                    // （可选）音乐文件预载入模式，可选项： 'none' 'metadata' 'auto', 默认: 'auto'\n    \"listmaxheight\": \"513px\",                 // (可选) 该播放列表的最大长度\n    \"music\": [\n        {\n            \"title\": \"CoCo\",\n            \"author\": \"Jeff Williams\",\n            \"url\": \"caffeine.mp3\",\n            \"pic\": \"caffeine.jpeg\",\n            \"lrc\": \"caffeine.txt\"\n        },\n        {\n            \"title\": \"アイロニ\",\n            \"author\": \"鹿乃\",\n            \"url\": \"irony.mp3\",\n            \"pic\": \"irony.jpg\"\n        }\n    ]\n}\n{% endaplayerlist %}\n```\n#### MetingJS支持\n如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：\n```\naplayer:\n  meting: true\n```\n接着就可以通过 \n```\n{% meting ...%}\n```\n 在文章中使用 MetingJS 播放器了：\n```\n<!-- 简单示例 (id, server, type)  -->\n{% meting \"60198\" \"netease\" \"playlist\" %}\n\n<!-- 进阶示例 -->\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}\n```\n\nid\t必须值\t歌曲 id / 播放列表 id / 相册 id / 搜索关键字\n\nserver\t必须值\t音乐平台: netease, tencent, kugou, xiami, baidu\n\ntype\t必须值\tsong, playlist, album, search, artist\n\nfixed\tfalse\t开启固定模式\n\nmini\tfalse\t开启迷你模式\n\nloop\tall\t列表循环模式：all, one,none\n\norder\tlist\t列表播放模式： list, random\n\nvolume\t0.7\t播放器音量\n\nlrctype\t0\t歌词格式类型\n\nlistfolded\tfalse\t指定音乐播放列表是否折叠\n\nstoragename\tmetingjs\tLocalStorage 中存储播放器设定的键名\n\nautoplay\ttrue\t自动播放，移动端浏览器暂时不支持此功能\n\nmutex\ttrue\t该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停\n\nlistmaxheight\t340px\t播放列表的最大长度\n\npreload\tauto\t音乐文件预载入模式，可选项： none, metadata, auto\n\ntheme\t#ad7a86\t播放器风格色彩设置\n\n## 全局音乐自动播放\n\n\n修改<font color=red>\\theme\\next\\layout\\_layout.swig</font>文件\n\n\n```\n<!-- 引用依赖 -->\n<link rel=\"stylesheet\" \n  href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js\"></script>\n\n<!-- 我使用的APlayer本体 -->\n<div class=\"aplayer\" \n  data-id=\"2465890057\" \n  data-server=\"netease\" \n  data-type=\"playlist\" \n  data-fixed=\"true\" \n  data-autoplay=\"true\" \n  data-order=\"random\" \n  data-volume=\"0.55\" \n  data-theme=\"#cc543a\" \n  data-preload=\"auto\" >\n  </div>\n<!--如果将本体放在body里面导致页面加载出现问题，请尝试放到body体后面-->\n```\n\nAplayer[参数设置](https://github.com/metowolf/MetingJS)\n```\ndata-server: netease, tencent, kugou, xiami, baidu\ndata-type: song, playlist, album, search, artist\ndata-id: song id / playlist id / album id / search keyword\ndata-order: 'list', 'random'\n```\n\n\n\n<font color=red>pjax</font>，页面跳转时不重新播放\n\npjax安装\n\n```\n$ cd themes/next\n$ git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax\n```\n\n设置theme的_config.yml\n```\n# Easily enable fast Ajax navigation on your website.\n# Dependencies: https://github.com/theme-next/theme-next-pjax\n# For moreinformation: https://github.com/MoOx/pjax\npjax: true\n```\n\n## 设置背景图片\n\n\n修改theme _config.yml\n```\ncustom_file_path:\n  style: source/_data/styles.styl\n```\n在<font color=red>blog根目录下</font>新建_data文件夹\n\n新建styles.styl\n\n内容：\n```\n// 添加背景图片\nbody {\n      background: url(https://source.unsplash.com/random/1600x900?wallpapers);//自己喜欢的图片地址\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-attachment: fixed;\n      background-position: 50% 50%;\n}\n.main-inner {\n   // margin-top: 60px;\n   // padding: 60px 60px 60px 60px;\n\n    opacity: 0.8;\n}\n\n//博客内容透明化\n//文章内容的透明度设置\n\n.content-wrap {\n  opacity: 0.85;\n}\n\n//侧边框的透明度设置\n.sidebar {\n  opacity: 0.85;\n}\n\n//菜单栏的透明度设置\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n\n//搜索框（local-search）的透明度设置\n.popup {\n  opacity: 0.85;\n}\n```\n\n\n## 本地搜索\n\n安装相应插件\n```\nnpm install hexo-generator-searchdb  --save\n```\n设置根目录配置文件\n```\nsearch:\n  path: search.xml\n  field: post\n  content: true\n  format: html\n```\n\n设置主题目录配置文件\n```\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 5\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n\n## 数学公式\n\n### 安装 hexo-renderer-kramed \n```\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n\n### 修改/node_modules/kramed/lib/rules/inline.js\n```\nescape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_>])/,\n改为\nescape: /^\\\\([`*\\[\\]()# +\\-.!_>])/,\n\nem: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n改为\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\n### 修改主题_config.yml\n```\nmath:\n  per_page: true \n  mathjax:\n    enable: true\n    mhchem: false\n```\n开启per_page保证只要显示加了mathjax: true的页面才进行渲染。\n\n### 在md文件开启mathjax\n```\nmathjax: true\n```\n\n### 使用 MathJax 给公式编号并引用公式\n\n在新版本的 NexT 主题中，我们加入了公式自动编号和引用功能。下面简要介绍一下如何使用这项功能。\n\n为了使用这项功能，一般来说，你必须把所使用的 LaTeX 公式放在 equation 环境里面，采用旧的方法\n（也就是说，仅仅把公式的每一边用两个 $ 符号包含起来）是无效的。如何引用公式？\n你只需要在书写公式的时候给公式一个 \\label{} 标记（tag），然后在正文中，可以使用 \\\\ref{} 或者 \\\\eqref{} 命令来引用对应的公式。\n使用 \\\\eqref{} 是推荐的方式，因为如果你使用 \\\\ref{}，公式在文中的引用编号将没有圆括号包围。下面介绍几种常见的公式编号例子。\n\n对于简单的公式，使用下面的方式给公式一个标记，\n\n```\n$$\\begin{equation}\\label{eq1}\ne=mc^2\n\\end{equation}$$\n```\n然后，在正文中，你可以轻松引用上述公式，一个简单的例子如下：\n```\n著名的质能方程 $\\eqref{eq1}$ 由爱因斯坦提出 ...\n```\n\n$$\\begin{equation}\\label{eq1}\ne=mc^2\n\\end{equation}$$\n\n著名的质能方程 $\\eqref{eq1}$ 由爱因斯坦提出 ...\n\n对于多行公式，在 equation 环境中，你可以使用 aligned 环境把公式分成多行，\n```\n$$\\begin{equation}\\label{eq2}\n\\begin{aligned}\na &= b + c \\\\\n  &= d + e + f + g \\\\\n  &= h + i\n\\end{aligned}\n\\end{equation}$$\n```\n\n$$\\begin{equation}\\label{eq2}\n\\begin{aligned}\na &= b + c \\\\\n  &= d + e + f + g \\\\\n  &= h + i\n\\end{aligned}\n\\end{equation}$$\n\n\n要对齐多个公式，我们需要使用 align 环境。align 环境中的每个公式都有自己的编号：\n```\n$$\\begin{align}\na &= b + c \\label{eq3} \\\\\nx &= yz \\label{eq4}\\\\\nl &= m - n \\label{eq5}\n\\end{align}$$\n```\n\n$$\\begin{align}\na &= b + c \\label{eq3} \\\\\nx &= yz \\label{eq4}\\\\\nl &= m - n \\label{eq5}\n\\end{align}$$\n\n\n在 align 环境中，如果你不想给某个或某几个公式编号，那么在这些公式后面使用 \\nonumber 命令即可。例如：\n```\n$$\\begin{align}\n-4 + 5x &= 2+y \\nonumber  \\\\\n w+2 &= -1+w \\\\\n ab &= cb\n\\end{align}$$\n```\n\n$$\\begin{align}\n-4 + 5x &= 2+y \\nonumber  \\\\\n w+2 &= -1+w \\\\\n ab &= cb\n\\end{align}$$\n\n有时，你可能会希望采用更加奇特的方式来标记和引用你的公式，你可以通过使用 \\tag{} 命令来实现，例如：\n```\n$$x+1\\over\\sqrt{1-x^2} \\tag{i}\\label{eq_tag}$$\n```\n\n$$x+1\\over\\sqrt{1-x^2} \\tag{i}\\label{eq_tag}$$\n\n## 文章加密\n\n安装插件\n```\nnpm install --save hexo-blog-encrypt\n```\n格式\n```\n---\ntitle: Hello World\ntags:\n- encryptAsDiary\ndate: 2016-03-30 21:12:21\npassword: mikemessi\nabstract: Here's something encrypted, password is required to continue reading.\nmessage: Hey, password is required here.\nwrong_pass_message: Oh, this is an invalid password. Check and try again, please.\nwrong_hash_message: Oh, these decrypted content cannot be verified, but you can still have a look.\n---\n```\n\n## 其他\n\n### 添加看板娘\n\n```\nnpm install --save hexo-helper-live2d\n```\nhttps://github.com/xiazeyu/live2d-widget-models\n\n### 禁用评论\nmd文件加\n```\ncomments: false\n```\n\n### 文章置顶\n```\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n文章内设置：\ntop: true\n```\n\n修改/themes/next/layout/_macro/post.swig,在\n\n```\n<div class=\"post-meta\">\n```\n\n标签下，插入如下代码：\n\n```\n{% if post.top %}\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=\"green\">置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n{% endif %}\n```\n\n### 首页不显示全文\n```\n<!-- more -->\n```\n### 替换标签前缀 # 字符\n\n主题_config.yml\n```\ntag_icon: true\n```\n### markdown改变字体颜色\n```\n改变颜色 <font color=red>text</font>\n改变字体 <font face=\"微软雅黑\">微软雅黑</font>\n改变大小 <font color=red size=12>字号12</font>\n改变背景色 <table><tr><td bgcolor=orange>背景色是：orange</td></tr></table>\n```\n\n### markdown插入超链接\n```\n[提示文字](url)\n```\n\n### 插入图片\n```\n{% asset_img test.jpg %}\n//test.jpg在对应资源文件夹\n```\n\n一些图片网站\n\nhttps://pixabay.com/images/search/\n\nhttps://unsplash.com/\n\nhttps://www.pexels.com/zh-cn/\n\n### 鼠标特效\n\n在themes\\next\\source\\js目录下新建fire.js,内容如下：\n```\nclass Circle {\n  constructor({ origin, speed, color, angle, context }) {\n    this.origin = origin\n    this.position = { ...this.origin }\n    this.color = color\n    this.speed = speed\n    this.angle = angle\n    this.context = context\n    this.renderCount = 0\n  }\n\n  draw() {\n    this.context.fillStyle = this.color\n    this.context.beginPath()\n    this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)\n    this.context.fill()\n  }\n\n  move() {\n    this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x\n    this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)\n    this.renderCount++\n  }\n}\n\nclass Boom {\n  constructor ({ origin, context, circleCount = 16, area }) {\n    this.origin = origin\n    this.context = context\n    this.circleCount = circleCount\n    this.area = area\n    this.stop = false\n    this.circles = []\n  }\n\n  randomArray(range) {\n    const length = range.length\n    const randomIndex = Math.floor(length * Math.random())\n    return range[randomIndex]\n  }\n\n  randomColor() {\n    const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)\n  }\n\n  randomRange(start, end) {\n    return (end - start) * Math.random() + start\n  }\n\n  init() {\n    for(let i = 0; i < this.circleCount; i++) {\n      const circle = new Circle({\n        context: this.context,\n        origin: this.origin,\n        color: this.randomColor(),\n        angle: this.randomRange(Math.PI - 1, Math.PI + 1),\n        speed: this.randomRange(1, 6)\n      })\n      this.circles.push(circle)\n    }\n  }\n\n  move() {\n    this.circles.forEach((circle, index) => {\n      if (circle.position.x > this.area.width || circle.position.y > this.area.height) {\n        return this.circles.splice(index, 1)\n      }\n      circle.move()\n    })\n    if (this.circles.length == 0) {\n      this.stop = true\n    }\n  }\n\n  draw() {\n    this.circles.forEach(circle => circle.draw())\n  }\n}\n\nclass CursorSpecialEffects {\n  constructor() {\n    this.computerCanvas = document.createElement('canvas')\n    this.renderCanvas = document.createElement('canvas')\n\n    this.computerContext = this.computerCanvas.getContext('2d')\n    this.renderContext = this.renderCanvas.getContext('2d')\n\n    this.globalWidth = window.innerWidth\n    this.globalHeight = window.innerHeight\n\n    this.booms = []\n    this.running = false\n  }\n\n  handleMouseDown(e) {\n    const boom = new Boom({\n      origin: { x: e.clientX, y: e.clientY },\n      context: this.computerContext,\n      area: {\n        width: this.globalWidth,\n        height: this.globalHeight\n      }\n    })\n    boom.init()\n    this.booms.push(boom)\n    this.running || this.run()\n  }\n\n  handlePageHide() {\n    this.booms = []\n    this.running = false\n  }\n\n  init() {\n    const style = this.renderCanvas.style\n    style.position = 'fixed'\n    style.top = style.left = 0\n    style.zIndex = '999999999999999999999999999999999999999999'\n    style.pointerEvents = 'none'\n\n    style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth\n    style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight\n\n    document.body.append(this.renderCanvas)\n\n    window.addEventListener('mousedown', this.handleMouseDown.bind(this))\n    window.addEventListener('pagehide', this.handlePageHide.bind(this))\n  }\n\n  run() {\n    this.running = true\n    if (this.booms.length == 0) {\n      return this.running = false\n    }\n\n    requestAnimationFrame(this.run.bind(this))\n\n    this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\n    this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\n\n    this.booms.forEach((boom, index) => {\n      if (boom.stop) {\n        return this.booms.splice(index, 1)\n      }\n      boom.move()\n      boom.draw()\n    })\n    this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)\n  }\n}\n\nconst cursorSpecialEffects = new CursorSpecialEffects()\ncursorSpecialEffects.init()\n\n```\n\n在themes\\next\\layout的layout.njk下添加\n```\n<script type=\"text/javascript\" src=\"/js/fire.js\"></script>\n```\n\n### 自定义回到顶部\n\n在source\\images目录下放入自定义scroll.png，然后在source\\_data\\styles.styl增加\n\n```\n//自定义回到顶部样式\n.back-to-top {\n  right: 60px;\n  width: 70px;  //图片素材宽度\n  height: 900px;  //图片素材高度\n  top: -900px;\n  bottom: unset;\n  transition: all .5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n\n  //隐藏箭头图标\n  > i {\n    display: none;\n  }\n\n  &.back-to-top-on {\n    bottom: unset;\n    top: 100vh < (900px + 200px) ? calc( 100vh - 900px - 200px ) : 0px;\n  }\n}\n```","source":"_posts/关于本站.md","raw":"---\ntitle: 关于本站\ndate: 2020-08-02 08:23:04\ntags: \"关于本站\"\nmathjax: true\n---\n\n{% asset_img test.jpg %}\n\n本站诞生史。\n\n<!-- more -->\n\n## hexo 初始化\n\n\n{% meting \"2909007895\" \"netease\" \"playlist\" %}\n\n\n\n```\nhexo init\nnpm install\nnpm install hexo-deployer-git --save\nhexo clean\nhexo g -d\nhexo s -d\n```\n\n## 安装next主题\n\n最新next仓库\nhttps://github.com/next-theme/hexo-theme-next\n\n```\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n## 文本添加音乐\n\n### 安装hexo-tag-aplayer\n\n```\nnpm install --save hexo-tag-aplayer\n```\n\n### 使用\n```\n{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}\n```\n\n参数：\n\ntitle : 曲目标题\n\nauthor: 曲目作者\n\nurl: 音乐文件 URL 地址\n\npicture_url: (可选) 音乐对应的图片地址\n\nnarrow: （可选）播放器袖珍风格\n\nautoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能\n\nwidth:xxx: (可选) 播放器宽度 (默认: 100%)\n\nlrc:xxx: （可选）歌词文件 URL 地址\n\n当开启 Hexo 的 文章资源文件夹 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：\n\n```\n{% aplayer \"Caffeine\" \"Jeff Williams\" \"caffeine.mp3\" \"picture.jpg\" \"lrc:caffeine.txt\" %}\n```\n\n#### 播放列表\n```\n{% aplayerlist %}\n{\n    \"narrow\": false,                          // （可选）播放器袖珍风格\n    \"autoplay\": true,                         // （可选) 自动播放，移动端浏览器暂时不支持此功能\n    \"mode\": \"random\",                         // （可选）曲目循环类型，有 'random'（随机播放）, 'single' (单曲播放), 'circulation' (循环播放), 'order' (列表播放)， 默认：'circulation' \n    \"showlrc\": 3,                             // （可选）歌词显示配置项，可选项有：1,2,3\n    \"mutex\": true,                            // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停\n    \"theme\": \"#e6d0b2\",\t                      // （可选）播放器风格色彩设置，默认：#b7daff\n    \"preload\": \"metadata\",                    // （可选）音乐文件预载入模式，可选项： 'none' 'metadata' 'auto', 默认: 'auto'\n    \"listmaxheight\": \"513px\",                 // (可选) 该播放列表的最大长度\n    \"music\": [\n        {\n            \"title\": \"CoCo\",\n            \"author\": \"Jeff Williams\",\n            \"url\": \"caffeine.mp3\",\n            \"pic\": \"caffeine.jpeg\",\n            \"lrc\": \"caffeine.txt\"\n        },\n        {\n            \"title\": \"アイロニ\",\n            \"author\": \"鹿乃\",\n            \"url\": \"irony.mp3\",\n            \"pic\": \"irony.jpg\"\n        }\n    ]\n}\n{% endaplayerlist %}\n```\n#### MetingJS支持\n如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：\n```\naplayer:\n  meting: true\n```\n接着就可以通过 \n```\n{% meting ...%}\n```\n 在文章中使用 MetingJS 播放器了：\n```\n<!-- 简单示例 (id, server, type)  -->\n{% meting \"60198\" \"netease\" \"playlist\" %}\n\n<!-- 进阶示例 -->\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}\n```\n\nid\t必须值\t歌曲 id / 播放列表 id / 相册 id / 搜索关键字\n\nserver\t必须值\t音乐平台: netease, tencent, kugou, xiami, baidu\n\ntype\t必须值\tsong, playlist, album, search, artist\n\nfixed\tfalse\t开启固定模式\n\nmini\tfalse\t开启迷你模式\n\nloop\tall\t列表循环模式：all, one,none\n\norder\tlist\t列表播放模式： list, random\n\nvolume\t0.7\t播放器音量\n\nlrctype\t0\t歌词格式类型\n\nlistfolded\tfalse\t指定音乐播放列表是否折叠\n\nstoragename\tmetingjs\tLocalStorage 中存储播放器设定的键名\n\nautoplay\ttrue\t自动播放，移动端浏览器暂时不支持此功能\n\nmutex\ttrue\t该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停\n\nlistmaxheight\t340px\t播放列表的最大长度\n\npreload\tauto\t音乐文件预载入模式，可选项： none, metadata, auto\n\ntheme\t#ad7a86\t播放器风格色彩设置\n\n## 全局音乐自动播放\n\n\n修改<font color=red>\\theme\\next\\layout\\_layout.swig</font>文件\n\n\n```\n<!-- 引用依赖 -->\n<link rel=\"stylesheet\" \n  href=\"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js\"></script>\n\n<!-- 我使用的APlayer本体 -->\n<div class=\"aplayer\" \n  data-id=\"2465890057\" \n  data-server=\"netease\" \n  data-type=\"playlist\" \n  data-fixed=\"true\" \n  data-autoplay=\"true\" \n  data-order=\"random\" \n  data-volume=\"0.55\" \n  data-theme=\"#cc543a\" \n  data-preload=\"auto\" >\n  </div>\n<!--如果将本体放在body里面导致页面加载出现问题，请尝试放到body体后面-->\n```\n\nAplayer[参数设置](https://github.com/metowolf/MetingJS)\n```\ndata-server: netease, tencent, kugou, xiami, baidu\ndata-type: song, playlist, album, search, artist\ndata-id: song id / playlist id / album id / search keyword\ndata-order: 'list', 'random'\n```\n\n\n\n<font color=red>pjax</font>，页面跳转时不重新播放\n\npjax安装\n\n```\n$ cd themes/next\n$ git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax\n```\n\n设置theme的_config.yml\n```\n# Easily enable fast Ajax navigation on your website.\n# Dependencies: https://github.com/theme-next/theme-next-pjax\n# For moreinformation: https://github.com/MoOx/pjax\npjax: true\n```\n\n## 设置背景图片\n\n\n修改theme _config.yml\n```\ncustom_file_path:\n  style: source/_data/styles.styl\n```\n在<font color=red>blog根目录下</font>新建_data文件夹\n\n新建styles.styl\n\n内容：\n```\n// 添加背景图片\nbody {\n      background: url(https://source.unsplash.com/random/1600x900?wallpapers);//自己喜欢的图片地址\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-attachment: fixed;\n      background-position: 50% 50%;\n}\n.main-inner {\n   // margin-top: 60px;\n   // padding: 60px 60px 60px 60px;\n\n    opacity: 0.8;\n}\n\n//博客内容透明化\n//文章内容的透明度设置\n\n.content-wrap {\n  opacity: 0.85;\n}\n\n//侧边框的透明度设置\n.sidebar {\n  opacity: 0.85;\n}\n\n//菜单栏的透明度设置\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n\n//搜索框（local-search）的透明度设置\n.popup {\n  opacity: 0.85;\n}\n```\n\n\n## 本地搜索\n\n安装相应插件\n```\nnpm install hexo-generator-searchdb  --save\n```\n设置根目录配置文件\n```\nsearch:\n  path: search.xml\n  field: post\n  content: true\n  format: html\n```\n\n设置主题目录配置文件\n```\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 5\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n\n## 数学公式\n\n### 安装 hexo-renderer-kramed \n```\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-kramed --save\n```\n\n### 修改/node_modules/kramed/lib/rules/inline.js\n```\nescape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_>])/,\n改为\nescape: /^\\\\([`*\\[\\]()# +\\-.!_>])/,\n\nem: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n改为\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\n### 修改主题_config.yml\n```\nmath:\n  per_page: true \n  mathjax:\n    enable: true\n    mhchem: false\n```\n开启per_page保证只要显示加了mathjax: true的页面才进行渲染。\n\n### 在md文件开启mathjax\n```\nmathjax: true\n```\n\n### 使用 MathJax 给公式编号并引用公式\n\n在新版本的 NexT 主题中，我们加入了公式自动编号和引用功能。下面简要介绍一下如何使用这项功能。\n\n为了使用这项功能，一般来说，你必须把所使用的 LaTeX 公式放在 equation 环境里面，采用旧的方法\n（也就是说，仅仅把公式的每一边用两个 $ 符号包含起来）是无效的。如何引用公式？\n你只需要在书写公式的时候给公式一个 \\label{} 标记（tag），然后在正文中，可以使用 \\\\ref{} 或者 \\\\eqref{} 命令来引用对应的公式。\n使用 \\\\eqref{} 是推荐的方式，因为如果你使用 \\\\ref{}，公式在文中的引用编号将没有圆括号包围。下面介绍几种常见的公式编号例子。\n\n对于简单的公式，使用下面的方式给公式一个标记，\n\n```\n$$\\begin{equation}\\label{eq1}\ne=mc^2\n\\end{equation}$$\n```\n然后，在正文中，你可以轻松引用上述公式，一个简单的例子如下：\n```\n著名的质能方程 $\\eqref{eq1}$ 由爱因斯坦提出 ...\n```\n\n$$\\begin{equation}\\label{eq1}\ne=mc^2\n\\end{equation}$$\n\n著名的质能方程 $\\eqref{eq1}$ 由爱因斯坦提出 ...\n\n对于多行公式，在 equation 环境中，你可以使用 aligned 环境把公式分成多行，\n```\n$$\\begin{equation}\\label{eq2}\n\\begin{aligned}\na &= b + c \\\\\n  &= d + e + f + g \\\\\n  &= h + i\n\\end{aligned}\n\\end{equation}$$\n```\n\n$$\\begin{equation}\\label{eq2}\n\\begin{aligned}\na &= b + c \\\\\n  &= d + e + f + g \\\\\n  &= h + i\n\\end{aligned}\n\\end{equation}$$\n\n\n要对齐多个公式，我们需要使用 align 环境。align 环境中的每个公式都有自己的编号：\n```\n$$\\begin{align}\na &= b + c \\label{eq3} \\\\\nx &= yz \\label{eq4}\\\\\nl &= m - n \\label{eq5}\n\\end{align}$$\n```\n\n$$\\begin{align}\na &= b + c \\label{eq3} \\\\\nx &= yz \\label{eq4}\\\\\nl &= m - n \\label{eq5}\n\\end{align}$$\n\n\n在 align 环境中，如果你不想给某个或某几个公式编号，那么在这些公式后面使用 \\nonumber 命令即可。例如：\n```\n$$\\begin{align}\n-4 + 5x &= 2+y \\nonumber  \\\\\n w+2 &= -1+w \\\\\n ab &= cb\n\\end{align}$$\n```\n\n$$\\begin{align}\n-4 + 5x &= 2+y \\nonumber  \\\\\n w+2 &= -1+w \\\\\n ab &= cb\n\\end{align}$$\n\n有时，你可能会希望采用更加奇特的方式来标记和引用你的公式，你可以通过使用 \\tag{} 命令来实现，例如：\n```\n$$x+1\\over\\sqrt{1-x^2} \\tag{i}\\label{eq_tag}$$\n```\n\n$$x+1\\over\\sqrt{1-x^2} \\tag{i}\\label{eq_tag}$$\n\n## 文章加密\n\n安装插件\n```\nnpm install --save hexo-blog-encrypt\n```\n格式\n```\n---\ntitle: Hello World\ntags:\n- encryptAsDiary\ndate: 2016-03-30 21:12:21\npassword: mikemessi\nabstract: Here's something encrypted, password is required to continue reading.\nmessage: Hey, password is required here.\nwrong_pass_message: Oh, this is an invalid password. Check and try again, please.\nwrong_hash_message: Oh, these decrypted content cannot be verified, but you can still have a look.\n---\n```\n\n## 其他\n\n### 添加看板娘\n\n```\nnpm install --save hexo-helper-live2d\n```\nhttps://github.com/xiazeyu/live2d-widget-models\n\n### 禁用评论\nmd文件加\n```\ncomments: false\n```\n\n### 文章置顶\n```\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n文章内设置：\ntop: true\n```\n\n修改/themes/next/layout/_macro/post.swig,在\n\n```\n<div class=\"post-meta\">\n```\n\n标签下，插入如下代码：\n\n```\n{% if post.top %}\n    <i class=\"fa fa-thumb-tack\"></i>\n    <font color=\"green\">置顶</font>\n    <span class=\"post-meta-divider\">|</span>\n{% endif %}\n```\n\n### 首页不显示全文\n```\n<!-- more -->\n```\n### 替换标签前缀 # 字符\n\n主题_config.yml\n```\ntag_icon: true\n```\n### markdown改变字体颜色\n```\n改变颜色 <font color=red>text</font>\n改变字体 <font face=\"微软雅黑\">微软雅黑</font>\n改变大小 <font color=red size=12>字号12</font>\n改变背景色 <table><tr><td bgcolor=orange>背景色是：orange</td></tr></table>\n```\n\n### markdown插入超链接\n```\n[提示文字](url)\n```\n\n### 插入图片\n```\n{% asset_img test.jpg %}\n//test.jpg在对应资源文件夹\n```\n\n一些图片网站\n\nhttps://pixabay.com/images/search/\n\nhttps://unsplash.com/\n\nhttps://www.pexels.com/zh-cn/\n\n### 鼠标特效\n\n在themes\\next\\source\\js目录下新建fire.js,内容如下：\n```\nclass Circle {\n  constructor({ origin, speed, color, angle, context }) {\n    this.origin = origin\n    this.position = { ...this.origin }\n    this.color = color\n    this.speed = speed\n    this.angle = angle\n    this.context = context\n    this.renderCount = 0\n  }\n\n  draw() {\n    this.context.fillStyle = this.color\n    this.context.beginPath()\n    this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)\n    this.context.fill()\n  }\n\n  move() {\n    this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x\n    this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)\n    this.renderCount++\n  }\n}\n\nclass Boom {\n  constructor ({ origin, context, circleCount = 16, area }) {\n    this.origin = origin\n    this.context = context\n    this.circleCount = circleCount\n    this.area = area\n    this.stop = false\n    this.circles = []\n  }\n\n  randomArray(range) {\n    const length = range.length\n    const randomIndex = Math.floor(length * Math.random())\n    return range[randomIndex]\n  }\n\n  randomColor() {\n    const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)\n  }\n\n  randomRange(start, end) {\n    return (end - start) * Math.random() + start\n  }\n\n  init() {\n    for(let i = 0; i < this.circleCount; i++) {\n      const circle = new Circle({\n        context: this.context,\n        origin: this.origin,\n        color: this.randomColor(),\n        angle: this.randomRange(Math.PI - 1, Math.PI + 1),\n        speed: this.randomRange(1, 6)\n      })\n      this.circles.push(circle)\n    }\n  }\n\n  move() {\n    this.circles.forEach((circle, index) => {\n      if (circle.position.x > this.area.width || circle.position.y > this.area.height) {\n        return this.circles.splice(index, 1)\n      }\n      circle.move()\n    })\n    if (this.circles.length == 0) {\n      this.stop = true\n    }\n  }\n\n  draw() {\n    this.circles.forEach(circle => circle.draw())\n  }\n}\n\nclass CursorSpecialEffects {\n  constructor() {\n    this.computerCanvas = document.createElement('canvas')\n    this.renderCanvas = document.createElement('canvas')\n\n    this.computerContext = this.computerCanvas.getContext('2d')\n    this.renderContext = this.renderCanvas.getContext('2d')\n\n    this.globalWidth = window.innerWidth\n    this.globalHeight = window.innerHeight\n\n    this.booms = []\n    this.running = false\n  }\n\n  handleMouseDown(e) {\n    const boom = new Boom({\n      origin: { x: e.clientX, y: e.clientY },\n      context: this.computerContext,\n      area: {\n        width: this.globalWidth,\n        height: this.globalHeight\n      }\n    })\n    boom.init()\n    this.booms.push(boom)\n    this.running || this.run()\n  }\n\n  handlePageHide() {\n    this.booms = []\n    this.running = false\n  }\n\n  init() {\n    const style = this.renderCanvas.style\n    style.position = 'fixed'\n    style.top = style.left = 0\n    style.zIndex = '999999999999999999999999999999999999999999'\n    style.pointerEvents = 'none'\n\n    style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth\n    style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight\n\n    document.body.append(this.renderCanvas)\n\n    window.addEventListener('mousedown', this.handleMouseDown.bind(this))\n    window.addEventListener('pagehide', this.handlePageHide.bind(this))\n  }\n\n  run() {\n    this.running = true\n    if (this.booms.length == 0) {\n      return this.running = false\n    }\n\n    requestAnimationFrame(this.run.bind(this))\n\n    this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\n    this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\n\n    this.booms.forEach((boom, index) => {\n      if (boom.stop) {\n        return this.booms.splice(index, 1)\n      }\n      boom.move()\n      boom.draw()\n    })\n    this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)\n  }\n}\n\nconst cursorSpecialEffects = new CursorSpecialEffects()\ncursorSpecialEffects.init()\n\n```\n\n在themes\\next\\layout的layout.njk下添加\n```\n<script type=\"text/javascript\" src=\"/js/fire.js\"></script>\n```\n\n### 自定义回到顶部\n\n在source\\images目录下放入自定义scroll.png，然后在source\\_data\\styles.styl增加\n\n```\n//自定义回到顶部样式\n.back-to-top {\n  right: 60px;\n  width: 70px;  //图片素材宽度\n  height: 900px;  //图片素材高度\n  top: -900px;\n  bottom: unset;\n  transition: all .5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n\n  //隐藏箭头图标\n  > i {\n    display: none;\n  }\n\n  &.back-to-top-on {\n    bottom: unset;\n    top: 100vh < (900px + 200px) ? calc( 100vh - 900px - 200px ) : 0px;\n  }\n}\n```","slug":"关于本站","published":1,"updated":"2020-08-05T14:28:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdv000xrouj7oj121jn","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><img src=\"/2020/08/02/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/test.jpg\" class=\"\">\n<p>本站诞生史。</p>\n<a id=\"more\"></a>\n<h2 id=\"hexo-初始化\"><a href=\"#hexo-初始化\" class=\"headerlink\" title=\"hexo 初始化\"></a>hexo 初始化</h2>\n    <div id=\"aplayer-XAvXYtyT\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"2909007895\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm <span class=\"keyword\">install</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g -d</span><br><span class=\"line\">hexo s -d</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装next主题\"><a href=\"#安装next主题\" class=\"headerlink\" title=\"安装next主题\"></a>安装next主题</h2><p>最新next仓库<br><a href=\"https://github.com/next-theme/hexo-theme-next\">https://github.com/next-theme/hexo-theme-next</a></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/next-theme/</span>hexo-theme-<span class=\"keyword\">next</span> themes/<span class=\"keyword\">next</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"文本添加音乐\"><a href=\"#文本添加音乐\" class=\"headerlink\" title=\"文本添加音乐\"></a>文本添加音乐</h2><h3 id=\"安装hexo-tag-aplayer\"><a href=\"#安装hexo-tag-aplayer\" class=\"headerlink\" title=\"安装hexo-tag-aplayer\"></a>安装hexo-tag-aplayer</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save hexo-tag-aplayer</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<p>title : 曲目标题</p>\n<p>author: 曲目作者</p>\n<p>url: 音乐文件 URL 地址</p>\n<p>picture_url: (可选) 音乐对应的图片地址</p>\n<p>narrow: （可选）播放器袖珍风格</p>\n<p>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</p>\n<p>width:xxx: (可选) 播放器宽度 (默认: 100%)</p>\n<p>lrc:xxx: （可选）歌词文件 URL 地址</p>\n<p>当开启 Hexo 的 文章资源文件夹 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">%</span> aplayer <span class=\"string\">&quot;Caffeine&quot;</span> <span class=\"string\">&quot;Jeff Williams&quot;</span> <span class=\"string\">&quot;caffeine.mp3&quot;</span> <span class=\"string\">&quot;picture.jpg&quot;</span> <span class=\"string\">&quot;lrc:caffeine.txt&quot;</span> <span class=\"meta\">%</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"播放列表\"><a href=\"#播放列表\" class=\"headerlink\" title=\"播放列表\"></a>播放列表</h4><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayerlist %&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;narrow&quot;</span>: false,                          <span class=\"regexp\">//</span> （可选）播放器袖珍风格</span><br><span class=\"line\">    <span class=\"string\">&quot;autoplay&quot;</span>: true,                         <span class=\"regexp\">//</span> （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class=\"line\">    <span class=\"string\">&quot;mode&quot;</span>: <span class=\"string\">&quot;random&quot;</span>,                         <span class=\"regexp\">//</span> （可选）曲目循环类型，有 <span class=\"string\">&#x27;random&#x27;</span>（随机播放）, <span class=\"string\">&#x27;single&#x27;</span> (单曲播放), <span class=\"string\">&#x27;circulation&#x27;</span> (循环播放), <span class=\"string\">&#x27;order&#x27;</span> (列表播放)， 默认：<span class=\"string\">&#x27;circulation&#x27;</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;showlrc&quot;</span>: <span class=\"number\">3</span>,                             <span class=\"regexp\">//</span> （可选）歌词显示配置项，可选项有：<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mutex&quot;</span>: true,                            <span class=\"regexp\">//</span> （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class=\"line\">    <span class=\"string\">&quot;theme&quot;</span>: <span class=\"string\">&quot;#e6d0b2&quot;</span>,\t                      <span class=\"regexp\">//</span> （可选）播放器风格色彩设置，默认：<span class=\"comment\">#b7daff</span></span><br><span class=\"line\">    <span class=\"string\">&quot;preload&quot;</span>: <span class=\"string\">&quot;metadata&quot;</span>,                    <span class=\"regexp\">//</span> （可选）音乐文件预载入模式，可选项： <span class=\"string\">&#x27;none&#x27;</span> <span class=\"string\">&#x27;metadata&#x27;</span> <span class=\"string\">&#x27;auto&#x27;</span>, 默认: <span class=\"string\">&#x27;auto&#x27;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;listmaxheight&quot;</span>: <span class=\"string\">&quot;513px&quot;</span>,                 <span class=\"regexp\">//</span> (可选) 该播放列表的最大长度</span><br><span class=\"line\">    <span class=\"string\">&quot;music&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;CoCo&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Jeff Williams&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;caffeine.mp3&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pic&quot;</span>: <span class=\"string\">&quot;caffeine.jpeg&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;lrc&quot;</span>: <span class=\"string\">&quot;caffeine.txt&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;アイロニ&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;鹿乃&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;irony.mp3&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pic&quot;</span>: <span class=\"string\">&quot;irony.jpg&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"MetingJS支持\"><a href=\"#MetingJS支持\" class=\"headerlink\" title=\"MetingJS支持\"></a>MetingJS支持</h4><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">aplayer:</span></span><br><span class=\"line\">  <span class=\"attr\">meting:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><br>接着就可以通过<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\">meting</span> ...%&#125;</span></span><br></pre></td></tr></table></figure><br> 在文章中使用 MetingJS 播放器了：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 简单示例 (id, server, type)  --&gt;</span></span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\">meting</span> &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 进阶示例 --&gt;</span></span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\">meting</span> &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span></span><br></pre></td></tr></table></figure><br>id    必须值    歌曲 id / 播放列表 id / 相册 id / 搜索关键字</p>\n<p>server    必须值    音乐平台: netease, tencent, kugou, xiami, baidu</p>\n<p>type    必须值    song, playlist, album, search, artist</p>\n<p>fixed    false    开启固定模式</p>\n<p>mini    false    开启迷你模式</p>\n<p>loop    all    列表循环模式：all, one,none</p>\n<p>order    list    列表播放模式： list, random</p>\n<p>volume    0.7    播放器音量</p>\n<p>lrctype    0    歌词格式类型</p>\n<p>listfolded    false    指定音乐播放列表是否折叠</p>\n<p>storagename    metingjs    LocalStorage 中存储播放器设定的键名</p>\n<p>autoplay    true    自动播放，移动端浏览器暂时不支持此功能</p>\n<p>mutex    true    该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</p>\n<p>listmaxheight    340px    播放列表的最大长度</p>\n<p>preload    auto    音乐文件预载入模式，可选项： none, metadata, auto</p>\n<p>theme    #ad7a86    播放器风格色彩设置</p>\n<h2 id=\"全局音乐自动播放\"><a href=\"#全局音乐自动播放\" class=\"headerlink\" title=\"全局音乐自动播放\"></a>全局音乐自动播放</h2><p>修改<font color=red>\\theme\\next\\layout_layout.swig</font>文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引用依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 我使用的APlayer本体 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aplayer&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-id</span>=<span class=\"string\">&quot;2465890057&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-server</span>=<span class=\"string\">&quot;netease&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-type</span>=<span class=\"string\">&quot;playlist&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-fixed</span>=<span class=\"string\">&quot;true&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-autoplay</span>=<span class=\"string\">&quot;true&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-order</span>=<span class=\"string\">&quot;random&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-volume</span>=<span class=\"string\">&quot;0.55&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-theme</span>=<span class=\"string\">&quot;#cc543a&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-preload</span>=<span class=\"string\">&quot;auto&quot;</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--如果将本体放在body里面导致页面加载出现问题，请尝试放到body体后面--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Aplayer<a href=\"https://github.com/metowolf/MetingJS\">参数设置</a><br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span>-server: netease, tencent, kugou, xiami, baidu</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span>-<span class=\"keyword\">type</span>: song, playlist, album, search, artist</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span>-id: song id / playlist id / album id / search keyword</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span>-order: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p><font color=red>pjax</font>，页面跳转时不重新播放</p>\n<p>pjax安装</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes/<span class=\"keyword\">next</span></span><br><span class=\"line\">$ git clone <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/theme</span>-<span class=\"keyword\">next</span>/theme-<span class=\"keyword\">next</span>-pjax source/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">pjax</span></span></span><br></pre></td></tr></table></figure>\n<p>设置theme的_config.yml<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Easily enable fast Ajax navigation <span class=\"keyword\">on</span> your website.</span><br><span class=\"line\"># Dependencie<span class=\"variable\">s:</span> http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/theme-<span class=\"keyword\">next</span>/theme-<span class=\"keyword\">next</span>-pjax</span><br><span class=\"line\"># For moreinformation: http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/MoOx/pjax</span><br><span class=\"line\">pjax: true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"设置背景图片\"><a href=\"#设置背景图片\" class=\"headerlink\" title=\"设置背景图片\"></a>设置背景图片</h2><p>修改theme _config.yml<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">custom_file_path:</span><br><span class=\"line\">  style: <span class=\"keyword\">source</span><span class=\"regexp\">/_data/</span>styles.styl</span><br></pre></td></tr></table></figure><br>在<font color=red>blog根目录下</font>新建_data文件夹</p>\n<p>新建styles.styl</p>\n<p>内容：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加背景图片</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: url(https://source.unsplash.com/random/<span class=\"number\">1600</span>x900?wallpapers);<span class=\"comment\">//自己喜欢的图片地址</span></span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-attachment</span>: fixed;</span><br><span class=\"line\">      <span class=\"attribute\">background-position</span>: <span class=\"number\">50%</span> <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main-inner</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// margin-top: 60px;</span></span><br><span class=\"line\">   <span class=\"comment\">// padding: 60px 60px 60px 60px;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.8</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//博客内容透明化</span></span><br><span class=\"line\"><span class=\"comment\">//文章内容的透明度设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content-wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//侧边框的透明度设置</span></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//菜单栏的透明度设置</span></span><br><span class=\"line\"><span class=\"selector-class\">.header-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: rgba(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">0.85</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//搜索框（local-search）的透明度设置</span></span><br><span class=\"line\"><span class=\"selector-class\">.popup</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地搜索\"><a href=\"#本地搜索\" class=\"headerlink\" title=\"本地搜索\"></a>本地搜索</h2><p>安装相应插件<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-searchdb  <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure><br>设置根目录配置文件<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure><br>设置主题目录配置文件<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  <span class=\"attr\">unescape:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h2><h3 id=\"安装-hexo-renderer-kramed\"><a href=\"#安装-hexo-renderer-kramed\" class=\"headerlink\" title=\"安装 hexo-renderer-kramed\"></a>安装 hexo-renderer-kramed</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">uninstall</span> hexo-renderer-marked <span class=\"comment\">--save</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-renderer-kramed <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-node-modules-kramed-lib-rules-inline-js\"><a href=\"#修改-node-modules-kramed-lib-rules-inline-js\" class=\"headerlink\" title=\"修改/node_modules/kramed/lib/rules/inline.js\"></a>修改/node_modules/kramed/lib/rules/inline.js</h3><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">escape: /^<span class=\"symbol\">\\\\</span>([<span class=\"symbol\">\\\\</span>`*&#123;&#125;<span class=\"symbol\">\\[</span><span class=\"symbol\">\\]</span>()#$+<span class=\"symbol\">\\-</span>.!_&gt;])/,</span><br><span class=\"line\">改为</span><br><span class=\"line\">escape: /^<span class=\"symbol\">\\\\</span>([`*<span class=\"symbol\">\\[</span><span class=\"symbol\">\\]</span>()# +<span class=\"symbol\">\\-</span>.!_&gt;])/,</span><br><span class=\"line\"></span><br><span class=\"line\">em: /^<span class=\"symbol\">\\b</span>_((?:__|[<span class=\"symbol\">\\s</span><span class=\"symbol\">\\S</span>])+?)_<span class=\"symbol\">\\b</span>|^<span class=\"symbol\">\\*</span>((?:<span class=\"symbol\">\\*</span><span class=\"symbol\">\\*</span>|[<span class=\"symbol\">\\s</span><span class=\"symbol\">\\S</span>])+?)<span class=\"symbol\">\\*</span>(?!<span class=\"symbol\">\\*</span>)/,</span><br><span class=\"line\">改为</span><br><span class=\"line\">em: /^<span class=\"symbol\">\\*</span>((?:<span class=\"symbol\">\\*</span><span class=\"symbol\">\\*</span>|[<span class=\"symbol\">\\s</span><span class=\"symbol\">\\S</span>])+?)<span class=\"symbol\">\\*</span>(?!<span class=\"symbol\">\\*</span>)/,</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改主题-config-yml\"><a href=\"#修改主题-config-yml\" class=\"headerlink\" title=\"修改主题_config.yml\"></a>修改主题_config.yml</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">math:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  <span class=\"attr\">mathjax:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">mhchem:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>开启per_page保证只要显示加了mathjax: true的页面才进行渲染。</p>\n<h3 id=\"在md文件开启mathjax\"><a href=\"#在md文件开启mathjax\" class=\"headerlink\" title=\"在md文件开启mathjax\"></a>在md文件开启mathjax</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-MathJax-给公式编号并引用公式\"><a href=\"#使用-MathJax-给公式编号并引用公式\" class=\"headerlink\" title=\"使用 MathJax 给公式编号并引用公式\"></a>使用 MathJax 给公式编号并引用公式</h3><p>在新版本的 NexT 主题中，我们加入了公式自动编号和引用功能。下面简要介绍一下如何使用这项功能。</p>\n<p>为了使用这项功能，一般来说，你必须把所使用的 LaTeX 公式放在 equation 环境里面，采用旧的方法<br>（也就是说，仅仅把公式的每一边用两个 $ 符号包含起来）是无效的。如何引用公式？<br>你只需要在书写公式的时候给公式一个 \\label{} 标记（tag），然后在正文中，可以使用 \\ref{} 或者 \\eqref{} 命令来引用对应的公式。<br>使用 \\eqref{} 是推荐的方式，因为如果你使用 \\ref{}，公式在文中的引用编号将没有圆括号包围。下面介绍几种常见的公式编号例子。</p>\n<p>对于简单的公式，使用下面的方式给公式一个标记，</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$$</span>\\<span class=\"keyword\">begin</span>&#123;equation&#125;\\label&#123;eq1&#125;</span><br><span class=\"line\">e=mc^<span class=\"number\">2</span></span><br><span class=\"line\">\\<span class=\"keyword\">end</span>&#123;equation&#125;<span class=\"variable\">$$</span></span><br></pre></td></tr></table></figure>\n<p>然后，在正文中，你可以轻松引用上述公式，一个简单的例子如下：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">著名的质能方程 <span class=\"variable\">$\\</span>eqref&#123;eq1&#125;<span class=\"variable\">$ </span>由爱因斯坦提出 ...</span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">\\begin{equation}\\label{eq1}\ne=mc^2\n\\end{equation}</script><p>著名的质能方程 $\\eqref{eq1}$ 由爱因斯坦提出 …</p>\n<p>对于多行公式，在 equation 环境中，你可以使用 aligned 环境把公式分成多行，<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span><span class=\"symbol\">$</span>\\begin&#123;<span class=\"keyword\">equation</span>&#125;\\label&#123;eq2&#125;</span><br><span class=\"line\">\\begin&#123;aligned&#125;</span><br><span class=\"line\">a <span class=\"comment\">&amp;= b + c \\\\</span></span><br><span class=\"line\">  &amp;= d <span class=\"comment\">+ e + f + g \\\\</span></span><br><span class=\"line\">  &amp;= h <span class=\"comment\">+ i</span></span><br><span class=\"line\">\\end&#123;aligned&#125;</span><br><span class=\"line\">\\end&#123;<span class=\"keyword\">equation</span>&#125;$$</span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">\\begin{equation}\\label{eq2}\n\\begin{aligned}\na &= b + c \\\\\n  &= d + e + f + g \\\\\n  &= h + i\n\\end{aligned}\n\\end{equation}</script><p>要对齐多个公式，我们需要使用 align 环境。align 环境中的每个公式都有自己的编号：<br><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$\\<span class=\"keyword\">begin</span>&#123;<span class=\"keyword\">align</span>&#125;</span><br><span class=\"line\">a &amp;<span class=\"operator\">=</span> b + <span class=\"keyword\">c</span> \\label&#123;<span class=\"keyword\">eq</span><span class=\"number\">3</span>&#125; \\\\</span><br><span class=\"line\"><span class=\"keyword\">x</span> &amp;<span class=\"operator\">=</span> yz \\label&#123;<span class=\"keyword\">eq</span><span class=\"number\">4</span>&#125;\\\\</span><br><span class=\"line\">l &amp;<span class=\"operator\">=</span> m - n \\label&#123;<span class=\"keyword\">eq</span><span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\\<span class=\"keyword\">end</span>&#123;<span class=\"keyword\">align</span>&#125;$$</span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">\\begin{align}\na &= b + c \\label{eq3} \\\\\nx &= yz \\label{eq4}\\\\\nl &= m - n \\label{eq5}\n\\end{align}</script><p>在 align 环境中，如果你不想给某个或某几个公式编号，那么在这些公式后面使用 \\nonumber 命令即可。例如：<br><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$<span class=\"string\">\\begin&#123;align&#125;</span></span><br><span class=\"line\">-<span class=\"number\">4</span> + <span class=\"number\">5x</span> &amp;= <span class=\"number\">2</span>+y <span class=\"string\">\\nonumber</span>  <span class=\"string\">\\\\</span></span><br><span class=\"line\"> w+<span class=\"number\">2</span> &amp;= -<span class=\"number\">1</span>+w <span class=\"string\">\\\\</span></span><br><span class=\"line\"> ab &amp;= cb</span><br><span class=\"line\"><span class=\"string\">\\end&#123;align&#125;$$</span></span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">\\begin{align}\n-4 + 5x &= 2+y \\nonumber  \\\\\n w+2 &= -1+w \\\\\n ab &= cb\n\\end{align}</script><p>有时，你可能会希望采用更加奇特的方式来标记和引用你的公式，你可以通过使用 \\tag{} 命令来实现，例如：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span><span class=\"symbol\">$</span>x+<span class=\"number\">1</span>\\over\\<span class=\"built_in\">sqrt</span>&#123;<span class=\"number\">1</span>-x^<span class=\"number\">2</span>&#125; \\tag&#123;i&#125;\\label&#123;eq_tag&#125;<span class=\"symbol\">$</span><span class=\"symbol\">$</span></span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">x+1\\over\\sqrt{1-x^2} \\tag{i}\\label{eq_tag}</script><h2 id=\"文章加密\"><a href=\"#文章加密\" class=\"headerlink\" title=\"文章加密\"></a>文章加密</h2><p>安装插件<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save hexo-blog-encrypt</span></span><br></pre></td></tr></table></figure><br>格式<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">encryptAsDiary</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2016-03-30 21:12:21</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">mikemessi</span></span><br><span class=\"line\"><span class=\"attr\">abstract:</span> <span class=\"string\">Here&#x27;s</span> <span class=\"string\">something</span> <span class=\"string\">encrypted,</span> <span class=\"string\">password</span> <span class=\"string\">is</span> <span class=\"string\">required</span> <span class=\"string\">to</span> <span class=\"string\">continue</span> <span class=\"string\">reading.</span></span><br><span class=\"line\"><span class=\"attr\">message:</span> <span class=\"string\">Hey,</span> <span class=\"string\">password</span> <span class=\"string\">is</span> <span class=\"string\">required</span> <span class=\"string\">here.</span></span><br><span class=\"line\"><span class=\"attr\">wrong_pass_message:</span> <span class=\"string\">Oh,</span> <span class=\"string\">this</span> <span class=\"string\">is</span> <span class=\"string\">an</span> <span class=\"string\">invalid</span> <span class=\"string\">password.</span> <span class=\"string\">Check</span> <span class=\"string\">and</span> <span class=\"string\">try</span> <span class=\"string\">again,</span> <span class=\"string\">please.</span></span><br><span class=\"line\"><span class=\"attr\">wrong_hash_message:</span> <span class=\"string\">Oh,</span> <span class=\"string\">these</span> <span class=\"string\">decrypted</span> <span class=\"string\">content</span> <span class=\"string\">cannot</span> <span class=\"string\">be</span> <span class=\"string\">verified,</span> <span class=\"string\">but</span> <span class=\"string\">you</span> <span class=\"string\">can</span> <span class=\"string\">still</span> <span class=\"string\">have</span> <span class=\"string\">a</span> <span class=\"string\">look.</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"添加看板娘\"><a href=\"#添加看板娘\" class=\"headerlink\" title=\"添加看板娘\"></a>添加看板娘</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/xiazeyu/live2d-widget-models\">https://github.com/xiazeyu/live2d-widget-models</a></p>\n<h3 id=\"禁用评论\"><a href=\"#禁用评论\" class=\"headerlink\" title=\"禁用评论\"></a>禁用评论</h3><p>md文件加<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"文章置顶\"><a href=\"#文章置顶\" class=\"headerlink\" title=\"文章置顶\"></a>文章置顶</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">uninstall</span> hexo-generator-<span class=\"keyword\">index</span> <span class=\"comment\">--save</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">index</span>-pin-top <span class=\"comment\">--save</span></span><br><span class=\"line\">文章内设置：</span><br><span class=\"line\">top: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>修改/themes/next/layout/_macro/post.swig,在</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">&quot;post-meta&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>标签下，插入如下代码：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> post.top %&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;green&quot;</span>&gt;</span>置顶<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"首页不显示全文\"><a href=\"#首页不显示全文\" class=\"headerlink\" title=\"首页不显示全文\"></a>首页不显示全文</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换标签前缀-字符\"><a href=\"#替换标签前缀-字符\" class=\"headerlink\" title=\"替换标签前缀 # 字符\"></a>替换标签前缀 # 字符</h3><p>主题_config.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tag_icon:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"markdown改变字体颜色\"><a href=\"#markdown改变字体颜色\" class=\"headerlink\" title=\"markdown改变字体颜色\"></a>markdown改变字体颜色</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">改变颜色 <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">red</span>&gt;</span>text<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">改变字体 <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">face</span>=<span class=\"string\">&quot;微软雅黑&quot;</span>&gt;</span>微软雅黑<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">改变大小 <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">red</span> <span class=\"attr\">size</span>=<span class=\"string\">12</span>&gt;</span>字号12<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">改变背景色 <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">orange</span>&gt;</span>背景色是：orange<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"markdown插入超链接\"><a href=\"#markdown插入超链接\" class=\"headerlink\" title=\"markdown插入超链接\"></a>markdown插入超链接</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[提示文字](<span class=\"name\">url</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">%</span> asset_img test.jpg <span class=\"meta\">%</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//test.jpg在对应资源文件夹</span></span><br></pre></td></tr></table></figure>\n<p>一些图片网站</p>\n<p><a href=\"https://pixabay.com/images/search/\">https://pixabay.com/images/search/</a></p>\n<p><a href=\"https://unsplash.com/\">https://unsplash.com/</a></p>\n<p><a href=\"https://www.pexels.com/zh-cn/\">https://www.pexels.com/zh-cn/</a></p>\n<h3 id=\"鼠标特效\"><a href=\"#鼠标特效\" class=\"headerlink\" title=\"鼠标特效\"></a>鼠标特效</h3><p>在themes\\next\\source\\js目录下新建fire.js,内容如下：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; origin, speed, color, angle, context &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.origin = origin</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.position = &#123; ...<span class=\"keyword\">this</span>.origin &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.speed = speed</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.angle = angle</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context = context</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderCount = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  draw() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.fillStyle = <span class=\"keyword\">this</span>.color</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.beginPath()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.arc(<span class=\"keyword\">this</span>.position.x, <span class=\"keyword\">this</span>.position.y, <span class=\"number\">2</span>, <span class=\"number\">0</span>, Math.PI * <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.fill()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  move() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.position.x = (Math.sin(<span class=\"keyword\">this</span>.angle) * <span class=\"keyword\">this</span>.speed) + <span class=\"keyword\">this</span>.position.x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.position.y = (Math.cos(<span class=\"keyword\">this</span>.angle) * <span class=\"keyword\">this</span>.speed) + <span class=\"keyword\">this</span>.position.y + (<span class=\"keyword\">this</span>.renderCount * <span class=\"number\">0.3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderCount++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boom</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (&#123; origin, context, circleCount = <span class=\"number\">16</span>, area &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.origin = origin</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context = context</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.circleCount = circleCount</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.area = area</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stop = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.circles = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  randomArray(range) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = range.length</span><br><span class=\"line\">    <span class=\"keyword\">const</span> randomIndex = Math.floor(length * Math.random())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> range[randomIndex]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  randomColor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> range = [<span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;#&#x27;</span> + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  randomRange(start, end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (end - start) * Math.random() + start</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(let i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.circleCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> circle = new Circle(&#123;</span><br><span class=\"line\">        context: <span class=\"keyword\">this</span>.context,</span><br><span class=\"line\">        origin: <span class=\"keyword\">this</span>.origin,</span><br><span class=\"line\">        color: <span class=\"keyword\">this</span>.randomColor(),</span><br><span class=\"line\">        angle: <span class=\"keyword\">this</span>.randomRange(Math.PI - <span class=\"number\">1</span>, Math.PI + <span class=\"number\">1</span>),</span><br><span class=\"line\">        speed: <span class=\"keyword\">this</span>.randomRange(<span class=\"number\">1</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.circles.push(circle)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  move() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.circles.forEach((circle, index) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (circle.position.x &gt; <span class=\"keyword\">this</span>.area.width || circle.position.y &gt; <span class=\"keyword\">this</span>.area.height) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.circles.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      circle.move()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.circles.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.stop = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  draw() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.circles.forEach(circle =&gt; circle.draw())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CursorSpecialEffects</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.computerCanvas = document.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderCanvas = document.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.computerContext = <span class=\"keyword\">this</span>.computerCanvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderContext = <span class=\"keyword\">this</span>.renderCanvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.globalWidth = window.innerWidth</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.globalHeight = window.innerHeight</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.booms = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleMouseDown(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> boom = new Boom(&#123;</span><br><span class=\"line\">      origin: &#123; x: e.clientX, y: e.clientY &#125;,</span><br><span class=\"line\">      context: <span class=\"keyword\">this</span>.computerContext,</span><br><span class=\"line\">      area: &#123;</span><br><span class=\"line\">        width: <span class=\"keyword\">this</span>.globalWidth,</span><br><span class=\"line\">        height: <span class=\"keyword\">this</span>.globalHeight</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    boom.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.booms.push(boom)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running || <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handlePageHide() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.booms = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> style = <span class=\"keyword\">this</span>.renderCanvas.style</span><br><span class=\"line\">    style.position = <span class=\"string\">&#x27;fixed&#x27;</span></span><br><span class=\"line\">    style.top = style.left = <span class=\"number\">0</span></span><br><span class=\"line\">    style.zIndex = <span class=\"string\">&#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class=\"line\">    style.pointerEvents = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    style.width = <span class=\"keyword\">this</span>.renderCanvas.width = <span class=\"keyword\">this</span>.computerCanvas.width = <span class=\"keyword\">this</span>.globalWidth</span><br><span class=\"line\">    style.height = <span class=\"keyword\">this</span>.renderCanvas.height = <span class=\"keyword\">this</span>.computerCanvas.height = <span class=\"keyword\">this</span>.globalHeight</span><br><span class=\"line\"></span><br><span class=\"line\">    document.body.append(<span class=\"keyword\">this</span>.renderCanvas)</span><br><span class=\"line\"></span><br><span class=\"line\">    window.addEventListener(<span class=\"string\">&#x27;mousedown&#x27;</span>, <span class=\"keyword\">this</span>.handleMouseDown.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    window.addEventListener(<span class=\"string\">&#x27;pagehide&#x27;</span>, <span class=\"keyword\">this</span>.handlePageHide.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.booms.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    requestAnimationFrame(<span class=\"keyword\">this</span>.run.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.computerContext.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.globalWidth, <span class=\"keyword\">this</span>.globalHeight)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderContext.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.globalWidth, <span class=\"keyword\">this</span>.globalHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.booms.forEach((boom, index) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (boom.stop) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.booms.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      boom.move()</span><br><span class=\"line\">      boom.draw()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderContext.drawImage(<span class=\"keyword\">this</span>.computerCanvas, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.globalWidth, <span class=\"keyword\">this</span>.globalHeight)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cursorSpecialEffects = new CursorSpecialEffects()</span><br><span class=\"line\">cursorSpecialEffects.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>在themes\\next\\layout的layout.njk下添加<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/fire.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义回到顶部\"><a href=\"#自定义回到顶部\" class=\"headerlink\" title=\"自定义回到顶部\"></a>自定义回到顶部</h3><p>在source\\images目录下放入自定义scroll.png，然后在source_data\\styles.styl增加</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定义回到顶部样式</span></span><br><span class=\"line\"><span class=\"selector-class\">.back-to-top</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">70px</span>;  <span class=\"comment\">//图片素材宽度</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">900px</span>;  <span class=\"comment\">//图片素材高度</span></span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">900px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: unset;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all .<span class=\"number\">5s</span> ease-in-out;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: url(<span class=\"string\">&quot;/images/scroll.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//隐藏箭头图标</span></span><br><span class=\"line\">  &gt; <span class=\"selector-tag\">i</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.back-to-top-on</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: unset;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">100vh</span> &lt; (<span class=\"number\">900px</span> + <span class=\"number\">200px</span>) ? calc( <span class=\"number\">100vh</span> - <span class=\"number\">900px</span> - <span class=\"number\">200px</span> ) : <span class=\"number\">0px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<img src=\"/2020/08/02/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/test.jpg\" class=\"\">\n<p>本站诞生史。</p>","more":"<h2 id=\"hexo-初始化\"><a href=\"#hexo-初始化\" class=\"headerlink\" title=\"hexo 初始化\"></a>hexo 初始化</h2>\n    <div id=\"aplayer-XAvXYtyT\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"2909007895\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br><span class=\"line\">npm <span class=\"keyword\">install</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g -d</span><br><span class=\"line\">hexo s -d</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装next主题\"><a href=\"#安装next主题\" class=\"headerlink\" title=\"安装next主题\"></a>安装next主题</h2><p>最新next仓库<br><a href=\"https://github.com/next-theme/hexo-theme-next\">https://github.com/next-theme/hexo-theme-next</a></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/next-theme/</span>hexo-theme-<span class=\"keyword\">next</span> themes/<span class=\"keyword\">next</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"文本添加音乐\"><a href=\"#文本添加音乐\" class=\"headerlink\" title=\"文本添加音乐\"></a>文本添加音乐</h2><h3 id=\"安装hexo-tag-aplayer\"><a href=\"#安装hexo-tag-aplayer\" class=\"headerlink\" title=\"安装hexo-tag-aplayer\"></a>安装hexo-tag-aplayer</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save hexo-tag-aplayer</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<p>title : 曲目标题</p>\n<p>author: 曲目作者</p>\n<p>url: 音乐文件 URL 地址</p>\n<p>picture_url: (可选) 音乐对应的图片地址</p>\n<p>narrow: （可选）播放器袖珍风格</p>\n<p>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</p>\n<p>width:xxx: (可选) 播放器宽度 (默认: 100%)</p>\n<p>lrc:xxx: （可选）歌词文件 URL 地址</p>\n<p>当开启 Hexo 的 文章资源文件夹 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">%</span> aplayer <span class=\"string\">&quot;Caffeine&quot;</span> <span class=\"string\">&quot;Jeff Williams&quot;</span> <span class=\"string\">&quot;caffeine.mp3&quot;</span> <span class=\"string\">&quot;picture.jpg&quot;</span> <span class=\"string\">&quot;lrc:caffeine.txt&quot;</span> <span class=\"meta\">%</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"播放列表\"><a href=\"#播放列表\" class=\"headerlink\" title=\"播放列表\"></a>播放列表</h4><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayerlist %&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;narrow&quot;</span>: false,                          <span class=\"regexp\">//</span> （可选）播放器袖珍风格</span><br><span class=\"line\">    <span class=\"string\">&quot;autoplay&quot;</span>: true,                         <span class=\"regexp\">//</span> （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class=\"line\">    <span class=\"string\">&quot;mode&quot;</span>: <span class=\"string\">&quot;random&quot;</span>,                         <span class=\"regexp\">//</span> （可选）曲目循环类型，有 <span class=\"string\">&#x27;random&#x27;</span>（随机播放）, <span class=\"string\">&#x27;single&#x27;</span> (单曲播放), <span class=\"string\">&#x27;circulation&#x27;</span> (循环播放), <span class=\"string\">&#x27;order&#x27;</span> (列表播放)， 默认：<span class=\"string\">&#x27;circulation&#x27;</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;showlrc&quot;</span>: <span class=\"number\">3</span>,                             <span class=\"regexp\">//</span> （可选）歌词显示配置项，可选项有：<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mutex&quot;</span>: true,                            <span class=\"regexp\">//</span> （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class=\"line\">    <span class=\"string\">&quot;theme&quot;</span>: <span class=\"string\">&quot;#e6d0b2&quot;</span>,\t                      <span class=\"regexp\">//</span> （可选）播放器风格色彩设置，默认：<span class=\"comment\">#b7daff</span></span><br><span class=\"line\">    <span class=\"string\">&quot;preload&quot;</span>: <span class=\"string\">&quot;metadata&quot;</span>,                    <span class=\"regexp\">//</span> （可选）音乐文件预载入模式，可选项： <span class=\"string\">&#x27;none&#x27;</span> <span class=\"string\">&#x27;metadata&#x27;</span> <span class=\"string\">&#x27;auto&#x27;</span>, 默认: <span class=\"string\">&#x27;auto&#x27;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;listmaxheight&quot;</span>: <span class=\"string\">&quot;513px&quot;</span>,                 <span class=\"regexp\">//</span> (可选) 该播放列表的最大长度</span><br><span class=\"line\">    <span class=\"string\">&quot;music&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;CoCo&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Jeff Williams&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;caffeine.mp3&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pic&quot;</span>: <span class=\"string\">&quot;caffeine.jpeg&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;lrc&quot;</span>: <span class=\"string\">&quot;caffeine.txt&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;アイロニ&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;鹿乃&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;irony.mp3&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;pic&quot;</span>: <span class=\"string\">&quot;irony.jpg&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"MetingJS支持\"><a href=\"#MetingJS支持\" class=\"headerlink\" title=\"MetingJS支持\"></a>MetingJS支持</h4><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">aplayer:</span></span><br><span class=\"line\">  <span class=\"attr\">meting:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><br>接着就可以通过<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\">meting</span> ...%&#125;</span></span><br></pre></td></tr></table></figure><br> 在文章中使用 MetingJS 播放器了：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 简单示例 (id, server, type)  --&gt;</span></span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\">meting</span> &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 进阶示例 --&gt;</span></span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\">meting</span> &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span></span><br></pre></td></tr></table></figure><br>id    必须值    歌曲 id / 播放列表 id / 相册 id / 搜索关键字</p>\n<p>server    必须值    音乐平台: netease, tencent, kugou, xiami, baidu</p>\n<p>type    必须值    song, playlist, album, search, artist</p>\n<p>fixed    false    开启固定模式</p>\n<p>mini    false    开启迷你模式</p>\n<p>loop    all    列表循环模式：all, one,none</p>\n<p>order    list    列表播放模式： list, random</p>\n<p>volume    0.7    播放器音量</p>\n<p>lrctype    0    歌词格式类型</p>\n<p>listfolded    false    指定音乐播放列表是否折叠</p>\n<p>storagename    metingjs    LocalStorage 中存储播放器设定的键名</p>\n<p>autoplay    true    自动播放，移动端浏览器暂时不支持此功能</p>\n<p>mutex    true    该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</p>\n<p>listmaxheight    340px    播放列表的最大长度</p>\n<p>preload    auto    音乐文件预载入模式，可选项： none, metadata, auto</p>\n<p>theme    #ad7a86    播放器风格色彩设置</p>\n<h2 id=\"全局音乐自动播放\"><a href=\"#全局音乐自动播放\" class=\"headerlink\" title=\"全局音乐自动播放\"></a>全局音乐自动播放</h2><p>修改<font color=red>\\theme\\next\\layout_layout.swig</font>文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引用依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 我使用的APlayer本体 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;aplayer&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-id</span>=<span class=\"string\">&quot;2465890057&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-server</span>=<span class=\"string\">&quot;netease&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-type</span>=<span class=\"string\">&quot;playlist&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-fixed</span>=<span class=\"string\">&quot;true&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-autoplay</span>=<span class=\"string\">&quot;true&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-order</span>=<span class=\"string\">&quot;random&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-volume</span>=<span class=\"string\">&quot;0.55&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-theme</span>=<span class=\"string\">&quot;#cc543a&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">data-preload</span>=<span class=\"string\">&quot;auto&quot;</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--如果将本体放在body里面导致页面加载出现问题，请尝试放到body体后面--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Aplayer<a href=\"https://github.com/metowolf/MetingJS\">参数设置</a><br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span>-server: netease, tencent, kugou, xiami, baidu</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span>-<span class=\"keyword\">type</span>: song, playlist, album, search, artist</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span>-id: song id / playlist id / album id / search keyword</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span>-order: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p><font color=red>pjax</font>，页面跳转时不重新播放</p>\n<p>pjax安装</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes/<span class=\"keyword\">next</span></span><br><span class=\"line\">$ git clone <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/theme</span>-<span class=\"keyword\">next</span>/theme-<span class=\"keyword\">next</span>-pjax source/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">pjax</span></span></span><br></pre></td></tr></table></figure>\n<p>设置theme的_config.yml<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Easily enable fast Ajax navigation <span class=\"keyword\">on</span> your website.</span><br><span class=\"line\"># Dependencie<span class=\"variable\">s:</span> http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/theme-<span class=\"keyword\">next</span>/theme-<span class=\"keyword\">next</span>-pjax</span><br><span class=\"line\"># For moreinformation: http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/MoOx/pjax</span><br><span class=\"line\">pjax: true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"设置背景图片\"><a href=\"#设置背景图片\" class=\"headerlink\" title=\"设置背景图片\"></a>设置背景图片</h2><p>修改theme _config.yml<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">custom_file_path:</span><br><span class=\"line\">  style: <span class=\"keyword\">source</span><span class=\"regexp\">/_data/</span>styles.styl</span><br></pre></td></tr></table></figure><br>在<font color=red>blog根目录下</font>新建_data文件夹</p>\n<p>新建styles.styl</p>\n<p>内容：<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加背景图片</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: url(https://source.unsplash.com/random/<span class=\"number\">1600</span>x900?wallpapers);<span class=\"comment\">//自己喜欢的图片地址</span></span><br><span class=\"line\">      <span class=\"attribute\">background-size</span>: cover;</span><br><span class=\"line\">      <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">      <span class=\"attribute\">background-attachment</span>: fixed;</span><br><span class=\"line\">      <span class=\"attribute\">background-position</span>: <span class=\"number\">50%</span> <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main-inner</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// margin-top: 60px;</span></span><br><span class=\"line\">   <span class=\"comment\">// padding: 60px 60px 60px 60px;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.8</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//博客内容透明化</span></span><br><span class=\"line\"><span class=\"comment\">//文章内容的透明度设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content-wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//侧边框的透明度设置</span></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//菜单栏的透明度设置</span></span><br><span class=\"line\"><span class=\"selector-class\">.header-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: rgba(<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">0.85</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//搜索框（local-search）的透明度设置</span></span><br><span class=\"line\"><span class=\"selector-class\">.popup</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0.85</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地搜索\"><a href=\"#本地搜索\" class=\"headerlink\" title=\"本地搜索\"></a>本地搜索</h2><p>安装相应插件<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-searchdb  <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure><br>设置根目录配置文件<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure><br>设置主题目录配置文件<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  <span class=\"attr\">unescape:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h2><h3 id=\"安装-hexo-renderer-kramed\"><a href=\"#安装-hexo-renderer-kramed\" class=\"headerlink\" title=\"安装 hexo-renderer-kramed\"></a>安装 hexo-renderer-kramed</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">uninstall</span> hexo-renderer-marked <span class=\"comment\">--save</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-renderer-kramed <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-node-modules-kramed-lib-rules-inline-js\"><a href=\"#修改-node-modules-kramed-lib-rules-inline-js\" class=\"headerlink\" title=\"修改/node_modules/kramed/lib/rules/inline.js\"></a>修改/node_modules/kramed/lib/rules/inline.js</h3><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">escape: /^<span class=\"symbol\">\\\\</span>([<span class=\"symbol\">\\\\</span>`*&#123;&#125;<span class=\"symbol\">\\[</span><span class=\"symbol\">\\]</span>()#$+<span class=\"symbol\">\\-</span>.!_&gt;])/,</span><br><span class=\"line\">改为</span><br><span class=\"line\">escape: /^<span class=\"symbol\">\\\\</span>([`*<span class=\"symbol\">\\[</span><span class=\"symbol\">\\]</span>()# +<span class=\"symbol\">\\-</span>.!_&gt;])/,</span><br><span class=\"line\"></span><br><span class=\"line\">em: /^<span class=\"symbol\">\\b</span>_((?:__|[<span class=\"symbol\">\\s</span><span class=\"symbol\">\\S</span>])+?)_<span class=\"symbol\">\\b</span>|^<span class=\"symbol\">\\*</span>((?:<span class=\"symbol\">\\*</span><span class=\"symbol\">\\*</span>|[<span class=\"symbol\">\\s</span><span class=\"symbol\">\\S</span>])+?)<span class=\"symbol\">\\*</span>(?!<span class=\"symbol\">\\*</span>)/,</span><br><span class=\"line\">改为</span><br><span class=\"line\">em: /^<span class=\"symbol\">\\*</span>((?:<span class=\"symbol\">\\*</span><span class=\"symbol\">\\*</span>|[<span class=\"symbol\">\\s</span><span class=\"symbol\">\\S</span>])+?)<span class=\"symbol\">\\*</span>(?!<span class=\"symbol\">\\*</span>)/,</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改主题-config-yml\"><a href=\"#修改主题-config-yml\" class=\"headerlink\" title=\"修改主题_config.yml\"></a>修改主题_config.yml</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">math:</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  <span class=\"attr\">mathjax:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">mhchem:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>开启per_page保证只要显示加了mathjax: true的页面才进行渲染。</p>\n<h3 id=\"在md文件开启mathjax\"><a href=\"#在md文件开启mathjax\" class=\"headerlink\" title=\"在md文件开启mathjax\"></a>在md文件开启mathjax</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-MathJax-给公式编号并引用公式\"><a href=\"#使用-MathJax-给公式编号并引用公式\" class=\"headerlink\" title=\"使用 MathJax 给公式编号并引用公式\"></a>使用 MathJax 给公式编号并引用公式</h3><p>在新版本的 NexT 主题中，我们加入了公式自动编号和引用功能。下面简要介绍一下如何使用这项功能。</p>\n<p>为了使用这项功能，一般来说，你必须把所使用的 LaTeX 公式放在 equation 环境里面，采用旧的方法<br>（也就是说，仅仅把公式的每一边用两个 $ 符号包含起来）是无效的。如何引用公式？<br>你只需要在书写公式的时候给公式一个 \\label{} 标记（tag），然后在正文中，可以使用 \\ref{} 或者 \\eqref{} 命令来引用对应的公式。<br>使用 \\eqref{} 是推荐的方式，因为如果你使用 \\ref{}，公式在文中的引用编号将没有圆括号包围。下面介绍几种常见的公式编号例子。</p>\n<p>对于简单的公式，使用下面的方式给公式一个标记，</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$$</span>\\<span class=\"keyword\">begin</span>&#123;equation&#125;\\label&#123;eq1&#125;</span><br><span class=\"line\">e=mc^<span class=\"number\">2</span></span><br><span class=\"line\">\\<span class=\"keyword\">end</span>&#123;equation&#125;<span class=\"variable\">$$</span></span><br></pre></td></tr></table></figure>\n<p>然后，在正文中，你可以轻松引用上述公式，一个简单的例子如下：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">著名的质能方程 <span class=\"variable\">$\\</span>eqref&#123;eq1&#125;<span class=\"variable\">$ </span>由爱因斯坦提出 ...</span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">\\begin{equation}\\label{eq1}\ne=mc^2\n\\end{equation}</script><p>著名的质能方程 $\\eqref{eq1}$ 由爱因斯坦提出 …</p>\n<p>对于多行公式，在 equation 环境中，你可以使用 aligned 环境把公式分成多行，<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span><span class=\"symbol\">$</span>\\begin&#123;<span class=\"keyword\">equation</span>&#125;\\label&#123;eq2&#125;</span><br><span class=\"line\">\\begin&#123;aligned&#125;</span><br><span class=\"line\">a <span class=\"comment\">&amp;= b + c \\\\</span></span><br><span class=\"line\">  &amp;= d <span class=\"comment\">+ e + f + g \\\\</span></span><br><span class=\"line\">  &amp;= h <span class=\"comment\">+ i</span></span><br><span class=\"line\">\\end&#123;aligned&#125;</span><br><span class=\"line\">\\end&#123;<span class=\"keyword\">equation</span>&#125;$$</span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">\\begin{equation}\\label{eq2}\n\\begin{aligned}\na &= b + c \\\\\n  &= d + e + f + g \\\\\n  &= h + i\n\\end{aligned}\n\\end{equation}</script><p>要对齐多个公式，我们需要使用 align 环境。align 环境中的每个公式都有自己的编号：<br><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$\\<span class=\"keyword\">begin</span>&#123;<span class=\"keyword\">align</span>&#125;</span><br><span class=\"line\">a &amp;<span class=\"operator\">=</span> b + <span class=\"keyword\">c</span> \\label&#123;<span class=\"keyword\">eq</span><span class=\"number\">3</span>&#125; \\\\</span><br><span class=\"line\"><span class=\"keyword\">x</span> &amp;<span class=\"operator\">=</span> yz \\label&#123;<span class=\"keyword\">eq</span><span class=\"number\">4</span>&#125;\\\\</span><br><span class=\"line\">l &amp;<span class=\"operator\">=</span> m - n \\label&#123;<span class=\"keyword\">eq</span><span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\\<span class=\"keyword\">end</span>&#123;<span class=\"keyword\">align</span>&#125;$$</span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">\\begin{align}\na &= b + c \\label{eq3} \\\\\nx &= yz \\label{eq4}\\\\\nl &= m - n \\label{eq5}\n\\end{align}</script><p>在 align 环境中，如果你不想给某个或某几个公式编号，那么在这些公式后面使用 \\nonumber 命令即可。例如：<br><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$<span class=\"string\">\\begin&#123;align&#125;</span></span><br><span class=\"line\">-<span class=\"number\">4</span> + <span class=\"number\">5x</span> &amp;= <span class=\"number\">2</span>+y <span class=\"string\">\\nonumber</span>  <span class=\"string\">\\\\</span></span><br><span class=\"line\"> w+<span class=\"number\">2</span> &amp;= -<span class=\"number\">1</span>+w <span class=\"string\">\\\\</span></span><br><span class=\"line\"> ab &amp;= cb</span><br><span class=\"line\"><span class=\"string\">\\end&#123;align&#125;$$</span></span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">\\begin{align}\n-4 + 5x &= 2+y \\nonumber  \\\\\n w+2 &= -1+w \\\\\n ab &= cb\n\\end{align}</script><p>有时，你可能会希望采用更加奇特的方式来标记和引用你的公式，你可以通过使用 \\tag{} 命令来实现，例如：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span><span class=\"symbol\">$</span>x+<span class=\"number\">1</span>\\over\\<span class=\"built_in\">sqrt</span>&#123;<span class=\"number\">1</span>-x^<span class=\"number\">2</span>&#125; \\tag&#123;i&#125;\\label&#123;eq_tag&#125;<span class=\"symbol\">$</span><span class=\"symbol\">$</span></span><br></pre></td></tr></table></figure></p>\n<script type=\"math/tex; mode=display\">x+1\\over\\sqrt{1-x^2} \\tag{i}\\label{eq_tag}</script><h2 id=\"文章加密\"><a href=\"#文章加密\" class=\"headerlink\" title=\"文章加密\"></a>文章加密</h2><p>安装插件<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save hexo-blog-encrypt</span></span><br></pre></td></tr></table></figure><br>格式<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">encryptAsDiary</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2016-03-30 21:12:21</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">mikemessi</span></span><br><span class=\"line\"><span class=\"attr\">abstract:</span> <span class=\"string\">Here&#x27;s</span> <span class=\"string\">something</span> <span class=\"string\">encrypted,</span> <span class=\"string\">password</span> <span class=\"string\">is</span> <span class=\"string\">required</span> <span class=\"string\">to</span> <span class=\"string\">continue</span> <span class=\"string\">reading.</span></span><br><span class=\"line\"><span class=\"attr\">message:</span> <span class=\"string\">Hey,</span> <span class=\"string\">password</span> <span class=\"string\">is</span> <span class=\"string\">required</span> <span class=\"string\">here.</span></span><br><span class=\"line\"><span class=\"attr\">wrong_pass_message:</span> <span class=\"string\">Oh,</span> <span class=\"string\">this</span> <span class=\"string\">is</span> <span class=\"string\">an</span> <span class=\"string\">invalid</span> <span class=\"string\">password.</span> <span class=\"string\">Check</span> <span class=\"string\">and</span> <span class=\"string\">try</span> <span class=\"string\">again,</span> <span class=\"string\">please.</span></span><br><span class=\"line\"><span class=\"attr\">wrong_hash_message:</span> <span class=\"string\">Oh,</span> <span class=\"string\">these</span> <span class=\"string\">decrypted</span> <span class=\"string\">content</span> <span class=\"string\">cannot</span> <span class=\"string\">be</span> <span class=\"string\">verified,</span> <span class=\"string\">but</span> <span class=\"string\">you</span> <span class=\"string\">can</span> <span class=\"string\">still</span> <span class=\"string\">have</span> <span class=\"string\">a</span> <span class=\"string\">look.</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"添加看板娘\"><a href=\"#添加看板娘\" class=\"headerlink\" title=\"添加看板娘\"></a>添加看板娘</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/xiazeyu/live2d-widget-models\">https://github.com/xiazeyu/live2d-widget-models</a></p>\n<h3 id=\"禁用评论\"><a href=\"#禁用评论\" class=\"headerlink\" title=\"禁用评论\"></a>禁用评论</h3><p>md文件加<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"文章置顶\"><a href=\"#文章置顶\" class=\"headerlink\" title=\"文章置顶\"></a>文章置顶</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">uninstall</span> hexo-generator-<span class=\"keyword\">index</span> <span class=\"comment\">--save</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">index</span>-pin-top <span class=\"comment\">--save</span></span><br><span class=\"line\">文章内设置：</span><br><span class=\"line\">top: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>修改/themes/next/layout/_macro/post.swig,在</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">&quot;post-meta&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>标签下，插入如下代码：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> post.top %&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;green&quot;</span>&gt;</span>置顶<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"首页不显示全文\"><a href=\"#首页不显示全文\" class=\"headerlink\" title=\"首页不显示全文\"></a>首页不显示全文</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换标签前缀-字符\"><a href=\"#替换标签前缀-字符\" class=\"headerlink\" title=\"替换标签前缀 # 字符\"></a>替换标签前缀 # 字符</h3><p>主题_config.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tag_icon:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"markdown改变字体颜色\"><a href=\"#markdown改变字体颜色\" class=\"headerlink\" title=\"markdown改变字体颜色\"></a>markdown改变字体颜色</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">改变颜色 <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">red</span>&gt;</span>text<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">改变字体 <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">face</span>=<span class=\"string\">&quot;微软雅黑&quot;</span>&gt;</span>微软雅黑<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">改变大小 <span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">red</span> <span class=\"attr\">size</span>=<span class=\"string\">12</span>&gt;</span>字号12<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br><span class=\"line\">改变背景色 <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">orange</span>&gt;</span>背景色是：orange<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"markdown插入超链接\"><a href=\"#markdown插入超链接\" class=\"headerlink\" title=\"markdown插入超链接\"></a>markdown插入超链接</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[提示文字](<span class=\"name\">url</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">%</span> asset_img test.jpg <span class=\"meta\">%</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//test.jpg在对应资源文件夹</span></span><br></pre></td></tr></table></figure>\n<p>一些图片网站</p>\n<p><a href=\"https://pixabay.com/images/search/\">https://pixabay.com/images/search/</a></p>\n<p><a href=\"https://unsplash.com/\">https://unsplash.com/</a></p>\n<p><a href=\"https://www.pexels.com/zh-cn/\">https://www.pexels.com/zh-cn/</a></p>\n<h3 id=\"鼠标特效\"><a href=\"#鼠标特效\" class=\"headerlink\" title=\"鼠标特效\"></a>鼠标特效</h3><p>在themes\\next\\source\\js目录下新建fire.js,内容如下：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; origin, speed, color, angle, context &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.origin = origin</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.position = &#123; ...<span class=\"keyword\">this</span>.origin &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.speed = speed</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.angle = angle</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context = context</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderCount = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  draw() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.fillStyle = <span class=\"keyword\">this</span>.color</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.beginPath()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.arc(<span class=\"keyword\">this</span>.position.x, <span class=\"keyword\">this</span>.position.y, <span class=\"number\">2</span>, <span class=\"number\">0</span>, Math.PI * <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context.fill()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  move() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.position.x = (Math.sin(<span class=\"keyword\">this</span>.angle) * <span class=\"keyword\">this</span>.speed) + <span class=\"keyword\">this</span>.position.x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.position.y = (Math.cos(<span class=\"keyword\">this</span>.angle) * <span class=\"keyword\">this</span>.speed) + <span class=\"keyword\">this</span>.position.y + (<span class=\"keyword\">this</span>.renderCount * <span class=\"number\">0.3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderCount++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boom</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (&#123; origin, context, circleCount = <span class=\"number\">16</span>, area &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.origin = origin</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context = context</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.circleCount = circleCount</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.area = area</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stop = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.circles = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  randomArray(range) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = range.length</span><br><span class=\"line\">    <span class=\"keyword\">const</span> randomIndex = Math.floor(length * Math.random())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> range[randomIndex]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  randomColor() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> range = [<span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;#&#x27;</span> + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range) + <span class=\"keyword\">this</span>.randomArray(range)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  randomRange(start, end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (end - start) * Math.random() + start</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(let i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.circleCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> circle = new Circle(&#123;</span><br><span class=\"line\">        context: <span class=\"keyword\">this</span>.context,</span><br><span class=\"line\">        origin: <span class=\"keyword\">this</span>.origin,</span><br><span class=\"line\">        color: <span class=\"keyword\">this</span>.randomColor(),</span><br><span class=\"line\">        angle: <span class=\"keyword\">this</span>.randomRange(Math.PI - <span class=\"number\">1</span>, Math.PI + <span class=\"number\">1</span>),</span><br><span class=\"line\">        speed: <span class=\"keyword\">this</span>.randomRange(<span class=\"number\">1</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.circles.push(circle)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  move() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.circles.forEach((circle, index) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (circle.position.x &gt; <span class=\"keyword\">this</span>.area.width || circle.position.y &gt; <span class=\"keyword\">this</span>.area.height) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.circles.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      circle.move()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.circles.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.stop = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  draw() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.circles.forEach(circle =&gt; circle.draw())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CursorSpecialEffects</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.computerCanvas = document.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderCanvas = document.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.computerContext = <span class=\"keyword\">this</span>.computerCanvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderContext = <span class=\"keyword\">this</span>.renderCanvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.globalWidth = window.innerWidth</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.globalHeight = window.innerHeight</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.booms = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleMouseDown(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> boom = new Boom(&#123;</span><br><span class=\"line\">      origin: &#123; x: e.clientX, y: e.clientY &#125;,</span><br><span class=\"line\">      context: <span class=\"keyword\">this</span>.computerContext,</span><br><span class=\"line\">      area: &#123;</span><br><span class=\"line\">        width: <span class=\"keyword\">this</span>.globalWidth,</span><br><span class=\"line\">        height: <span class=\"keyword\">this</span>.globalHeight</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    boom.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.booms.push(boom)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running || <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handlePageHide() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.booms = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> style = <span class=\"keyword\">this</span>.renderCanvas.style</span><br><span class=\"line\">    style.position = <span class=\"string\">&#x27;fixed&#x27;</span></span><br><span class=\"line\">    style.top = style.left = <span class=\"number\">0</span></span><br><span class=\"line\">    style.zIndex = <span class=\"string\">&#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class=\"line\">    style.pointerEvents = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    style.width = <span class=\"keyword\">this</span>.renderCanvas.width = <span class=\"keyword\">this</span>.computerCanvas.width = <span class=\"keyword\">this</span>.globalWidth</span><br><span class=\"line\">    style.height = <span class=\"keyword\">this</span>.renderCanvas.height = <span class=\"keyword\">this</span>.computerCanvas.height = <span class=\"keyword\">this</span>.globalHeight</span><br><span class=\"line\"></span><br><span class=\"line\">    document.body.append(<span class=\"keyword\">this</span>.renderCanvas)</span><br><span class=\"line\"></span><br><span class=\"line\">    window.addEventListener(<span class=\"string\">&#x27;mousedown&#x27;</span>, <span class=\"keyword\">this</span>.handleMouseDown.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    window.addEventListener(<span class=\"string\">&#x27;pagehide&#x27;</span>, <span class=\"keyword\">this</span>.handlePageHide.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.booms.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    requestAnimationFrame(<span class=\"keyword\">this</span>.run.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.computerContext.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.globalWidth, <span class=\"keyword\">this</span>.globalHeight)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderContext.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.globalWidth, <span class=\"keyword\">this</span>.globalHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.booms.forEach((boom, index) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (boom.stop) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.booms.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      boom.move()</span><br><span class=\"line\">      boom.draw()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderContext.drawImage(<span class=\"keyword\">this</span>.computerCanvas, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.globalWidth, <span class=\"keyword\">this</span>.globalHeight)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cursorSpecialEffects = new CursorSpecialEffects()</span><br><span class=\"line\">cursorSpecialEffects.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>在themes\\next\\layout的layout.njk下添加<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/fire.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义回到顶部\"><a href=\"#自定义回到顶部\" class=\"headerlink\" title=\"自定义回到顶部\"></a>自定义回到顶部</h3><p>在source\\images目录下放入自定义scroll.png，然后在source_data\\styles.styl增加</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定义回到顶部样式</span></span><br><span class=\"line\"><span class=\"selector-class\">.back-to-top</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">70px</span>;  <span class=\"comment\">//图片素材宽度</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">900px</span>;  <span class=\"comment\">//图片素材高度</span></span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">900px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: unset;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all .<span class=\"number\">5s</span> ease-in-out;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: url(<span class=\"string\">&quot;/images/scroll.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//隐藏箭头图标</span></span><br><span class=\"line\">  &gt; <span class=\"selector-tag\">i</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.back-to-top-on</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: unset;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">100vh</span> &lt; (<span class=\"number\">900px</span> + <span class=\"number\">200px</span>) ? calc( <span class=\"number\">100vh</span> - <span class=\"number\">900px</span> - <span class=\"number\">200px</span> ) : <span class=\"number\">0px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"百度之星2020","date":"2020-08-09T14:26:44.000Z","mathjax":true,"_content":"\n[百度之星2020复赛](http://acm.hdu.edu.cn/search.php?field=problem&key=2020+%C4%EA%B0%D9%B6%C8%D6%AE%D0%C7%A1%A4%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&source=1&searchmode=source)\n<!--More-->\n## Binary Addition\n\n### 题面\n\n你有两个无限长0101串$S$, $T$，分别记作$S_{0}S_{1}\\cdots$…和$T_{0}T_{1}\\cdots$\n.其中$S$和$T$从$n$位之后都是0，也就是当$i \\geq n$，有$S_{i}=T_{i}=0$\n你可以对$S$串进行操作：\n修改$S$串的某一位，从0变成1或者从1变成0。\n将$S$当成二进制数加1，也就是记$s=\\sum_{i\\geq 0} S_{i}2^{i}$，将$S$变成$s+1$二进制表示的形式，其中低位在最前面。\n问最少的步数将$S$变成$T$。\n\n### 思路\n\n答案必定是先将某一前缀修改为全1，然后再加上1，变成$0\\cdots01$的形式，然后按位修改。\n***注意最高位1的位置如果在原来$S$串中也是1，可以先将1变为0再变回1***，找了一晚上bug==\n\n### 代码\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n\nchar s[100010],t[100010];\nint b[100010];\nvoid work()\n{\n    int n;\n    scanf(\"%d\",&n);\n    scanf(\"%s\",s);\n    scanf(\"%s\",t);\n    int a = 0;\n    n = strlen(s);\n    b[n]=0;\n    b[n+1] =0;\n    s[n] = t[n] = '0';\n    for(int i=n-1;i>=0;i--){\n        b[i] = b[i+1]+(s[i]!=t[i]);\n    }\n    int ans = b[0];\n    int  d = 0, c = 0;\n    for(int i = 0;i < n;i++){\n        if(s[i] == '0'){ d++;}\n        if(t[i] == '1'){ c++;}\n        if(s[i+1]=='0') {\n            ans = min(ans, d + c + b[i + 2] + (t[i + 1] != '1') + 1);\n        }else{\n            ans = min(ans,d+c+1+b[i+2]+(t[i+1]!='1')+1);\n        }\n        if(d+c>ans){break;}\n    }\n    cout<<ans<<'\\n';\n\n}\nsigned main() {\n    signed _;\n    scanf(\"%d\",&_);\n    while(_--){\n        work();\n    }\n    return 0;\n}\n/**\n7\n1110111\n0000001\n3?\n*/\n```\n\n## Battle for Wosneth\n\n### 题面\n\n你在打游戏的时候碰到了如下问题：\n​有两个人记作Alice和Bob，Bob的生命值为$m$，Alice的生命值很高，所以可以认为是无限的。两个人的攻击命中率分别为$p\\%,q\\%$。两个人轮流攻击对方。从Alice开始攻击，每次攻击的时候，如果Alice命中，那么能让对方的生命值减低1，同时自己的生命值能恢复1，如果Bob命中，那么能让对方的生命值减低1，注意Bob不会自己回血。\n直到Bob的血量变为0，游戏结束。Alice想知道，游戏结束的时候，自己期望生命值变化是多少，对998244353取模。\n注意这里的变化量不是绝对值，也就是如果50%的概率加一，50%的概率减一，那么期望的变化量就是0。\n\n### 思路\n\nAlice在杀掉Bob之前，即成功击中Bob$m$次之前，失败次数服从帕斯卡分布，期望值$m \\times (1-p)/p$。所以留给Bob进攻的次数期望值为$m\\times (1-p)/p+m-1$，击中次数期望\n$(m\\times (1-p)/p+m-1)\\times q$，因而Alice生命值期望变化量\n$m - (m\\times (1-p)/p+m-1)\\times q$。\n\n### 关于帕斯卡分布\n$X \\sim NB(k;p)$，则$P(X=r) = C_{k+r-1}^{k-1}p^{k}(1-p)^{r}$,$r$为失败次数。\n期望：\n$EX = \\sum_{r}rP(X=r) $ \n$= \\sum_{r}r\\frac{(r+k-1)!}{(k-1)!r!}p^{k}(1-p)^{r} $ \n$= k\\frac{1-p}{p} \\sum_{r-1} \\frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$\n$= k\\frac{1-p}{p}$. \n***最后一步是由$\\sum_{r-1} \\frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$是帕斯卡分布概率求和，故为1得到***\n\n{% asset_img 公式1.png %}\n\n{% asset_img 公式2.png %}\n\n### 代码\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define pb push_back\n#define fi first\n#define se second\n#define endl '\\n'\n#define si signed\n#define P pair<int,int>\n#define sc(x) scanf(\"%lld\",&x);\nint mod = 998244353;\nint qp(int x,int n)\n{\n    int ans = 1;\n    while(n){\n        if(n&1){\n            ans = (ans*x)%mod;\n        }\n        n>>=1;\n        x = (x*x)%mod;\n    }\n    return ans;\n}\nvoid work()\n{\n    int m,p,q;\n    sc(m)sc(p)sc(q)\n    int ans;\n    int in = qp(100,mod-2);\n    p = (p*in)%mod;\n    q = (q*in)%mod;\n\n    ans = (m-((m*(1-p+mod)%mod*(qp(p,mod-2))%mod)+m-1)%mod*q%mod+mod)%mod;\n    cout<<ans<<'\\n';\n}\nsigned main() {\n    si _;\n    scanf(\"%d\",&_);\n    while(_--){\n        work();\n    }\n    return 0;\n}\n```\n","source":"_posts/百度之星2020.md","raw":"---\ntitle: 百度之星2020\ndate: 2020-08-09 22:26:44\ntags: 题解\nmathjax: true\n---\n\n[百度之星2020复赛](http://acm.hdu.edu.cn/search.php?field=problem&key=2020+%C4%EA%B0%D9%B6%C8%D6%AE%D0%C7%A1%A4%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&source=1&searchmode=source)\n<!--More-->\n## Binary Addition\n\n### 题面\n\n你有两个无限长0101串$S$, $T$，分别记作$S_{0}S_{1}\\cdots$…和$T_{0}T_{1}\\cdots$\n.其中$S$和$T$从$n$位之后都是0，也就是当$i \\geq n$，有$S_{i}=T_{i}=0$\n你可以对$S$串进行操作：\n修改$S$串的某一位，从0变成1或者从1变成0。\n将$S$当成二进制数加1，也就是记$s=\\sum_{i\\geq 0} S_{i}2^{i}$，将$S$变成$s+1$二进制表示的形式，其中低位在最前面。\n问最少的步数将$S$变成$T$。\n\n### 思路\n\n答案必定是先将某一前缀修改为全1，然后再加上1，变成$0\\cdots01$的形式，然后按位修改。\n***注意最高位1的位置如果在原来$S$串中也是1，可以先将1变为0再变回1***，找了一晚上bug==\n\n### 代码\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n\nchar s[100010],t[100010];\nint b[100010];\nvoid work()\n{\n    int n;\n    scanf(\"%d\",&n);\n    scanf(\"%s\",s);\n    scanf(\"%s\",t);\n    int a = 0;\n    n = strlen(s);\n    b[n]=0;\n    b[n+1] =0;\n    s[n] = t[n] = '0';\n    for(int i=n-1;i>=0;i--){\n        b[i] = b[i+1]+(s[i]!=t[i]);\n    }\n    int ans = b[0];\n    int  d = 0, c = 0;\n    for(int i = 0;i < n;i++){\n        if(s[i] == '0'){ d++;}\n        if(t[i] == '1'){ c++;}\n        if(s[i+1]=='0') {\n            ans = min(ans, d + c + b[i + 2] + (t[i + 1] != '1') + 1);\n        }else{\n            ans = min(ans,d+c+1+b[i+2]+(t[i+1]!='1')+1);\n        }\n        if(d+c>ans){break;}\n    }\n    cout<<ans<<'\\n';\n\n}\nsigned main() {\n    signed _;\n    scanf(\"%d\",&_);\n    while(_--){\n        work();\n    }\n    return 0;\n}\n/**\n7\n1110111\n0000001\n3?\n*/\n```\n\n## Battle for Wosneth\n\n### 题面\n\n你在打游戏的时候碰到了如下问题：\n​有两个人记作Alice和Bob，Bob的生命值为$m$，Alice的生命值很高，所以可以认为是无限的。两个人的攻击命中率分别为$p\\%,q\\%$。两个人轮流攻击对方。从Alice开始攻击，每次攻击的时候，如果Alice命中，那么能让对方的生命值减低1，同时自己的生命值能恢复1，如果Bob命中，那么能让对方的生命值减低1，注意Bob不会自己回血。\n直到Bob的血量变为0，游戏结束。Alice想知道，游戏结束的时候，自己期望生命值变化是多少，对998244353取模。\n注意这里的变化量不是绝对值，也就是如果50%的概率加一，50%的概率减一，那么期望的变化量就是0。\n\n### 思路\n\nAlice在杀掉Bob之前，即成功击中Bob$m$次之前，失败次数服从帕斯卡分布，期望值$m \\times (1-p)/p$。所以留给Bob进攻的次数期望值为$m\\times (1-p)/p+m-1$，击中次数期望\n$(m\\times (1-p)/p+m-1)\\times q$，因而Alice生命值期望变化量\n$m - (m\\times (1-p)/p+m-1)\\times q$。\n\n### 关于帕斯卡分布\n$X \\sim NB(k;p)$，则$P(X=r) = C_{k+r-1}^{k-1}p^{k}(1-p)^{r}$,$r$为失败次数。\n期望：\n$EX = \\sum_{r}rP(X=r) $ \n$= \\sum_{r}r\\frac{(r+k-1)!}{(k-1)!r!}p^{k}(1-p)^{r} $ \n$= k\\frac{1-p}{p} \\sum_{r-1} \\frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$\n$= k\\frac{1-p}{p}$. \n***最后一步是由$\\sum_{r-1} \\frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$是帕斯卡分布概率求和，故为1得到***\n\n{% asset_img 公式1.png %}\n\n{% asset_img 公式2.png %}\n\n### 代码\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define pb push_back\n#define fi first\n#define se second\n#define endl '\\n'\n#define si signed\n#define P pair<int,int>\n#define sc(x) scanf(\"%lld\",&x);\nint mod = 998244353;\nint qp(int x,int n)\n{\n    int ans = 1;\n    while(n){\n        if(n&1){\n            ans = (ans*x)%mod;\n        }\n        n>>=1;\n        x = (x*x)%mod;\n    }\n    return ans;\n}\nvoid work()\n{\n    int m,p,q;\n    sc(m)sc(p)sc(q)\n    int ans;\n    int in = qp(100,mod-2);\n    p = (p*in)%mod;\n    q = (q*in)%mod;\n\n    ans = (m-((m*(1-p+mod)%mod*(qp(p,mod-2))%mod)+m-1)%mod*q%mod+mod)%mod;\n    cout<<ans<<'\\n';\n}\nsigned main() {\n    si _;\n    scanf(\"%d\",&_);\n    while(_--){\n        work();\n    }\n    return 0;\n}\n```\n","slug":"百度之星2020","published":1,"updated":"2020-12-19T05:35:27.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdv000zroujf2ei3chw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2020+%C4%EA%B0%D9%B6%C8%D6%AE%D0%C7%A1%A4%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&amp;source=1&amp;searchmode=source\">百度之星2020复赛</a><br><a id=\"more\"></a></p>\n<h2 id=\"Binary-Addition\"><a href=\"#Binary-Addition\" class=\"headerlink\" title=\"Binary Addition\"></a>Binary Addition</h2><h3 id=\"题面\"><a href=\"#题面\" class=\"headerlink\" title=\"题面\"></a>题面</h3><p>你有两个无限长0101串$S$, $T$，分别记作$S<em>{0}S</em>{1}\\cdots$…和$T<em>{0}T</em>{1}\\cdots$<br>.其中$S$和$T$从$n$位之后都是0，也就是当$i \\geq n$，有$S<em>{i}=T</em>{i}=0$<br>你可以对$S$串进行操作：<br>修改$S$串的某一位，从0变成1或者从1变成0。<br>将$S$当成二进制数加1，也就是记$s=\\sum<em>{i\\geq 0} S</em>{i}2^{i}$，将$S$变成$s+1$二进制表示的形式，其中低位在最前面。<br>问最少的步数将$S$变成$T$。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>答案必定是先将某一前缀修改为全1，然后再加上1，变成$0\\cdots01$的形式，然后按位修改。<br><strong><em>注意最高位1的位置如果在原来$S$串中也是1，可以先将1变为0再变回1</em></strong>，找了一晚上bug==</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">100010</span>],t[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> b[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,t);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    b[n]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    b[n+<span class=\"number\">1</span>] =<span class=\"number\">0</span>;</span><br><span class=\"line\">    s[n] = t[n] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        b[i] = b[i+<span class=\"number\">1</span>]+(s[i]!=t[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = b[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>  d = <span class=\"number\">0</span>, c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;0&#x27;</span>)&#123; d++;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t[i] == <span class=\"string\">&#x27;1&#x27;</span>)&#123; c++;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i+<span class=\"number\">1</span>]==<span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans, d + c + b[i + <span class=\"number\">2</span>] + (t[i + <span class=\"number\">1</span>] != <span class=\"string\">&#x27;1&#x27;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans,d+c+<span class=\"number\">1</span>+b[i+<span class=\"number\">2</span>]+(t[i+<span class=\"number\">1</span>]!=<span class=\"string\">&#x27;1&#x27;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d+c&gt;ans)&#123;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">signed</span> _;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;_);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(_--)&#123;</span><br><span class=\"line\">        work();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">7</span></span><br><span class=\"line\"><span class=\"comment\">1110111</span></span><br><span class=\"line\"><span class=\"comment\">0000001</span></span><br><span class=\"line\"><span class=\"comment\">3?</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Battle-for-Wosneth\"><a href=\"#Battle-for-Wosneth\" class=\"headerlink\" title=\"Battle for Wosneth\"></a>Battle for Wosneth</h2><h3 id=\"题面-1\"><a href=\"#题面-1\" class=\"headerlink\" title=\"题面\"></a>题面</h3><p>你在打游戏的时候碰到了如下问题：<br>​有两个人记作Alice和Bob，Bob的生命值为$m$，Alice的生命值很高，所以可以认为是无限的。两个人的攻击命中率分别为$p\\%,q\\%$。两个人轮流攻击对方。从Alice开始攻击，每次攻击的时候，如果Alice命中，那么能让对方的生命值减低1，同时自己的生命值能恢复1，如果Bob命中，那么能让对方的生命值减低1，注意Bob不会自己回血。<br>直到Bob的血量变为0，游戏结束。Alice想知道，游戏结束的时候，自己期望生命值变化是多少，对998244353取模。<br>注意这里的变化量不是绝对值，也就是如果50%的概率加一，50%的概率减一，那么期望的变化量就是0。</p>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>Alice在杀掉Bob之前，即成功击中Bob$m$次之前，失败次数服从帕斯卡分布，期望值$m \\times (1-p)/p$。所以留给Bob进攻的次数期望值为$m\\times (1-p)/p+m-1$，击中次数期望<br>$(m\\times (1-p)/p+m-1)\\times q$，因而Alice生命值期望变化量<br>$m - (m\\times (1-p)/p+m-1)\\times q$。</p>\n<h3 id=\"关于帕斯卡分布\"><a href=\"#关于帕斯卡分布\" class=\"headerlink\" title=\"关于帕斯卡分布\"></a>关于帕斯卡分布</h3><p>$X \\sim NB(k;p)$，则$P(X=r) = C<em>{k+r-1}^{k-1}p^{k}(1-p)^{r}$,$r$为失败次数。<br>期望：<br>$EX = \\sum</em>{r}rP(X=r) $<br>$= \\sum<em>{r}r\\frac{(r+k-1)!}{(k-1)!r!}p^{k}(1-p)^{r} $<br>$= k\\frac{1-p}{p} \\sum</em>{r-1} \\frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$<br>$= k\\frac{1-p}{p}$.<br><strong><em>最后一步是由$\\sum_{r-1} \\frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$是帕斯卡分布概率求和，故为1得到</em></strong></p>\n<img src=\"/2020/08/09/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020/%E5%85%AC%E5%BC%8F1.png\" class=\"\">\n<img src=\"/2020/08/09/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020/%E5%85%AC%E5%BC%8F2.png\" class=\"\">\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> endl <span class=\"meta-string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> si signed</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> P pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sc(x) scanf(<span class=\"meta-string\">&quot;%lld&quot;</span>,&amp;x);</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qp</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            ans = (ans*x)%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">        x = (x*x)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,p,q;</span><br><span class=\"line\">    sc(m)sc(p)sc(q)</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> in = qp(<span class=\"number\">100</span>,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">    p = (p*in)%mod;</span><br><span class=\"line\">    q = (q*in)%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">    ans = (m-((m*(<span class=\"number\">1</span>-p+mod)%mod*(qp(p,mod<span class=\"number\">-2</span>))%mod)+m<span class=\"number\">-1</span>)%mod*q%mod+mod)%mod;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    si _;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;_);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(_--)&#123;</span><br><span class=\"line\">        work();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<p><a href=\"http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2020+%C4%EA%B0%D9%B6%C8%D6%AE%D0%C7%A1%A4%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&amp;source=1&amp;searchmode=source\">百度之星2020复赛</a><br>","more":"</p>\n<h2 id=\"Binary-Addition\"><a href=\"#Binary-Addition\" class=\"headerlink\" title=\"Binary Addition\"></a>Binary Addition</h2><h3 id=\"题面\"><a href=\"#题面\" class=\"headerlink\" title=\"题面\"></a>题面</h3><p>你有两个无限长0101串$S$, $T$，分别记作$S<em>{0}S</em>{1}\\cdots$…和$T<em>{0}T</em>{1}\\cdots$<br>.其中$S$和$T$从$n$位之后都是0，也就是当$i \\geq n$，有$S<em>{i}=T</em>{i}=0$<br>你可以对$S$串进行操作：<br>修改$S$串的某一位，从0变成1或者从1变成0。<br>将$S$当成二进制数加1，也就是记$s=\\sum<em>{i\\geq 0} S</em>{i}2^{i}$，将$S$变成$s+1$二进制表示的形式，其中低位在最前面。<br>问最少的步数将$S$变成$T$。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>答案必定是先将某一前缀修改为全1，然后再加上1，变成$0\\cdots01$的形式，然后按位修改。<br><strong><em>注意最高位1的位置如果在原来$S$串中也是1，可以先将1变为0再变回1</em></strong>，找了一晚上bug==</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">100010</span>],t[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> b[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,t);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    b[n]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    b[n+<span class=\"number\">1</span>] =<span class=\"number\">0</span>;</span><br><span class=\"line\">    s[n] = t[n] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        b[i] = b[i+<span class=\"number\">1</span>]+(s[i]!=t[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = b[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>  d = <span class=\"number\">0</span>, c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;0&#x27;</span>)&#123; d++;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t[i] == <span class=\"string\">&#x27;1&#x27;</span>)&#123; c++;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i+<span class=\"number\">1</span>]==<span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans, d + c + b[i + <span class=\"number\">2</span>] + (t[i + <span class=\"number\">1</span>] != <span class=\"string\">&#x27;1&#x27;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans,d+c+<span class=\"number\">1</span>+b[i+<span class=\"number\">2</span>]+(t[i+<span class=\"number\">1</span>]!=<span class=\"string\">&#x27;1&#x27;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d+c&gt;ans)&#123;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">signed</span> _;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;_);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(_--)&#123;</span><br><span class=\"line\">        work();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">7</span></span><br><span class=\"line\"><span class=\"comment\">1110111</span></span><br><span class=\"line\"><span class=\"comment\">0000001</span></span><br><span class=\"line\"><span class=\"comment\">3?</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Battle-for-Wosneth\"><a href=\"#Battle-for-Wosneth\" class=\"headerlink\" title=\"Battle for Wosneth\"></a>Battle for Wosneth</h2><h3 id=\"题面-1\"><a href=\"#题面-1\" class=\"headerlink\" title=\"题面\"></a>题面</h3><p>你在打游戏的时候碰到了如下问题：<br>​有两个人记作Alice和Bob，Bob的生命值为$m$，Alice的生命值很高，所以可以认为是无限的。两个人的攻击命中率分别为$p\\%,q\\%$。两个人轮流攻击对方。从Alice开始攻击，每次攻击的时候，如果Alice命中，那么能让对方的生命值减低1，同时自己的生命值能恢复1，如果Bob命中，那么能让对方的生命值减低1，注意Bob不会自己回血。<br>直到Bob的血量变为0，游戏结束。Alice想知道，游戏结束的时候，自己期望生命值变化是多少，对998244353取模。<br>注意这里的变化量不是绝对值，也就是如果50%的概率加一，50%的概率减一，那么期望的变化量就是0。</p>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>Alice在杀掉Bob之前，即成功击中Bob$m$次之前，失败次数服从帕斯卡分布，期望值$m \\times (1-p)/p$。所以留给Bob进攻的次数期望值为$m\\times (1-p)/p+m-1$，击中次数期望<br>$(m\\times (1-p)/p+m-1)\\times q$，因而Alice生命值期望变化量<br>$m - (m\\times (1-p)/p+m-1)\\times q$。</p>\n<h3 id=\"关于帕斯卡分布\"><a href=\"#关于帕斯卡分布\" class=\"headerlink\" title=\"关于帕斯卡分布\"></a>关于帕斯卡分布</h3><p>$X \\sim NB(k;p)$，则$P(X=r) = C<em>{k+r-1}^{k-1}p^{k}(1-p)^{r}$,$r$为失败次数。<br>期望：<br>$EX = \\sum</em>{r}rP(X=r) $<br>$= \\sum<em>{r}r\\frac{(r+k-1)!}{(k-1)!r!}p^{k}(1-p)^{r} $<br>$= k\\frac{1-p}{p} \\sum</em>{r-1} \\frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$<br>$= k\\frac{1-p}{p}$.<br><strong><em>最后一步是由$\\sum_{r-1} \\frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$是帕斯卡分布概率求和，故为1得到</em></strong></p>\n<img src=\"/2020/08/09/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020/%E5%85%AC%E5%BC%8F1.png\" class=\"\">\n<img src=\"/2020/08/09/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020/%E5%85%AC%E5%BC%8F2.png\" class=\"\">\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> endl <span class=\"meta-string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> si signed</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> P pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sc(x) scanf(<span class=\"meta-string\">&quot;%lld&quot;</span>,&amp;x);</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qp</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            ans = (ans*x)%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">        x = (x*x)%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,p,q;</span><br><span class=\"line\">    sc(m)sc(p)sc(q)</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> in = qp(<span class=\"number\">100</span>,mod<span class=\"number\">-2</span>);</span><br><span class=\"line\">    p = (p*in)%mod;</span><br><span class=\"line\">    q = (q*in)%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">    ans = (m-((m*(<span class=\"number\">1</span>-p+mod)%mod*(qp(p,mod<span class=\"number\">-2</span>))%mod)+m<span class=\"number\">-1</span>)%mod*q%mod+mod)%mod;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    si _;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;_);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(_--)&#123;</span><br><span class=\"line\">        work();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"胡言乱语","date":"2020-08-01T09:55:30.000Z","_content":"{% meting \"442016694\" \"netease\" \"song\" %}\n\nしつこくあの人に話しかけて、馬鹿みたいにあの人のすべてを気にして、でも知ってる。\n\n<!-- more -->\n\nあの人は君のメールをもらった時に、「この人うざい」ってしか思わないょ。\n\nもう君が私のことをすきになるのを期待していない、そろそろ君の世界から行かなきゃ。\n\n君を失うよりは、君が他の人のものになるほうが怖い。\n\n空いてる席にはいずれ誰かが座ることは分かるけど、それでも涙が我慢できない、結局私は出られないんだ。\n\nあなたにメッセージを送るたびに冒険をして、一日の気分の良い悪いを賭けた。\n\n君が好きというのは、多分心の中ではもう千回諦めたけど。\n\n君が一度だけ振り向いてくれるなら、君の愛する希望が改めてもえること。\n\n人はいつも夜で、忘れられないのを思い出す。\n\n\n","source":"_posts/胡言乱语.md","raw":"---\ntitle: 胡言乱语\ndate: 2020-08-01 17:55:30\ntags: \"随笔\"\n---\n{% meting \"442016694\" \"netease\" \"song\" %}\n\nしつこくあの人に話しかけて、馬鹿みたいにあの人のすべてを気にして、でも知ってる。\n\n<!-- more -->\n\nあの人は君のメールをもらった時に、「この人うざい」ってしか思わないょ。\n\nもう君が私のことをすきになるのを期待していない、そろそろ君の世界から行かなきゃ。\n\n君を失うよりは、君が他の人のものになるほうが怖い。\n\n空いてる席にはいずれ誰かが座ることは分かるけど、それでも涙が我慢できない、結局私は出られないんだ。\n\nあなたにメッセージを送るたびに冒険をして、一日の気分の良い悪いを賭けた。\n\n君が好きというのは、多分心の中ではもう千回諦めたけど。\n\n君が一度だけ振り向いてくれるなら、君の愛する希望が改めてもえること。\n\n人はいつも夜で、忘れられないのを思い出す。\n\n\n","slug":"胡言乱语","published":1,"updated":"2020-10-27T05:46:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiv9pxdw0011roujaae3cjxf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>\n    <div id=\"aplayer-ocNaMvaR\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"442016694\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n<p>しつこくあの人に話しかけて、馬鹿みたいにあの人のすべてを気にして、でも知ってる。</p>\n<a id=\"more\"></a>\n<p>あの人は君のメールをもらった時に、「この人うざい」ってしか思わないょ。</p>\n<p>もう君が私のことをすきになるのを期待していない、そろそろ君の世界から行かなきゃ。</p>\n<p>君を失うよりは、君が他の人のものになるほうが怖い。</p>\n<p>空いてる席にはいずれ誰かが座ることは分かるけど、それでも涙が我慢できない、結局私は出られないんだ。</p>\n<p>あなたにメッセージを送るたびに冒険をして、一日の気分の良い悪いを賭けた。</p>\n<p>君が好きというのは、多分心の中ではもう千回諦めたけど。</p>\n<p>君が一度だけ振り向いてくれるなら、君の愛する希望が改めてもえること。</p>\n<p>人はいつも夜で、忘れられないのを思い出す。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<div id=\"aplayer-ocNaMvaR\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"442016694\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n<p>しつこくあの人に話しかけて、馬鹿みたいにあの人のすべてを気にして、でも知ってる。</p>","more":"<p>あの人は君のメールをもらった時に、「この人うざい」ってしか思わないょ。</p>\n<p>もう君が私のことをすきになるのを期待していない、そろそろ君の世界から行かなきゃ。</p>\n<p>君を失うよりは、君が他の人のものになるほうが怖い。</p>\n<p>空いてる席にはいずれ誰かが座ることは分かるけど、それでも涙が我慢できない、結局私は出られないんだ。</p>\n<p>あなたにメッセージを送るたびに冒険をして、一日の気分の良い悪いを賭けた。</p>\n<p>君が好きというのは、多分心の中ではもう千回諦めたけど。</p>\n<p>君が一度だけ振り向いてくれるなら、君の愛する希望が改めてもえること。</p>\n<p>人はいつも夜で、忘れられないのを思い出す。</p>"},{"title":"多终端操作","date":"2020-12-19T06:49:02.000Z","_content":"## 将博客内容上传github\n```bash\ngit init\ngit add .\ngit commit -m \"blog source\"\n// 新建hexo分支\ngit branch hexo\n// 切换分支\ngit checkout hexo\n// 将本地与Github项目对接\ngit remote add origin git@github.com:liulx20/liulx20.github.io.git\ngit push origin hexo\n```\n<!-- More -->\n* tips: theme/next似乎传不上去,直接拷到新终端==\n\n## 新终端完成clone,更新\n```bash\ngit clone -b hexo git@github.com:liulx20/liulx20.github.io.git  \n// 新建一个.md文件,并编辑完成自己的博客内容\nhexo new post \"new blog name\"\n// 经测试每次只要更新source中的文件到Github中即可,因为只是新建了一篇新博客\ngit add source\ngit commit -m \"XX\"\n// 推送到远程仓库,更新hexo分支\ngit push origin hexo\nhexo g -d\n```\n\n\n* 若出现fatal: in unpopulated submodule 'deploy_git'\n```bash\nrm -rf .deploy_git\nhexo g && hexo d\n```\n\n## 不同终端更新\n```bash\n// 先pull完成本地与远端的融合\ngit pull origin hexo\nhexo new post \" new blog name\"\ngit add source\ngit commit -m \"XX\"\ngit push origin hexo\nhexo g -d\n```","source":"_posts/多终端操作.md","raw":"---\ntitle: 多终端操作\ndate: 2020-12-19 14:49:02\ntags: 关于本站\n---\n## 将博客内容上传github\n```bash\ngit init\ngit add .\ngit commit -m \"blog source\"\n// 新建hexo分支\ngit branch hexo\n// 切换分支\ngit checkout hexo\n// 将本地与Github项目对接\ngit remote add origin git@github.com:liulx20/liulx20.github.io.git\ngit push origin hexo\n```\n<!-- More -->\n* tips: theme/next似乎传不上去,直接拷到新终端==\n\n## 新终端完成clone,更新\n```bash\ngit clone -b hexo git@github.com:liulx20/liulx20.github.io.git  \n// 新建一个.md文件,并编辑完成自己的博客内容\nhexo new post \"new blog name\"\n// 经测试每次只要更新source中的文件到Github中即可,因为只是新建了一篇新博客\ngit add source\ngit commit -m \"XX\"\n// 推送到远程仓库,更新hexo分支\ngit push origin hexo\nhexo g -d\n```\n\n\n* 若出现fatal: in unpopulated submodule 'deploy_git'\n```bash\nrm -rf .deploy_git\nhexo g && hexo d\n```\n\n## 不同终端更新\n```bash\n// 先pull完成本地与远端的融合\ngit pull origin hexo\nhexo new post \" new blog name\"\ngit add source\ngit commit -m \"XX\"\ngit push origin hexo\nhexo g -d\n```","slug":"多终端操作","published":1,"updated":"2021-05-22T11:21:16.765Z","_id":"ckivcubto0000l4uj0kqv2rma","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"将博客内容上传github\"><a href=\"#将博客内容上传github\" class=\"headerlink\" title=\"将博客内容上传github\"></a>将博客内容上传github</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;blog source&quot;</span></span><br><span class=\"line\">// 新建hexo分支</span><br><span class=\"line\">git branch hexo</span><br><span class=\"line\">// 切换分支</span><br><span class=\"line\">git checkout hexo</span><br><span class=\"line\">// 将本地与Github项目对接</span><br><span class=\"line\">git remote add origin git@github.com:liulx20/liulx20.github.io.git</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>tips: theme/next似乎传不上去,直接拷到新终端==</li>\n</ul>\n<h2 id=\"新终端完成clone-更新\"><a href=\"#新终端完成clone-更新\" class=\"headerlink\" title=\"新终端完成clone,更新\"></a>新终端完成clone,更新</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b hexo git@github.com:liulx20/liulx20.github.io.git  </span><br><span class=\"line\">// 新建一个.md文件,并编辑完成自己的博客内容</span><br><span class=\"line\">hexo new post <span class=\"string\">&quot;new blog name&quot;</span></span><br><span class=\"line\">// 经测试每次只要更新<span class=\"built_in\">source</span>中的文件到Github中即可,因为只是新建了一篇新博客</span><br><span class=\"line\">git add <span class=\"built_in\">source</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;XX&quot;</span></span><br><span class=\"line\">// 推送到远程仓库,更新hexo分支</span><br><span class=\"line\">git push origin hexo</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<ul>\n<li>若出现fatal: in unpopulated submodule ‘deploy_git’<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"不同终端更新\"><a href=\"#不同终端更新\" class=\"headerlink\" title=\"不同终端更新\"></a>不同终端更新</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 先pull完成本地与远端的融合</span><br><span class=\"line\">git pull origin hexo</span><br><span class=\"line\">hexo new post <span class=\"string\">&quot; new blog name&quot;</span></span><br><span class=\"line\">git add <span class=\"built_in\">source</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;XX&quot;</span></span><br><span class=\"line\">git push origin hexo</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<h2 id=\"将博客内容上传github\"><a href=\"#将博客内容上传github\" class=\"headerlink\" title=\"将博客内容上传github\"></a>将博客内容上传github</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;blog source&quot;</span></span><br><span class=\"line\">// 新建hexo分支</span><br><span class=\"line\">git branch hexo</span><br><span class=\"line\">// 切换分支</span><br><span class=\"line\">git checkout hexo</span><br><span class=\"line\">// 将本地与Github项目对接</span><br><span class=\"line\">git remote add origin git@github.com:liulx20/liulx20.github.io.git</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>tips: theme/next似乎传不上去,直接拷到新终端==</li>\n</ul>\n<h2 id=\"新终端完成clone-更新\"><a href=\"#新终端完成clone-更新\" class=\"headerlink\" title=\"新终端完成clone,更新\"></a>新终端完成clone,更新</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b hexo git@github.com:liulx20/liulx20.github.io.git  </span><br><span class=\"line\">// 新建一个.md文件,并编辑完成自己的博客内容</span><br><span class=\"line\">hexo new post <span class=\"string\">&quot;new blog name&quot;</span></span><br><span class=\"line\">// 经测试每次只要更新<span class=\"built_in\">source</span>中的文件到Github中即可,因为只是新建了一篇新博客</span><br><span class=\"line\">git add <span class=\"built_in\">source</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;XX&quot;</span></span><br><span class=\"line\">// 推送到远程仓库,更新hexo分支</span><br><span class=\"line\">git push origin hexo</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<ul>\n<li>若出现fatal: in unpopulated submodule ‘deploy_git’<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"不同终端更新\"><a href=\"#不同终端更新\" class=\"headerlink\" title=\"不同终端更新\"></a>不同终端更新</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 先pull完成本地与远端的融合</span><br><span class=\"line\">git pull origin hexo</span><br><span class=\"line\">hexo new post <span class=\"string\">&quot; new blog name&quot;</span></span><br><span class=\"line\">git add <span class=\"built_in\">source</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;XX&quot;</span></span><br><span class=\"line\">git push origin hexo</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"AtCoder Regular Contest 111","date":"2021-01-09T14:20:47.000Z","_content":"[AtCoder Regular Contest 111](https://atcoder.jp/contests/arc111/tasks)\n\n{% asset_img new-year-5798330__340.png %}\n\n感觉BC写得有点复杂\n<!--More-->\n\n## A - Simple Math 2\n\n\n```C++\n#include <bits/stdc++.h>\n \nusing namespace std;\n#define int long long\n#define sc(x) scanf(\"%lld\",&x);\n#define pb push_back\n#define fi first\n#define se second\n#define P pair<int,int>\nint qp(int x, int y)\n{\n    int a = 10;\n    int ans = 1;\n    while(x){\n        if(x&1){\n            ans = (ans*a)%y;\n        }\n        a = (a*a)%y;\n        x>>=1;\n    }\n    return ans;\n}\nsigned main()\n{\n    int N;\n    int M;\n    sc(N) sc(M)\n    cout <<qp(N,M*M)/M << '\\n';\n \n}\n```\n\n## B - Reversible Cards\n```C++\n#include <bits/stdc++.h>\n \nusing namespace std;\n#define int long long\n#define sc(x) scanf(\"%lld\",&x);\n#define pb push_back\n#define fi first\n#define se second\n#define P pair<int,int>\nset<int> sx,sy;\nP A[200005];\nqueue<int> G[400005];\nmap<int,int>mp;\nbool vis[400006];\nbool f[200005];\nsigned main()\n{\n    int N;\n    int x,y;\n    sc(N)\n    for(int i = 0; i < N; i++){\n        sc(x)sc(y)\n        A[i].fi = x;\n        A[i].se = y;\n        mp[x]+=1;\n        mp[y] += 1;\n        G[x].push(i);\n        G[y].push(i);\n    }\n    priority_queue<P,vector<P>,greater<P> > pq;\n    for(auto x: mp){\n        pq.push({x.second,x.first});\n    }\n    int ans = 0;\n    while(!pq.empty()){\n        P a = pq.top();pq.pop();\n        if(vis[a.second])continue;\n        else {\n            bool g = false;\n            while(!G[a.second].empty()){\n                int id = G[a.second].front();\n                G[a.second].pop();\n                if(!f[id]){\n                    f[id] = true;\n                    if(A[id].se != a.second){\n                        mp[A[id].se] -= 1;\n                        if(!vis[A[id].se])\n                        pq.push({mp[A[id].se],A[id].se});\n                    }else{\n                        mp[A[id].fi] -= 1;\n                        if(!vis[A[id].fi])\n                        pq.push({mp[A[id].fi],A[id].fi});\n                    }\n                    g = true;\n                    break;\n                }\n \n            }\n            if(g)\n            ans += 1;\n            vis[a.second] = true;\n \n        }\n    }\n    cout << ans << '\\n';\n \n}\n```\n## C - Too Heavy\n```C++\n#include <bits/stdc++.h>\n \nusing namespace std;\n#define int long long\n#define sc(x) scanf(\"%lld\",&x);\n#define pb push_back\n#define fi first\n#define se second\n#define P pair<int,int>\nint N;\nint A[200005];\nint B[200005];\nint C[200005];\nint fa[200005];\nint dfs(int x)\n{\n    if(fa[C[x]])return x;\n    fa[x] = -1;\n    return min(x,dfs(C[x]));\n}\nvoid dfs1(int x,int y)\n{\n    fa[x] = y;\n    if(fa[C[x]] == y)return;\n    dfs1(C[x],y);\n}\nvector<int> G[200005];\nsigned main()\n{\n    sc(N)\n    for(int i = 1; i <= N; i++)sc(A[i])\n    for(int i = 1; i <= N; i++) sc(B[i])\n    for(int i = 1; i <= N; i++)sc(C[i])\n    if(N==1){\n        printf(\"%d\\n\",0);\n        return 0;\n    }\n    map<int,int> mp;\n    for(int i = 1; i <= N; i++){\n        if(A[i] <= B[C[i]]&&C[i]!=i){\n            printf(\"%d\\n\",-1);\n            return 0;\n        }\n        mp[B[C[i]]] = i;\n    }\n    for(int i = 1; i <= N; i++){\n        if(C[i] == i)continue;\n        if(fa[i])continue;\n        int y = dfs(i);\n        dfs1(i,y);\n    }\n    for(int i = 1; i <= N; i++){\n        if(fa[i]){\n            G[fa[i]].push_back(i);\n        }\n    }\n    vector<P> ans;\n    priority_queue<P> pq;\n    for(int i = 1; i <= N; i++){\n        if(G[i].size() > 0){\n            while(!pq.empty())pq.pop();\n            for(int x : G[i]){\n                pq.push({B[x],x});\n            }\n            while(pq.size() > 1){\n                P a = pq.top();pq.pop();\n                int w = mp[a.first]; ///在哪？\n                int v = a.second;///给谁\n \n                C[w] = C[v];\n                mp[B[C[w]]] = w;\n                C[v] = v;\n                ans.push_back({w,v});\n            }\n        }\n    }\n    cout << ans.size() << '\\n';\n    for(auto a : ans){\n        cout << a.fi <<' ' << a.se << '\\n';\n    }\n \n}\n```","source":"_posts/AtCoderRegularContest111.md","raw":"---\ntitle: AtCoder Regular Contest 111\ndate: 2021-01-09 22:20:47\ntags: 题解\n---\n[AtCoder Regular Contest 111](https://atcoder.jp/contests/arc111/tasks)\n\n{% asset_img new-year-5798330__340.png %}\n\n感觉BC写得有点复杂\n<!--More-->\n\n## A - Simple Math 2\n\n\n```C++\n#include <bits/stdc++.h>\n \nusing namespace std;\n#define int long long\n#define sc(x) scanf(\"%lld\",&x);\n#define pb push_back\n#define fi first\n#define se second\n#define P pair<int,int>\nint qp(int x, int y)\n{\n    int a = 10;\n    int ans = 1;\n    while(x){\n        if(x&1){\n            ans = (ans*a)%y;\n        }\n        a = (a*a)%y;\n        x>>=1;\n    }\n    return ans;\n}\nsigned main()\n{\n    int N;\n    int M;\n    sc(N) sc(M)\n    cout <<qp(N,M*M)/M << '\\n';\n \n}\n```\n\n## B - Reversible Cards\n```C++\n#include <bits/stdc++.h>\n \nusing namespace std;\n#define int long long\n#define sc(x) scanf(\"%lld\",&x);\n#define pb push_back\n#define fi first\n#define se second\n#define P pair<int,int>\nset<int> sx,sy;\nP A[200005];\nqueue<int> G[400005];\nmap<int,int>mp;\nbool vis[400006];\nbool f[200005];\nsigned main()\n{\n    int N;\n    int x,y;\n    sc(N)\n    for(int i = 0; i < N; i++){\n        sc(x)sc(y)\n        A[i].fi = x;\n        A[i].se = y;\n        mp[x]+=1;\n        mp[y] += 1;\n        G[x].push(i);\n        G[y].push(i);\n    }\n    priority_queue<P,vector<P>,greater<P> > pq;\n    for(auto x: mp){\n        pq.push({x.second,x.first});\n    }\n    int ans = 0;\n    while(!pq.empty()){\n        P a = pq.top();pq.pop();\n        if(vis[a.second])continue;\n        else {\n            bool g = false;\n            while(!G[a.second].empty()){\n                int id = G[a.second].front();\n                G[a.second].pop();\n                if(!f[id]){\n                    f[id] = true;\n                    if(A[id].se != a.second){\n                        mp[A[id].se] -= 1;\n                        if(!vis[A[id].se])\n                        pq.push({mp[A[id].se],A[id].se});\n                    }else{\n                        mp[A[id].fi] -= 1;\n                        if(!vis[A[id].fi])\n                        pq.push({mp[A[id].fi],A[id].fi});\n                    }\n                    g = true;\n                    break;\n                }\n \n            }\n            if(g)\n            ans += 1;\n            vis[a.second] = true;\n \n        }\n    }\n    cout << ans << '\\n';\n \n}\n```\n## C - Too Heavy\n```C++\n#include <bits/stdc++.h>\n \nusing namespace std;\n#define int long long\n#define sc(x) scanf(\"%lld\",&x);\n#define pb push_back\n#define fi first\n#define se second\n#define P pair<int,int>\nint N;\nint A[200005];\nint B[200005];\nint C[200005];\nint fa[200005];\nint dfs(int x)\n{\n    if(fa[C[x]])return x;\n    fa[x] = -1;\n    return min(x,dfs(C[x]));\n}\nvoid dfs1(int x,int y)\n{\n    fa[x] = y;\n    if(fa[C[x]] == y)return;\n    dfs1(C[x],y);\n}\nvector<int> G[200005];\nsigned main()\n{\n    sc(N)\n    for(int i = 1; i <= N; i++)sc(A[i])\n    for(int i = 1; i <= N; i++) sc(B[i])\n    for(int i = 1; i <= N; i++)sc(C[i])\n    if(N==1){\n        printf(\"%d\\n\",0);\n        return 0;\n    }\n    map<int,int> mp;\n    for(int i = 1; i <= N; i++){\n        if(A[i] <= B[C[i]]&&C[i]!=i){\n            printf(\"%d\\n\",-1);\n            return 0;\n        }\n        mp[B[C[i]]] = i;\n    }\n    for(int i = 1; i <= N; i++){\n        if(C[i] == i)continue;\n        if(fa[i])continue;\n        int y = dfs(i);\n        dfs1(i,y);\n    }\n    for(int i = 1; i <= N; i++){\n        if(fa[i]){\n            G[fa[i]].push_back(i);\n        }\n    }\n    vector<P> ans;\n    priority_queue<P> pq;\n    for(int i = 1; i <= N; i++){\n        if(G[i].size() > 0){\n            while(!pq.empty())pq.pop();\n            for(int x : G[i]){\n                pq.push({B[x],x});\n            }\n            while(pq.size() > 1){\n                P a = pq.top();pq.pop();\n                int w = mp[a.first]; ///在哪？\n                int v = a.second;///给谁\n \n                C[w] = C[v];\n                mp[B[C[w]]] = w;\n                C[v] = v;\n                ans.push_back({w,v});\n            }\n        }\n    }\n    cout << ans.size() << '\\n';\n    for(auto a : ans){\n        cout << a.fi <<' ' << a.se << '\\n';\n    }\n \n}\n```","slug":"AtCoderRegularContest111","published":1,"updated":"2021-01-09T14:39:10.120Z","_id":"ckjpt3uot000034uj9j9t74i4","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p><a href=\"https://atcoder.jp/contests/arc111/tasks\">AtCoder Regular Contest 111</a></p>\n<img src=\"/2021/01/09/AtCoderRegularContest111/new-year-5798330__340.png\" class=\"\">\n<p>感觉BC写得有点复杂<br><a id=\"more\"></a></p>\n<h2 id=\"A-Simple-Math-2\"><a href=\"#A-Simple-Math-2\" class=\"headerlink\" title=\"A - Simple Math 2\"></a>A - Simple Math 2</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sc(x) scanf(<span class=\"meta-string\">&quot;%lld&quot;</span>,&amp;x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> P pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qp</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            ans = (ans*a)%y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a = (a*a)%y;</span><br><span class=\"line\">        x&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> M;</span><br><span class=\"line\">    sc(N) sc(M)</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;qp(N,M*M)/M &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"B-Reversible-Cards\"><a href=\"#B-Reversible-Cards\" class=\"headerlink\" title=\"B - Reversible Cards\"></a>B - Reversible Cards</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sc(x) scanf(<span class=\"meta-string\">&quot;%lld&quot;</span>,&amp;x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> P pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; sx,sy;</span><br><span class=\"line\">P A[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">400005</span>];</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;mp;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">400006</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> f[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    sc(N)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">        sc(x)sc(y)</span><br><span class=\"line\">        A[i].fi = x;</span><br><span class=\"line\">        A[i].se = y;</span><br><span class=\"line\">        mp[x]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        mp[y] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        G[x].push(i);</span><br><span class=\"line\">        G[y].push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">priority_queue</span>&lt;P,<span class=\"built_in\">vector</span>&lt;P&gt;,greater&lt;P&gt; &gt; pq;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x: mp)&#123;</span><br><span class=\"line\">        pq.push(&#123;x.second,x.first&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.empty())&#123;</span><br><span class=\"line\">        P a = pq.top();pq.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[a.second])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> g = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!G[a.second].empty())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> id = G[a.second].front();</span><br><span class=\"line\">                G[a.second].pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!f[id])&#123;</span><br><span class=\"line\">                    f[id] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(A[id].se != a.second)&#123;</span><br><span class=\"line\">                        mp[A[id].se] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!vis[A[id].se])</span><br><span class=\"line\">                        pq.push(&#123;mp[A[id].se],A[id].se&#125;);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        mp[A[id].fi] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!vis[A[id].fi])</span><br><span class=\"line\">                        pq.push(&#123;mp[A[id].fi],A[id].fi&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    g = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g)</span><br><span class=\"line\">            ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">            vis[a.second] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-Too-Heavy\"><a href=\"#C-Too-Heavy\" class=\"headerlink\" title=\"C - Too Heavy\"></a>C - Too Heavy</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sc(x) scanf(<span class=\"meta-string\">&quot;%lld&quot;</span>,&amp;x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> P pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> N;</span><br><span class=\"line\"><span class=\"keyword\">int</span> A[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> B[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> C[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[C[x]])<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    fa[x] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min(x,dfs(C[x]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fa[x] = y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[C[x]] == y)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    dfs1(C[x],y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sc(N)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)sc(A[i])</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) sc(B[i])</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)sc(C[i])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i] &lt;= B[C[i]]&amp;&amp;C[i]!=i)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mp[B[C[i]]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(C[i] == i)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fa[i])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = dfs(i);</span><br><span class=\"line\">        dfs1(i,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fa[i])&#123;</span><br><span class=\"line\">            G[fa[i]].push_back(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;P&gt; ans;</span><br><span class=\"line\">    <span class=\"built_in\">priority_queue</span>&lt;P&gt; pq;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(G[i].size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!pq.empty())pq.pop();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x : G[i])&#123;</span><br><span class=\"line\">                pq.push(&#123;B[x],x&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pq.size() &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                P a = pq.top();pq.pop();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> w = mp[a.first]; <span class=\"comment\">///在哪？</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = a.second;<span class=\"comment\">///给谁</span></span><br><span class=\"line\"> </span><br><span class=\"line\">                C[w] = C[v];</span><br><span class=\"line\">                mp[B[C[w]]] = w;</span><br><span class=\"line\">                C[v] = v;</span><br><span class=\"line\">                ans.push_back(&#123;w,v&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> a : ans)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a.fi &lt;&lt;<span class=\"string\">&#x27; &#x27;</span> &lt;&lt; a.se &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<p><a href=\"https://atcoder.jp/contests/arc111/tasks\">AtCoder Regular Contest 111</a></p>\n<img src=\"/2021/01/09/AtCoderRegularContest111/new-year-5798330__340.png\" class=\"\">\n<p>感觉BC写得有点复杂<br>","more":"</p>\n<h2 id=\"A-Simple-Math-2\"><a href=\"#A-Simple-Math-2\" class=\"headerlink\" title=\"A - Simple Math 2\"></a>A - Simple Math 2</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sc(x) scanf(<span class=\"meta-string\">&quot;%lld&quot;</span>,&amp;x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> P pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qp</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            ans = (ans*a)%y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a = (a*a)%y;</span><br><span class=\"line\">        x&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> M;</span><br><span class=\"line\">    sc(N) sc(M)</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;qp(N,M*M)/M &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"B-Reversible-Cards\"><a href=\"#B-Reversible-Cards\" class=\"headerlink\" title=\"B - Reversible Cards\"></a>B - Reversible Cards</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sc(x) scanf(<span class=\"meta-string\">&quot;%lld&quot;</span>,&amp;x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> P pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; sx,sy;</span><br><span class=\"line\">P A[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">400005</span>];</span><br><span class=\"line\"><span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;mp;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[<span class=\"number\">400006</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> f[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    sc(N)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">        sc(x)sc(y)</span><br><span class=\"line\">        A[i].fi = x;</span><br><span class=\"line\">        A[i].se = y;</span><br><span class=\"line\">        mp[x]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        mp[y] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        G[x].push(i);</span><br><span class=\"line\">        G[y].push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">priority_queue</span>&lt;P,<span class=\"built_in\">vector</span>&lt;P&gt;,greater&lt;P&gt; &gt; pq;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x: mp)&#123;</span><br><span class=\"line\">        pq.push(&#123;x.second,x.first&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.empty())&#123;</span><br><span class=\"line\">        P a = pq.top();pq.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[a.second])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> g = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!G[a.second].empty())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> id = G[a.second].front();</span><br><span class=\"line\">                G[a.second].pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!f[id])&#123;</span><br><span class=\"line\">                    f[id] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(A[id].se != a.second)&#123;</span><br><span class=\"line\">                        mp[A[id].se] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!vis[A[id].se])</span><br><span class=\"line\">                        pq.push(&#123;mp[A[id].se],A[id].se&#125;);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        mp[A[id].fi] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!vis[A[id].fi])</span><br><span class=\"line\">                        pq.push(&#123;mp[A[id].fi],A[id].fi&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    g = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(g)</span><br><span class=\"line\">            ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">            vis[a.second] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-Too-Heavy\"><a href=\"#C-Too-Heavy\" class=\"headerlink\" title=\"C - Too Heavy\"></a>C - Too Heavy</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> sc(x) scanf(<span class=\"meta-string\">&quot;%lld&quot;</span>,&amp;x);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> P pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> N;</span><br><span class=\"line\"><span class=\"keyword\">int</span> A[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> B[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> C[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[C[x]])<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    fa[x] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min(x,dfs(C[x]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fa[x] = y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[C[x]] == y)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    dfs1(C[x],y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[<span class=\"number\">200005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sc(N)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)sc(A[i])</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) sc(B[i])</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)sc(C[i])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i] &lt;= B[C[i]]&amp;&amp;C[i]!=i)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"number\">-1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mp[B[C[i]]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(C[i] == i)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fa[i])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = dfs(i);</span><br><span class=\"line\">        dfs1(i,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fa[i])&#123;</span><br><span class=\"line\">            G[fa[i]].push_back(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;P&gt; ans;</span><br><span class=\"line\">    <span class=\"built_in\">priority_queue</span>&lt;P&gt; pq;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(G[i].size() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!pq.empty())pq.pop();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x : G[i])&#123;</span><br><span class=\"line\">                pq.push(&#123;B[x],x&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pq.size() &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                P a = pq.top();pq.pop();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> w = mp[a.first]; <span class=\"comment\">///在哪？</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = a.second;<span class=\"comment\">///给谁</span></span><br><span class=\"line\"> </span><br><span class=\"line\">                C[w] = C[v];</span><br><span class=\"line\">                mp[B[C[w]]] = w;</span><br><span class=\"line\">                C[v] = v;</span><br><span class=\"line\">                ans.push_back(&#123;w,v&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> a : ans)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a.fi &lt;&lt;<span class=\"string\">&#x27; &#x27;</span> &lt;&lt; a.se &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CMOS","date":"2021-01-21T11:21:47.000Z","_content":"\n## CMOS\n\n\"CMOS\" is a tiny bit of very low power static memory that lives on the same chip as the Real-Time Clock (RTC). \n\nCMOS 只能从端口0x70和0x71访问\n\nCMOS的作用是在计算机关机时为BIOS保存50 (or 114) bytes of \"Setup\" information ，因为它有一个单独的电池。\n\nCMOS 值一次访问一个字节，每个字节可以单独寻址。\n\n每个CMOS地址被称为一个寄存器\n\n<!--More-->\n\nThe first 14 CMOS registers access and control the Real-Time Clock,其他的没用。\n\n## Non-Maskable Interrupts\n\n不可屏蔽的中断\n\nNMI is meant to communicate a \"panic\" status from the hardware to the CPU in a way that the CPU cannot ignore. It is typically used to signal memory errors.\n\n每当向IO端口0x70发送一个字节, the high order bit tells the hardware whether to disable NMIs from reaching the CPU.\n\n If the bit is on, NMI is disabled (until the next time you send a byte to Port 0x70). The low order 7 bits of any byte sent to Port 0x70 are used to address CMOS registers.\n\n## CMOS Registers\n\n### Accessing CMOS Registers\n\nyou \"select\" a CMOS register (for reading or writing) by sending the register number to IO Port 0x70. Since the 0x80 bit of Port 0x70 controls NMI, you always end up setting that, too. So your CMOS controller always needs to know whether your OS wants NMI to be enabled or not. Selecting a CMOS register is done as follows:\n\n```c\noutb (0x70, (NMI_disable_bit << 7) | (selected CMOS register number));\n```\n\n\n\nOnce a register is selected, you either read the value of that register on Port 0x71 (with inb or an equivalent function), or you write a new value to that register -- also on Port 0x71 (with outb, for example):\n\n```c\nval_8bit = inb (0x71);\n```\n\n*  Reading or writing Port 0x71 seems to default the \"selected register\" back to 0xD. So you need to **reselect** the register every single time you want to access a CMOS register.\n\n## RTC Update In Progress\n\nRTC电路慢，时间的更新有延迟，如果在RTC更新期间读取时间和日期，会得到不正确的值。\n\n设置了一个\"Update in progress\" flag在0x0A寄存器。\n\n* The first alternative is to rely on the \"update interrupt\". When the RTC finishes an update it generates an \"update interrupt\" (if it's enabled), and the IRQ handler can safely read the time and date registers without worrying about the update at all (and without checking the \"Update in progress\" flag); as long as the IRQ handler doesn't take almost a full second to do it. In this case you're not wasting up to 1 second of CPU time waiting/polling, but it may still take a full second before the time and date has been read. Despite this it can be a useful technique during OS boot - e.g. setup the \"update interrupt\" and its IRQ handler as early as you can and then do other things (e.g. loading files from disk), in the hope that the IRQ occurs before you need the time and date.\n* The second alternative is to be prepared for dodgy/inconsistent values and cope with them if they occur. To do this, make sure the \"Update in progress\" flag is clear (e.g. \"*while(update_in_progress_flag != clear)*\") then read all the time and date registers; then make sure the \"Update in progress\" flag is clear again (e.g. \"*while(update_in_progress_flag != clear)*\") and read all the time and date registers again. If the values that were read the first time are the same as the value that were read the second time then the values must be correct. If any of the values are different you need to do it again, and keep doing it again until the newest values are the same as the previous values.\n\n```c\n#define CURRENT_YEAR        2020                            // Change this each year!\n \nint century_register = 0x00;                                // Set by ACPI table parsing code if possible\n \nunsigned char second;\nunsigned char minute;\nunsigned char hour;\nunsigned char day;\nunsigned char month;\nunsigned int year;\n \nvoid out_byte(int port, int value);\nint in_byte(int port);\n \nenum {\n      cmos_address = 0x70,\n      cmos_data    = 0x71\n};\n \nint get_update_in_progress_flag() {\n      out_byte(cmos_address, 0x0A);\n      return (in_byte(cmos_data) & 0x80);\n}\n \nunsigned char get_RTC_register(int reg) {\n      out_byte(cmos_address, reg);\n      return in_byte(cmos_data);\n}\n \nvoid read_rtc() {\n      unsigned char century;\n      unsigned char last_second;\n      unsigned char last_minute;\n      unsigned char last_hour;\n      unsigned char last_day;\n      unsigned char last_month;\n      unsigned char last_year;\n      unsigned char last_century;\n      unsigned char registerB;\n \n      // Note: This uses the \"read registers until you get the same values twice in a row\" technique\n      //       to avoid getting dodgy/inconsistent values due to RTC updates\n \n      while (get_update_in_progress_flag());                // Make sure an update isn't in progress\n      second = get_RTC_register(0x00);\n      minute = get_RTC_register(0x02);\n      hour = get_RTC_register(0x04);\n      day = get_RTC_register(0x07);\n      month = get_RTC_register(0x08);\n      year = get_RTC_register(0x09);\n      if(century_register != 0) {\n            century = get_RTC_register(century_register);\n      }\n \n      do {\n            last_second = second;\n            last_minute = minute;\n            last_hour = hour;\n            last_day = day;\n            last_month = month;\n            last_year = year;\n            last_century = century;\n \n            while (get_update_in_progress_flag());           // Make sure an update isn't in progress\n            second = get_RTC_register(0x00);\n            minute = get_RTC_register(0x02);\n            hour = get_RTC_register(0x04);\n            day = get_RTC_register(0x07);\n            month = get_RTC_register(0x08);\n            year = get_RTC_register(0x09);\n            if(century_register != 0) {\n                  century = get_RTC_register(century_register);\n            }\n      } while( (last_second != second) || (last_minute != minute) || (last_hour != hour) ||\n               (last_day != day) || (last_month != month) || (last_year != year) ||\n               (last_century != century) );\n \n      registerB = get_RTC_register(0x0B);\n \n      // Convert BCD to binary values if necessary\n \n      if (!(registerB & 0x04)) {\n            second = (second & 0x0F) + ((second / 16) * 10);\n            minute = (minute & 0x0F) + ((minute / 16) * 10);\n            hour = ( (hour & 0x0F) + (((hour & 0x70) / 16) * 10) ) | (hour & 0x80);\n            day = (day & 0x0F) + ((day / 16) * 10);\n            month = (month & 0x0F) + ((month / 16) * 10);\n            year = (year & 0x0F) + ((year / 16) * 10);\n            if(century_register != 0) {\n                  century = (century & 0x0F) + ((century / 16) * 10);\n            }\n      }\n \n      // Convert 12 hour clock to 24 hour clock if necessary\n \n      if (!(registerB & 0x02) && (hour & 0x80)) {\n            hour = ((hour & 0x7F) + 12) % 24;\n      }\n \n      // Calculate the full (4-digit) year\n \n      if(century_register != 0) {\n            year += century * 100;\n      } else {\n            year += (CURRENT_YEAR / 100) * 100;\n            if(year < CURRENT_YEAR) year += 100;\n      }\n}\n```\n\n\n\n","source":"_posts/CMOS.md","raw":"---\ntitle: CMOS\ndate: 2021-01-21 19:21:47\ntags: OS\n---\n\n## CMOS\n\n\"CMOS\" is a tiny bit of very low power static memory that lives on the same chip as the Real-Time Clock (RTC). \n\nCMOS 只能从端口0x70和0x71访问\n\nCMOS的作用是在计算机关机时为BIOS保存50 (or 114) bytes of \"Setup\" information ，因为它有一个单独的电池。\n\nCMOS 值一次访问一个字节，每个字节可以单独寻址。\n\n每个CMOS地址被称为一个寄存器\n\n<!--More-->\n\nThe first 14 CMOS registers access and control the Real-Time Clock,其他的没用。\n\n## Non-Maskable Interrupts\n\n不可屏蔽的中断\n\nNMI is meant to communicate a \"panic\" status from the hardware to the CPU in a way that the CPU cannot ignore. It is typically used to signal memory errors.\n\n每当向IO端口0x70发送一个字节, the high order bit tells the hardware whether to disable NMIs from reaching the CPU.\n\n If the bit is on, NMI is disabled (until the next time you send a byte to Port 0x70). The low order 7 bits of any byte sent to Port 0x70 are used to address CMOS registers.\n\n## CMOS Registers\n\n### Accessing CMOS Registers\n\nyou \"select\" a CMOS register (for reading or writing) by sending the register number to IO Port 0x70. Since the 0x80 bit of Port 0x70 controls NMI, you always end up setting that, too. So your CMOS controller always needs to know whether your OS wants NMI to be enabled or not. Selecting a CMOS register is done as follows:\n\n```c\noutb (0x70, (NMI_disable_bit << 7) | (selected CMOS register number));\n```\n\n\n\nOnce a register is selected, you either read the value of that register on Port 0x71 (with inb or an equivalent function), or you write a new value to that register -- also on Port 0x71 (with outb, for example):\n\n```c\nval_8bit = inb (0x71);\n```\n\n*  Reading or writing Port 0x71 seems to default the \"selected register\" back to 0xD. So you need to **reselect** the register every single time you want to access a CMOS register.\n\n## RTC Update In Progress\n\nRTC电路慢，时间的更新有延迟，如果在RTC更新期间读取时间和日期，会得到不正确的值。\n\n设置了一个\"Update in progress\" flag在0x0A寄存器。\n\n* The first alternative is to rely on the \"update interrupt\". When the RTC finishes an update it generates an \"update interrupt\" (if it's enabled), and the IRQ handler can safely read the time and date registers without worrying about the update at all (and without checking the \"Update in progress\" flag); as long as the IRQ handler doesn't take almost a full second to do it. In this case you're not wasting up to 1 second of CPU time waiting/polling, but it may still take a full second before the time and date has been read. Despite this it can be a useful technique during OS boot - e.g. setup the \"update interrupt\" and its IRQ handler as early as you can and then do other things (e.g. loading files from disk), in the hope that the IRQ occurs before you need the time and date.\n* The second alternative is to be prepared for dodgy/inconsistent values and cope with them if they occur. To do this, make sure the \"Update in progress\" flag is clear (e.g. \"*while(update_in_progress_flag != clear)*\") then read all the time and date registers; then make sure the \"Update in progress\" flag is clear again (e.g. \"*while(update_in_progress_flag != clear)*\") and read all the time and date registers again. If the values that were read the first time are the same as the value that were read the second time then the values must be correct. If any of the values are different you need to do it again, and keep doing it again until the newest values are the same as the previous values.\n\n```c\n#define CURRENT_YEAR        2020                            // Change this each year!\n \nint century_register = 0x00;                                // Set by ACPI table parsing code if possible\n \nunsigned char second;\nunsigned char minute;\nunsigned char hour;\nunsigned char day;\nunsigned char month;\nunsigned int year;\n \nvoid out_byte(int port, int value);\nint in_byte(int port);\n \nenum {\n      cmos_address = 0x70,\n      cmos_data    = 0x71\n};\n \nint get_update_in_progress_flag() {\n      out_byte(cmos_address, 0x0A);\n      return (in_byte(cmos_data) & 0x80);\n}\n \nunsigned char get_RTC_register(int reg) {\n      out_byte(cmos_address, reg);\n      return in_byte(cmos_data);\n}\n \nvoid read_rtc() {\n      unsigned char century;\n      unsigned char last_second;\n      unsigned char last_minute;\n      unsigned char last_hour;\n      unsigned char last_day;\n      unsigned char last_month;\n      unsigned char last_year;\n      unsigned char last_century;\n      unsigned char registerB;\n \n      // Note: This uses the \"read registers until you get the same values twice in a row\" technique\n      //       to avoid getting dodgy/inconsistent values due to RTC updates\n \n      while (get_update_in_progress_flag());                // Make sure an update isn't in progress\n      second = get_RTC_register(0x00);\n      minute = get_RTC_register(0x02);\n      hour = get_RTC_register(0x04);\n      day = get_RTC_register(0x07);\n      month = get_RTC_register(0x08);\n      year = get_RTC_register(0x09);\n      if(century_register != 0) {\n            century = get_RTC_register(century_register);\n      }\n \n      do {\n            last_second = second;\n            last_minute = minute;\n            last_hour = hour;\n            last_day = day;\n            last_month = month;\n            last_year = year;\n            last_century = century;\n \n            while (get_update_in_progress_flag());           // Make sure an update isn't in progress\n            second = get_RTC_register(0x00);\n            minute = get_RTC_register(0x02);\n            hour = get_RTC_register(0x04);\n            day = get_RTC_register(0x07);\n            month = get_RTC_register(0x08);\n            year = get_RTC_register(0x09);\n            if(century_register != 0) {\n                  century = get_RTC_register(century_register);\n            }\n      } while( (last_second != second) || (last_minute != minute) || (last_hour != hour) ||\n               (last_day != day) || (last_month != month) || (last_year != year) ||\n               (last_century != century) );\n \n      registerB = get_RTC_register(0x0B);\n \n      // Convert BCD to binary values if necessary\n \n      if (!(registerB & 0x04)) {\n            second = (second & 0x0F) + ((second / 16) * 10);\n            minute = (minute & 0x0F) + ((minute / 16) * 10);\n            hour = ( (hour & 0x0F) + (((hour & 0x70) / 16) * 10) ) | (hour & 0x80);\n            day = (day & 0x0F) + ((day / 16) * 10);\n            month = (month & 0x0F) + ((month / 16) * 10);\n            year = (year & 0x0F) + ((year / 16) * 10);\n            if(century_register != 0) {\n                  century = (century & 0x0F) + ((century / 16) * 10);\n            }\n      }\n \n      // Convert 12 hour clock to 24 hour clock if necessary\n \n      if (!(registerB & 0x02) && (hour & 0x80)) {\n            hour = ((hour & 0x7F) + 12) % 24;\n      }\n \n      // Calculate the full (4-digit) year\n \n      if(century_register != 0) {\n            year += century * 100;\n      } else {\n            year += (CURRENT_YEAR / 100) * 100;\n            if(year < CURRENT_YEAR) year += 100;\n      }\n}\n```\n\n\n\n","slug":"CMOS","published":1,"updated":"2021-01-21T13:15:46.112Z","_id":"ckk6vn4c90000s0uj4y800qy2","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"CMOS\"><a href=\"#CMOS\" class=\"headerlink\" title=\"CMOS\"></a>CMOS</h2><p>“CMOS” is a tiny bit of very low power static memory that lives on the same chip as the Real-Time Clock (RTC). </p>\n<p>CMOS 只能从端口0x70和0x71访问</p>\n<p>CMOS的作用是在计算机关机时为BIOS保存50 (or 114) bytes of “Setup” information ，因为它有一个单独的电池。</p>\n<p>CMOS 值一次访问一个字节，每个字节可以单独寻址。</p>\n<p>每个CMOS地址被称为一个寄存器</p>\n<a id=\"more\"></a>\n<p>The first 14 CMOS registers access and control the Real-Time Clock,其他的没用。</p>\n<h2 id=\"Non-Maskable-Interrupts\"><a href=\"#Non-Maskable-Interrupts\" class=\"headerlink\" title=\"Non-Maskable Interrupts\"></a>Non-Maskable Interrupts</h2><p>不可屏蔽的中断</p>\n<p>NMI is meant to communicate a “panic” status from the hardware to the CPU in a way that the CPU cannot ignore. It is typically used to signal memory errors.</p>\n<p>每当向IO端口0x70发送一个字节, the high order bit tells the hardware whether to disable NMIs from reaching the CPU.</p>\n<p> If the bit is on, NMI is disabled (until the next time you send a byte to Port 0x70). The low order 7 bits of any byte sent to Port 0x70 are used to address CMOS registers.</p>\n<h2 id=\"CMOS-Registers\"><a href=\"#CMOS-Registers\" class=\"headerlink\" title=\"CMOS Registers\"></a>CMOS Registers</h2><h3 id=\"Accessing-CMOS-Registers\"><a href=\"#Accessing-CMOS-Registers\" class=\"headerlink\" title=\"Accessing CMOS Registers\"></a>Accessing CMOS Registers</h3><p>you “select” a CMOS register (for reading or writing) by sending the register number to IO Port 0x70. Since the 0x80 bit of Port 0x70 controls NMI, you always end up setting that, too. So your CMOS controller always needs to know whether your OS wants NMI to be enabled or not. Selecting a CMOS register is done as follows:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outb (<span class=\"number\">0x70</span>, (NMI_disable_bit &lt;&lt; <span class=\"number\">7</span>) | (selected CMOS <span class=\"keyword\">register</span> number));</span><br></pre></td></tr></table></figure>\n<p>Once a register is selected, you either read the value of that register on Port 0x71 (with inb or an equivalent function), or you write a new value to that register — also on Port 0x71 (with outb, for example):</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val_8bit = inb (<span class=\"number\">0x71</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Reading or writing Port 0x71 seems to default the “selected register” back to 0xD. So you need to <strong>reselect</strong> the register every single time you want to access a CMOS register.</li>\n</ul>\n<h2 id=\"RTC-Update-In-Progress\"><a href=\"#RTC-Update-In-Progress\" class=\"headerlink\" title=\"RTC Update In Progress\"></a>RTC Update In Progress</h2><p>RTC电路慢，时间的更新有延迟，如果在RTC更新期间读取时间和日期，会得到不正确的值。</p>\n<p>设置了一个”Update in progress” flag在0x0A寄存器。</p>\n<ul>\n<li>The first alternative is to rely on the “update interrupt”. When the RTC finishes an update it generates an “update interrupt” (if it’s enabled), and the IRQ handler can safely read the time and date registers without worrying about the update at all (and without checking the “Update in progress” flag); as long as the IRQ handler doesn’t take almost a full second to do it. In this case you’re not wasting up to 1 second of CPU time waiting/polling, but it may still take a full second before the time and date has been read. Despite this it can be a useful technique during OS boot - e.g. setup the “update interrupt” and its IRQ handler as early as you can and then do other things (e.g. loading files from disk), in the hope that the IRQ occurs before you need the time and date.</li>\n<li>The second alternative is to be prepared for dodgy/inconsistent values and cope with them if they occur. To do this, make sure the “Update in progress” flag is clear (e.g. “<em>while(update_in_progress_flag != clear)</em>“) then read all the time and date registers; then make sure the “Update in progress” flag is clear again (e.g. “<em>while(update_in_progress_flag != clear)</em>“) and read all the time and date registers again. If the values that were read the first time are the same as the value that were read the second time then the values must be correct. If any of the values are different you need to do it again, and keep doing it again until the newest values are the same as the previous values.</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CURRENT_YEAR        2020                            <span class=\"comment\">// Change this each year!</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> century_register = <span class=\"number\">0x00</span>;                                <span class=\"comment\">// Set by ACPI table parsing code if possible</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> second;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> minute;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> hour;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> day;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> month;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> year;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">out_byte</span><span class=\"params\">(<span class=\"keyword\">int</span> port, <span class=\"keyword\">int</span> value)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">in_byte</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span></span><br><span class=\"line\">      cmos_address = <span class=\"number\">0x70</span>,</span><br><span class=\"line\">      cmos_data    = <span class=\"number\">0x71</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_update_in_progress_flag</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      out_byte(cmos_address, <span class=\"number\">0x0A</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (in_byte(cmos_data) &amp; <span class=\"number\">0x80</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">get_RTC_register</span><span class=\"params\">(<span class=\"keyword\">int</span> reg)</span> </span>&#123;</span><br><span class=\"line\">      out_byte(cmos_address, reg);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> in_byte(cmos_data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_rtc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> century;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_second;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_minute;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_hour;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_day;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_month;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_year;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_century;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> registerB;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// Note: This uses the &quot;read registers until you get the same values twice in a row&quot; technique</span></span><br><span class=\"line\">      <span class=\"comment\">//       to avoid getting dodgy/inconsistent values due to RTC updates</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">while</span> (get_update_in_progress_flag());                <span class=\"comment\">// Make sure an update isn&#x27;t in progress</span></span><br><span class=\"line\">      second = get_RTC_register(<span class=\"number\">0x00</span>);</span><br><span class=\"line\">      minute = get_RTC_register(<span class=\"number\">0x02</span>);</span><br><span class=\"line\">      hour = get_RTC_register(<span class=\"number\">0x04</span>);</span><br><span class=\"line\">      day = get_RTC_register(<span class=\"number\">0x07</span>);</span><br><span class=\"line\">      month = get_RTC_register(<span class=\"number\">0x08</span>);</span><br><span class=\"line\">      year = get_RTC_register(<span class=\"number\">0x09</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(century_register != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            century = get_RTC_register(century_register);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            last_second = second;</span><br><span class=\"line\">            last_minute = minute;</span><br><span class=\"line\">            last_hour = hour;</span><br><span class=\"line\">            last_day = day;</span><br><span class=\"line\">            last_month = month;</span><br><span class=\"line\">            last_year = year;</span><br><span class=\"line\">            last_century = century;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">while</span> (get_update_in_progress_flag());           <span class=\"comment\">// Make sure an update isn&#x27;t in progress</span></span><br><span class=\"line\">            second = get_RTC_register(<span class=\"number\">0x00</span>);</span><br><span class=\"line\">            minute = get_RTC_register(<span class=\"number\">0x02</span>);</span><br><span class=\"line\">            hour = get_RTC_register(<span class=\"number\">0x04</span>);</span><br><span class=\"line\">            day = get_RTC_register(<span class=\"number\">0x07</span>);</span><br><span class=\"line\">            month = get_RTC_register(<span class=\"number\">0x08</span>);</span><br><span class=\"line\">            year = get_RTC_register(<span class=\"number\">0x09</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(century_register != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  century = get_RTC_register(century_register);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">while</span>( (last_second != second) || (last_minute != minute) || (last_hour != hour) ||</span><br><span class=\"line\">               (last_day != day) || (last_month != month) || (last_year != year) ||</span><br><span class=\"line\">               (last_century != century) );</span><br><span class=\"line\"> </span><br><span class=\"line\">      registerB = get_RTC_register(<span class=\"number\">0x0B</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// Convert BCD to binary values if necessary</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(registerB &amp; <span class=\"number\">0x04</span>)) &#123;</span><br><span class=\"line\">            second = (second &amp; <span class=\"number\">0x0F</span>) + ((second / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            minute = (minute &amp; <span class=\"number\">0x0F</span>) + ((minute / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            hour = ( (hour &amp; <span class=\"number\">0x0F</span>) + (((hour &amp; <span class=\"number\">0x70</span>) / <span class=\"number\">16</span>) * <span class=\"number\">10</span>) ) | (hour &amp; <span class=\"number\">0x80</span>);</span><br><span class=\"line\">            day = (day &amp; <span class=\"number\">0x0F</span>) + ((day / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            month = (month &amp; <span class=\"number\">0x0F</span>) + ((month / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            year = (year &amp; <span class=\"number\">0x0F</span>) + ((year / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(century_register != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  century = (century &amp; <span class=\"number\">0x0F</span>) + ((century / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// Convert 12 hour clock to 24 hour clock if necessary</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(registerB &amp; <span class=\"number\">0x02</span>) &amp;&amp; (hour &amp; <span class=\"number\">0x80</span>)) &#123;</span><br><span class=\"line\">            hour = ((hour &amp; <span class=\"number\">0x7F</span>) + <span class=\"number\">12</span>) % <span class=\"number\">24</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// Calculate the full (4-digit) year</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(century_register != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            year += century * <span class=\"number\">100</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            year += (CURRENT_YEAR / <span class=\"number\">100</span>) * <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(year &lt; CURRENT_YEAR) year += <span class=\"number\">100</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<h2 id=\"CMOS\"><a href=\"#CMOS\" class=\"headerlink\" title=\"CMOS\"></a>CMOS</h2><p>“CMOS” is a tiny bit of very low power static memory that lives on the same chip as the Real-Time Clock (RTC). </p>\n<p>CMOS 只能从端口0x70和0x71访问</p>\n<p>CMOS的作用是在计算机关机时为BIOS保存50 (or 114) bytes of “Setup” information ，因为它有一个单独的电池。</p>\n<p>CMOS 值一次访问一个字节，每个字节可以单独寻址。</p>\n<p>每个CMOS地址被称为一个寄存器</p>","more":"<p>The first 14 CMOS registers access and control the Real-Time Clock,其他的没用。</p>\n<h2 id=\"Non-Maskable-Interrupts\"><a href=\"#Non-Maskable-Interrupts\" class=\"headerlink\" title=\"Non-Maskable Interrupts\"></a>Non-Maskable Interrupts</h2><p>不可屏蔽的中断</p>\n<p>NMI is meant to communicate a “panic” status from the hardware to the CPU in a way that the CPU cannot ignore. It is typically used to signal memory errors.</p>\n<p>每当向IO端口0x70发送一个字节, the high order bit tells the hardware whether to disable NMIs from reaching the CPU.</p>\n<p> If the bit is on, NMI is disabled (until the next time you send a byte to Port 0x70). The low order 7 bits of any byte sent to Port 0x70 are used to address CMOS registers.</p>\n<h2 id=\"CMOS-Registers\"><a href=\"#CMOS-Registers\" class=\"headerlink\" title=\"CMOS Registers\"></a>CMOS Registers</h2><h3 id=\"Accessing-CMOS-Registers\"><a href=\"#Accessing-CMOS-Registers\" class=\"headerlink\" title=\"Accessing CMOS Registers\"></a>Accessing CMOS Registers</h3><p>you “select” a CMOS register (for reading or writing) by sending the register number to IO Port 0x70. Since the 0x80 bit of Port 0x70 controls NMI, you always end up setting that, too. So your CMOS controller always needs to know whether your OS wants NMI to be enabled or not. Selecting a CMOS register is done as follows:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outb (<span class=\"number\">0x70</span>, (NMI_disable_bit &lt;&lt; <span class=\"number\">7</span>) | (selected CMOS <span class=\"keyword\">register</span> number));</span><br></pre></td></tr></table></figure>\n<p>Once a register is selected, you either read the value of that register on Port 0x71 (with inb or an equivalent function), or you write a new value to that register — also on Port 0x71 (with outb, for example):</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val_8bit = inb (<span class=\"number\">0x71</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Reading or writing Port 0x71 seems to default the “selected register” back to 0xD. So you need to <strong>reselect</strong> the register every single time you want to access a CMOS register.</li>\n</ul>\n<h2 id=\"RTC-Update-In-Progress\"><a href=\"#RTC-Update-In-Progress\" class=\"headerlink\" title=\"RTC Update In Progress\"></a>RTC Update In Progress</h2><p>RTC电路慢，时间的更新有延迟，如果在RTC更新期间读取时间和日期，会得到不正确的值。</p>\n<p>设置了一个”Update in progress” flag在0x0A寄存器。</p>\n<ul>\n<li>The first alternative is to rely on the “update interrupt”. When the RTC finishes an update it generates an “update interrupt” (if it’s enabled), and the IRQ handler can safely read the time and date registers without worrying about the update at all (and without checking the “Update in progress” flag); as long as the IRQ handler doesn’t take almost a full second to do it. In this case you’re not wasting up to 1 second of CPU time waiting/polling, but it may still take a full second before the time and date has been read. Despite this it can be a useful technique during OS boot - e.g. setup the “update interrupt” and its IRQ handler as early as you can and then do other things (e.g. loading files from disk), in the hope that the IRQ occurs before you need the time and date.</li>\n<li>The second alternative is to be prepared for dodgy/inconsistent values and cope with them if they occur. To do this, make sure the “Update in progress” flag is clear (e.g. “<em>while(update_in_progress_flag != clear)</em>“) then read all the time and date registers; then make sure the “Update in progress” flag is clear again (e.g. “<em>while(update_in_progress_flag != clear)</em>“) and read all the time and date registers again. If the values that were read the first time are the same as the value that were read the second time then the values must be correct. If any of the values are different you need to do it again, and keep doing it again until the newest values are the same as the previous values.</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CURRENT_YEAR        2020                            <span class=\"comment\">// Change this each year!</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> century_register = <span class=\"number\">0x00</span>;                                <span class=\"comment\">// Set by ACPI table parsing code if possible</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> second;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> minute;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> hour;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> day;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> month;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> year;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">out_byte</span><span class=\"params\">(<span class=\"keyword\">int</span> port, <span class=\"keyword\">int</span> value)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">in_byte</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span></span><br><span class=\"line\">      cmos_address = <span class=\"number\">0x70</span>,</span><br><span class=\"line\">      cmos_data    = <span class=\"number\">0x71</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_update_in_progress_flag</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      out_byte(cmos_address, <span class=\"number\">0x0A</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (in_byte(cmos_data) &amp; <span class=\"number\">0x80</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"title\">get_RTC_register</span><span class=\"params\">(<span class=\"keyword\">int</span> reg)</span> </span>&#123;</span><br><span class=\"line\">      out_byte(cmos_address, reg);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> in_byte(cmos_data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_rtc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> century;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_second;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_minute;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_hour;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_day;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_month;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_year;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> last_century;</span><br><span class=\"line\">      <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> registerB;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// Note: This uses the &quot;read registers until you get the same values twice in a row&quot; technique</span></span><br><span class=\"line\">      <span class=\"comment\">//       to avoid getting dodgy/inconsistent values due to RTC updates</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">while</span> (get_update_in_progress_flag());                <span class=\"comment\">// Make sure an update isn&#x27;t in progress</span></span><br><span class=\"line\">      second = get_RTC_register(<span class=\"number\">0x00</span>);</span><br><span class=\"line\">      minute = get_RTC_register(<span class=\"number\">0x02</span>);</span><br><span class=\"line\">      hour = get_RTC_register(<span class=\"number\">0x04</span>);</span><br><span class=\"line\">      day = get_RTC_register(<span class=\"number\">0x07</span>);</span><br><span class=\"line\">      month = get_RTC_register(<span class=\"number\">0x08</span>);</span><br><span class=\"line\">      year = get_RTC_register(<span class=\"number\">0x09</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(century_register != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            century = get_RTC_register(century_register);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            last_second = second;</span><br><span class=\"line\">            last_minute = minute;</span><br><span class=\"line\">            last_hour = hour;</span><br><span class=\"line\">            last_day = day;</span><br><span class=\"line\">            last_month = month;</span><br><span class=\"line\">            last_year = year;</span><br><span class=\"line\">            last_century = century;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">while</span> (get_update_in_progress_flag());           <span class=\"comment\">// Make sure an update isn&#x27;t in progress</span></span><br><span class=\"line\">            second = get_RTC_register(<span class=\"number\">0x00</span>);</span><br><span class=\"line\">            minute = get_RTC_register(<span class=\"number\">0x02</span>);</span><br><span class=\"line\">            hour = get_RTC_register(<span class=\"number\">0x04</span>);</span><br><span class=\"line\">            day = get_RTC_register(<span class=\"number\">0x07</span>);</span><br><span class=\"line\">            month = get_RTC_register(<span class=\"number\">0x08</span>);</span><br><span class=\"line\">            year = get_RTC_register(<span class=\"number\">0x09</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(century_register != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  century = get_RTC_register(century_register);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">while</span>( (last_second != second) || (last_minute != minute) || (last_hour != hour) ||</span><br><span class=\"line\">               (last_day != day) || (last_month != month) || (last_year != year) ||</span><br><span class=\"line\">               (last_century != century) );</span><br><span class=\"line\"> </span><br><span class=\"line\">      registerB = get_RTC_register(<span class=\"number\">0x0B</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// Convert BCD to binary values if necessary</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(registerB &amp; <span class=\"number\">0x04</span>)) &#123;</span><br><span class=\"line\">            second = (second &amp; <span class=\"number\">0x0F</span>) + ((second / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            minute = (minute &amp; <span class=\"number\">0x0F</span>) + ((minute / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            hour = ( (hour &amp; <span class=\"number\">0x0F</span>) + (((hour &amp; <span class=\"number\">0x70</span>) / <span class=\"number\">16</span>) * <span class=\"number\">10</span>) ) | (hour &amp; <span class=\"number\">0x80</span>);</span><br><span class=\"line\">            day = (day &amp; <span class=\"number\">0x0F</span>) + ((day / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            month = (month &amp; <span class=\"number\">0x0F</span>) + ((month / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            year = (year &amp; <span class=\"number\">0x0F</span>) + ((year / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(century_register != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  century = (century &amp; <span class=\"number\">0x0F</span>) + ((century / <span class=\"number\">16</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// Convert 12 hour clock to 24 hour clock if necessary</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(registerB &amp; <span class=\"number\">0x02</span>) &amp;&amp; (hour &amp; <span class=\"number\">0x80</span>)) &#123;</span><br><span class=\"line\">            hour = ((hour &amp; <span class=\"number\">0x7F</span>) + <span class=\"number\">12</span>) % <span class=\"number\">24</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// Calculate the full (4-digit) year</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(century_register != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            year += century * <span class=\"number\">100</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            year += (CURRENT_YEAR / <span class=\"number\">100</span>) * <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(year &lt; CURRENT_YEAR) year += <span class=\"number\">100</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Make and Signal","date":"2021-02-02T12:31:28.000Z","_content":"\n## Make\n\nhello world in make\n\n```makefile\nhello:\n\techo \"hello world\"\n```\n\nSave this in a file named ‘makefile’. Then navigate to the directory and run the command:\n\n```bash\n$ make hello\n```\n\n<!-- More -->\n\n* Makefile syntax\n\n```makefile\ntarget: prerequisites\n<TAB> recipe\n```\n\n* Make command in shell:\n\n```bash\n$ make target\n```\n\n* Other targets can be used as prerequisites of a target\n\n```makefile\ntarget: other_target target.c\n Recipe_to_create_target\nother_target: other_target.c\n Recipe_to_create_other_target\n```\n\nexample:\n\n```makefile\ncode_file1.o: code_file1.c\n\tgcc -c code_file1.c -o code_file1.o\ncode_file2.o: code_file2.c\n\tgcc -c code_file2.c -o code_file2.o\nmy_app: code_file1.o code_file2.o\n\tgcc -o my_app code_file1.o code_file2.o\nclean:\n\trm *.o my_app\n```\n\n* When make is ran, it looks for the **target** file in the directory. If the target is not found, \n\n  recipe to generate target is ran with all the prerequisites.\n\n* If **target** is found, it checks whether the dependencies have changed since last time. If \n\n  so, changed dependencies are run according to the configuration and the target is \n\n  generated.\n\n* **target** can be different from output filename. In this case, make won't be able to find the \n\nfile and the file will be regenerated regardless of no changes. (Don’t do this when\n\ncompiling)\n\n* By default the first target of the makefile is considered as the default target. If you run \n\n  make with no arguments, the first target is run.\n\n* By convention, the first target is set as **all**. It should have the recipe for the default \n\n  behaviour you expect from make.\n\n* Using **.DEFAULT_GOAL** can override the default behaviour of make\n\n```makefile\n#same behaviour if we use .DEFAULT_GOAL=my_app\nall:my_app \ncode_file1.o: code_file1.c\n\tgcc -c code_file1.c -o code_file1.o\ncode_file2.o: code_file2.c\n\tgcc -c code_file2.c -o code_file2.o\nmy_app: code_file1.o code_file2.o\n\tgcc -o my_app code_file1.o code_file2.o\nclean:\n\trm *.o my_app\n```\n\n\n\n**Phony target** is a target which is not the name of a file. Say we have a target named ‘clean’. If we also have a file named clean, make will not run the recipe for this target.\n\nWe can indicate such targets with **.PHONY** and make will run it regardless of a file.\n\n```makefile\n.PHONY: clean\nclean:\n\trm *.o my_app\n```\n\nYou can define variables in makefile:\n\n```makefile\nOBJECTS=code_file1.o code_file2.o\nmy_app: $(OBJECTS)\n\tgcc -o my_app $(OBJECTS)\n```\n\nYou can use wildcards as well.\n\n### implicit variables\n\nThere are a set of implicit variables defined in make:\n\n```makefile\nCFLAGS\nCC\nCXX\nand etc..\n```\n\nThese variables can be referred without declaring them and the default value will be passed. If needed they can be overridden by declaring them as a regular variable.\n\n```makefile\ncode_file1.o: code_file1.c\n\t$(CC) $(CFLAGS) -c code_file1.c -o code_file1.o\n```\n\n[List of implicit variables](https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html)\n\n### pass command line arguments\n\nWe can pass command line arguments when using make to alter the compilation.\n\n```c\n//main.c\n#include <stdio.h>\nint main()\n{\n\tprintf(\"MY_VAL = %d\\n\", MY_VAL);\n}\n```\n\n```makefile\nmain:main.c\n\tgcc $(CFLAGS) main.c -o main\nclean:\n\trm main\n```\n\n```bash\n$ make CFLAGS=-DMY_VAL=3\n```\n\n```bash\noutput:\nMY_VAL = 3\n```\n\n如何在程序中确定make指令有没有指定MY_VAL\n\n```c\n#ifdef MY_VAL\n...\n#else\n...\n#endif\n```\n\n\n\n* It won’t compile without the argument.\n\n## Signals\n\nSignals are events created by UNIX and Linux systems and are a method for the OS to communicate with a process. They can be acted upon or ignored.\n\n* A method of interprocess communication\n* Are the result of some condition\n* Allow the process receiving the signal to take an action through a signal handler\n\nProvide a process a notification of an event.\n\n* Event gains attention of the OS.\n\n* OS stops the application process immediately, sending it a signal.\n\n* Signal handler is executed.\n\n* Application process resumes where it left of.\n\n**Raise**\n\nThe generation of a signal upon a process.\n\n**Catch**\n\nThe reception of a signal by that process.\n\n**Handle**\n\nHow the program reacts to the signal.\n\n#### Conditions for signals\n\n* Error conditions such as：\n\n  Memory segment violations\n\n  Floating-point processor errors\n\n  Illegal instructions\n\n* Explicitly sent from one process to another as a method of Inter-process communication\n\n  example:\n\n* Process makes illegal memory reference\n\n  Event gains attention of the OS.\n\n  OS stops application process immediately, sending it a SIGSEGV signal.\n\n  Signal handler for SIGSEGV signal executes to completion.\n\n  Default signal handler for SIGSEGV signal prints “Segmentation Fault” and exits process.\n\n  ```\n  SIGINT Terminal interrupt\n  SIGKILL Kill process\n  SIGSEGV Invalid memory segment access\n  ```\n\n* Signals can be raised using a few different methods\n\n  ```\n  Keystrokes\n  Commands\n  System calls\n  ```\n\n* Keystrokes\n\n​     **CTRL + C** -> SIGINT\n\n​     Default handler exits process.\n\n​     **CTRL + Z** -> SIGTSTP\n\n​     Default handler suspends process.(进程暂停)\n\n​     **CTRL + \\\\** -> SIGQUIT\n\n​     Default handler exits process\n\n* Sending signals via command\n\n  ```\n   kill -signal pid\n  ```\n\n  Send a signal of type signal to the process with id pid.\n\n  The kill command can send all signals\n\n  e.g.\n\n  ```bash\n  $ kill -2 1234\n  $ kill -INT 1234\n  ```\n\n* System calls\n\n  **kill()**\n\n  Commands the OS to send a signal to the process, must have permission.\n\n  Both processes must have the same user ID.(具有相同的用户id)\n\n  Superuser can send signal to any process(超级用户可以向任何进程发送信号)\n\n  ==Return value==:\n\n  Success: 0\n\n  Error: -1 (errno is set appropriately)\n\n  EINVAL if invalid\n\n  EPERM if no permission\n\n  ESRCH if specified process does not exist\n\n  **raise()**\n\n  Commands the OS to send a signal to current process\n\n  **alarm()**\n\n  Schedule a SIGALRM at some time in future.\n\n  Processing delays and scheduling uncertainties.\n\n  Value of 0 cancels any outstanding alarm request.\n\n  Each process can have only one outstanding alarm.\n\n  Calling alarm before signal is received will cause alarm to be rescheduled.\n\n  \n\n  ### how to handle signal\n\n  **signal()**\n\n  \n\n  ```c\n  #include <signal.h>\n  Void (*signal(int sig, void (*func)(int)))(int);\n  ```\n\n  signal() returns a function which is the previous value of the function set up to handle the signal.\n\n  OR one of these two special values:\n\n  SIG_IGN – Ignore the signal\n\n  SIG_DFL – Restore default behavior\n\n  ```c\n  #include <signal.h>\n  #include <stdio.h>\n  #include <unistd.h>\n  void ouch(int sig) \n  {\n   printf(“OUCH – I got signal %d\\n”, sig);\n   (void) signal(SIGINT, SIG_DFL);\n  }\n  int main()\n  {\n   (void) signal(SIGINT, ouch);\n   while(1)\n   {\n   printf(“Hello World!\\n”);\n   sleep(1);\n   }\n  }\n  ```\n\n  **Waiting for signal**\n\n  **pause()**\n\n  ```c\n  #include <unistd.h>\n  int pause(void);\n  ```\n\n  * Causes program to suspend execution until a signal occurs.\n\n  * When it receives a signal, any established handler is run and execution \n\n    continues as normal.\n\n**Re-entrant Functions**\n\n* That can be interrupted in the middle of execution and then safely called again (“re-entered”) before its previous invocations complete execution.\n\n* Never call a non-reentrant function inside a signal handler, if the function was being ran the behaviour will be changed.\n\n* Example if a global was used as a temporary value, and gets overwritten in \n\n  the signal handler\n\n**Race conditions**\n\n* A flaw in a program whereby the correctness of the program is critically \n\n  dependent on the sequence or timing of other events\n\n* Example: a signal handler and function modifying the same value\n\n* Race conditions Example\n\n  ```c\n  //deposit is running and is interrupted by a signal after copying savings to temp.\n  savings = 5000, value = 2000\n  int savings; // 5000\n  \n  void deposit(int val) // 2000\n  {\n  int temp = savings;\n  ---- Signal\n  temp += val;\n  savings = temp;\n  }\n  void salary(int sig)\n  {\n  savings += 5000; // 10000\n  }\n  ```\n\n**POSIX Signal Handling**\n\n**C90 standard**\n\nsignal() and raise() functions\n\nWorks across all systems (UNIX, Linux, Windows)\n\nBut differently across some systems\n\nBlocked signals during handler execution\n\nReinstall handler after every signal invocation\n\nDoes not provide mechanism to block signals\n\n**POSIX standard**\n\nsigaction() and sigprocmask() functions:\n\nWorks the same across all POSIX-compliant UNIX systems (Linux, Solaris etc) but…\n\nDo not work on non-UNIX systems (e.g. Windows)\n\nProvides mechanism to block signals in general\n\nsigprocmask() is not required to use sigaction()\n\n**sigaction()**\n\n```c\n#include <signal.h>\n\nint sigaction(int sig, const struct sigaction *act, struct sigaction *oact);\n```\n\nstruct sigaction has at least\n\n```c\nvoid (*) (int) sa_handler // function, SIG_DFL, SIG_IGN\nsigset_t sa_mask // signals to block in sa_handler\nint sa_flags // signal action modifiers\n```\n\n\n\n```c\n#include <signal.h>\n#include <unistd.h>\n#include <stdio.h>\nint stop = 0;\nvoid handler(int sig) {\n stop = 1;\n}\nint main() {\n struct sigaction sa;\n sa.sa_flags = 0; // no flags\n sigemptyset(&sa.sa_mask); // clear the mask so no signals are blocked\n sa.sa_handler = handler; // set function pointer for handler\n sigaction(SIGINT, &sa, NULL); // set the handler\n while(!stop) {\n ;\n }\n}\n```\n\n**setjmp & longjmp**\n\n* setjmp and longjmp are two flow control subroutines.\n\n* When setjmp is called, it saves the program state at that point and returns 0.\n\n* When longjmp is called, it returns from the place where the jump is set with the given value.\n\n* If you are jumping from a signal handler, you might need to used **sigsetjmp** and **siglongjmp** instead setjmp and longjmp due to signal mask issues. \n\n```c\n#include <setjmp.h>\n#include <stdlib.h>\n#include <stdio.h>\nint main()\n{\n jmp_buf env;\n int i;\n i = setjmp(env);\n printf(\"i = %d\\n\", i);\n if (i != 0)\n {\n exit(0);\n }\n longjmp(env, 1);\n printf(\"I will never be printed!!\\n\");\n}\n```\n\n`setjmp` 與 `longjmp` 函數可以讓程式往回跳到函數呼叫堆疊中的某個函數中，就像是一種跨函數的 `goto`。\n\n首先使用 `setjmp` 在程式中標示一個目標位置（跳躍的目的地），然後在程式要進行跳躍的地方呼叫 `longjmp` 即可。\n\n```c\n#include <stdio.h>\n#include <setjmp.h>\n\n// 儲存程式跳躍時所需之資訊\njmp_buf jmpbuffer;\n\nint fun_a(int v) {\n  int r = v * 2 - 1;\n  if (r < 0) {\n    // 跳躍至 main 函數\n    longjmp(jmpbuffer, 1);\n  }\n  return r;\n}\nint fun_b(int v) {\n  int r = fun_a(v) + 6;\n  if (r > 10) {\n    // 跳躍至 main 函數\n    longjmp(jmpbuffer, 2);\n  }\n  return r;\n}\nint fun_c(int v) {\n  int r = fun_b(v) * 5 - 21;\n  return r;\n}\nint main() {\n  // 設定跳躍目標位置\n  int jmpVal = setjmp(jmpbuffer);\n  if ( jmpVal == 1 ) {\n    printf(\"fun_a errorn\");\n  } else if ( jmpVal == 2 ) {\n    printf(\"fun_b errorn\");\n  } else {  // jmpVal == 0\n    int x = -5;\n    int result = fun_c(x);\n    printf(\"Result = %dn\", result);\n  }\n  return 0;\n}\n\n```\n\n在 `setjmp` 設定跳躍目標位置時，會需要指定一個特殊的 `jmp_buf` 變數，用來儲存程式跳躍時所需之資訊，而在直接呼叫 `setjmp` 函數時其傳回值為 `0`，若是透過 `longjmp` 跳回這裡時，其傳回值就會是呼叫 `longjmp` 時所指定的值.\n\n\n\n* What if you want to handle a signal multiple times in your program?\n\n* Do not use setjmp() and longjmp().\n\n* setjmp() does not save the signal mask.\n\n* The first SIGSEGV is added to the process' signal mask to prevent subsequent signals interrupting the handler\n\n* When setjmp() pseudo returns, that mask is still there.\n\n*  use sigsetjmp() and siglongjmp()\n\n  ````c\n  int sigsetjmp(sigjmp_buf env, int savemask)\n  void siglongjmp(sigjmp_buf env, int val)\n  ````\n\n  If savemask is set to 1, it saves the signal mask and siglongjmp restores the saved signal mask.\n\n* What is saved in sigjmp_buf?\n\n  **Program Counter**\n\n  Location in the code\n\n  **Stack pointer**\n\n  Locations of local variables\n\n  Return address of called functions\n\n  **Signal Mask** \n\n   If specified\n\n  **Rest of environment (CPU state)**\n\n  Calculations can continue from where they stopped\n\n* What is NOT saved in sigjmp_buf?\n\n  Global variables\n\n  Variables allocated dynamically\n\n  Values of local variables\n\n  Any other global resources\n\n* What does it mean by scanning the memory?\n\n  Simply, you can try to access memory locations in a loop, using pointer dereferencing\n\n  ```c\n  char *p = (char *)0xff13abc1;\n  char a = *p;\n  ```\n\n* How do we know where the process’ address space starts and ends?\n\n  0x0 to 0xffffffff (2^32-1)\n\n  This is organized into pages of 4096 bytes (or other defined size in the assignment)\n\n* How do we check a page’s permissions?\n\n  Try reading/writing to it and see what’s the response from OS.\n\n  If two consecutive pages have the same permissions, they are part of the same “mem_region\"\n\n  When you try to write to memory, write the same content to avoid modifying it\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  ","source":"_posts/Make-and-Signal.md","raw":"---\ntitle: Make and Signal\ndate: 2021-02-02 20:31:28\ntags: os\n---\n\n## Make\n\nhello world in make\n\n```makefile\nhello:\n\techo \"hello world\"\n```\n\nSave this in a file named ‘makefile’. Then navigate to the directory and run the command:\n\n```bash\n$ make hello\n```\n\n<!-- More -->\n\n* Makefile syntax\n\n```makefile\ntarget: prerequisites\n<TAB> recipe\n```\n\n* Make command in shell:\n\n```bash\n$ make target\n```\n\n* Other targets can be used as prerequisites of a target\n\n```makefile\ntarget: other_target target.c\n Recipe_to_create_target\nother_target: other_target.c\n Recipe_to_create_other_target\n```\n\nexample:\n\n```makefile\ncode_file1.o: code_file1.c\n\tgcc -c code_file1.c -o code_file1.o\ncode_file2.o: code_file2.c\n\tgcc -c code_file2.c -o code_file2.o\nmy_app: code_file1.o code_file2.o\n\tgcc -o my_app code_file1.o code_file2.o\nclean:\n\trm *.o my_app\n```\n\n* When make is ran, it looks for the **target** file in the directory. If the target is not found, \n\n  recipe to generate target is ran with all the prerequisites.\n\n* If **target** is found, it checks whether the dependencies have changed since last time. If \n\n  so, changed dependencies are run according to the configuration and the target is \n\n  generated.\n\n* **target** can be different from output filename. In this case, make won't be able to find the \n\nfile and the file will be regenerated regardless of no changes. (Don’t do this when\n\ncompiling)\n\n* By default the first target of the makefile is considered as the default target. If you run \n\n  make with no arguments, the first target is run.\n\n* By convention, the first target is set as **all**. It should have the recipe for the default \n\n  behaviour you expect from make.\n\n* Using **.DEFAULT_GOAL** can override the default behaviour of make\n\n```makefile\n#same behaviour if we use .DEFAULT_GOAL=my_app\nall:my_app \ncode_file1.o: code_file1.c\n\tgcc -c code_file1.c -o code_file1.o\ncode_file2.o: code_file2.c\n\tgcc -c code_file2.c -o code_file2.o\nmy_app: code_file1.o code_file2.o\n\tgcc -o my_app code_file1.o code_file2.o\nclean:\n\trm *.o my_app\n```\n\n\n\n**Phony target** is a target which is not the name of a file. Say we have a target named ‘clean’. If we also have a file named clean, make will not run the recipe for this target.\n\nWe can indicate such targets with **.PHONY** and make will run it regardless of a file.\n\n```makefile\n.PHONY: clean\nclean:\n\trm *.o my_app\n```\n\nYou can define variables in makefile:\n\n```makefile\nOBJECTS=code_file1.o code_file2.o\nmy_app: $(OBJECTS)\n\tgcc -o my_app $(OBJECTS)\n```\n\nYou can use wildcards as well.\n\n### implicit variables\n\nThere are a set of implicit variables defined in make:\n\n```makefile\nCFLAGS\nCC\nCXX\nand etc..\n```\n\nThese variables can be referred without declaring them and the default value will be passed. If needed they can be overridden by declaring them as a regular variable.\n\n```makefile\ncode_file1.o: code_file1.c\n\t$(CC) $(CFLAGS) -c code_file1.c -o code_file1.o\n```\n\n[List of implicit variables](https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html)\n\n### pass command line arguments\n\nWe can pass command line arguments when using make to alter the compilation.\n\n```c\n//main.c\n#include <stdio.h>\nint main()\n{\n\tprintf(\"MY_VAL = %d\\n\", MY_VAL);\n}\n```\n\n```makefile\nmain:main.c\n\tgcc $(CFLAGS) main.c -o main\nclean:\n\trm main\n```\n\n```bash\n$ make CFLAGS=-DMY_VAL=3\n```\n\n```bash\noutput:\nMY_VAL = 3\n```\n\n如何在程序中确定make指令有没有指定MY_VAL\n\n```c\n#ifdef MY_VAL\n...\n#else\n...\n#endif\n```\n\n\n\n* It won’t compile without the argument.\n\n## Signals\n\nSignals are events created by UNIX and Linux systems and are a method for the OS to communicate with a process. They can be acted upon or ignored.\n\n* A method of interprocess communication\n* Are the result of some condition\n* Allow the process receiving the signal to take an action through a signal handler\n\nProvide a process a notification of an event.\n\n* Event gains attention of the OS.\n\n* OS stops the application process immediately, sending it a signal.\n\n* Signal handler is executed.\n\n* Application process resumes where it left of.\n\n**Raise**\n\nThe generation of a signal upon a process.\n\n**Catch**\n\nThe reception of a signal by that process.\n\n**Handle**\n\nHow the program reacts to the signal.\n\n#### Conditions for signals\n\n* Error conditions such as：\n\n  Memory segment violations\n\n  Floating-point processor errors\n\n  Illegal instructions\n\n* Explicitly sent from one process to another as a method of Inter-process communication\n\n  example:\n\n* Process makes illegal memory reference\n\n  Event gains attention of the OS.\n\n  OS stops application process immediately, sending it a SIGSEGV signal.\n\n  Signal handler for SIGSEGV signal executes to completion.\n\n  Default signal handler for SIGSEGV signal prints “Segmentation Fault” and exits process.\n\n  ```\n  SIGINT Terminal interrupt\n  SIGKILL Kill process\n  SIGSEGV Invalid memory segment access\n  ```\n\n* Signals can be raised using a few different methods\n\n  ```\n  Keystrokes\n  Commands\n  System calls\n  ```\n\n* Keystrokes\n\n​     **CTRL + C** -> SIGINT\n\n​     Default handler exits process.\n\n​     **CTRL + Z** -> SIGTSTP\n\n​     Default handler suspends process.(进程暂停)\n\n​     **CTRL + \\\\** -> SIGQUIT\n\n​     Default handler exits process\n\n* Sending signals via command\n\n  ```\n   kill -signal pid\n  ```\n\n  Send a signal of type signal to the process with id pid.\n\n  The kill command can send all signals\n\n  e.g.\n\n  ```bash\n  $ kill -2 1234\n  $ kill -INT 1234\n  ```\n\n* System calls\n\n  **kill()**\n\n  Commands the OS to send a signal to the process, must have permission.\n\n  Both processes must have the same user ID.(具有相同的用户id)\n\n  Superuser can send signal to any process(超级用户可以向任何进程发送信号)\n\n  ==Return value==:\n\n  Success: 0\n\n  Error: -1 (errno is set appropriately)\n\n  EINVAL if invalid\n\n  EPERM if no permission\n\n  ESRCH if specified process does not exist\n\n  **raise()**\n\n  Commands the OS to send a signal to current process\n\n  **alarm()**\n\n  Schedule a SIGALRM at some time in future.\n\n  Processing delays and scheduling uncertainties.\n\n  Value of 0 cancels any outstanding alarm request.\n\n  Each process can have only one outstanding alarm.\n\n  Calling alarm before signal is received will cause alarm to be rescheduled.\n\n  \n\n  ### how to handle signal\n\n  **signal()**\n\n  \n\n  ```c\n  #include <signal.h>\n  Void (*signal(int sig, void (*func)(int)))(int);\n  ```\n\n  signal() returns a function which is the previous value of the function set up to handle the signal.\n\n  OR one of these two special values:\n\n  SIG_IGN – Ignore the signal\n\n  SIG_DFL – Restore default behavior\n\n  ```c\n  #include <signal.h>\n  #include <stdio.h>\n  #include <unistd.h>\n  void ouch(int sig) \n  {\n   printf(“OUCH – I got signal %d\\n”, sig);\n   (void) signal(SIGINT, SIG_DFL);\n  }\n  int main()\n  {\n   (void) signal(SIGINT, ouch);\n   while(1)\n   {\n   printf(“Hello World!\\n”);\n   sleep(1);\n   }\n  }\n  ```\n\n  **Waiting for signal**\n\n  **pause()**\n\n  ```c\n  #include <unistd.h>\n  int pause(void);\n  ```\n\n  * Causes program to suspend execution until a signal occurs.\n\n  * When it receives a signal, any established handler is run and execution \n\n    continues as normal.\n\n**Re-entrant Functions**\n\n* That can be interrupted in the middle of execution and then safely called again (“re-entered”) before its previous invocations complete execution.\n\n* Never call a non-reentrant function inside a signal handler, if the function was being ran the behaviour will be changed.\n\n* Example if a global was used as a temporary value, and gets overwritten in \n\n  the signal handler\n\n**Race conditions**\n\n* A flaw in a program whereby the correctness of the program is critically \n\n  dependent on the sequence or timing of other events\n\n* Example: a signal handler and function modifying the same value\n\n* Race conditions Example\n\n  ```c\n  //deposit is running and is interrupted by a signal after copying savings to temp.\n  savings = 5000, value = 2000\n  int savings; // 5000\n  \n  void deposit(int val) // 2000\n  {\n  int temp = savings;\n  ---- Signal\n  temp += val;\n  savings = temp;\n  }\n  void salary(int sig)\n  {\n  savings += 5000; // 10000\n  }\n  ```\n\n**POSIX Signal Handling**\n\n**C90 standard**\n\nsignal() and raise() functions\n\nWorks across all systems (UNIX, Linux, Windows)\n\nBut differently across some systems\n\nBlocked signals during handler execution\n\nReinstall handler after every signal invocation\n\nDoes not provide mechanism to block signals\n\n**POSIX standard**\n\nsigaction() and sigprocmask() functions:\n\nWorks the same across all POSIX-compliant UNIX systems (Linux, Solaris etc) but…\n\nDo not work on non-UNIX systems (e.g. Windows)\n\nProvides mechanism to block signals in general\n\nsigprocmask() is not required to use sigaction()\n\n**sigaction()**\n\n```c\n#include <signal.h>\n\nint sigaction(int sig, const struct sigaction *act, struct sigaction *oact);\n```\n\nstruct sigaction has at least\n\n```c\nvoid (*) (int) sa_handler // function, SIG_DFL, SIG_IGN\nsigset_t sa_mask // signals to block in sa_handler\nint sa_flags // signal action modifiers\n```\n\n\n\n```c\n#include <signal.h>\n#include <unistd.h>\n#include <stdio.h>\nint stop = 0;\nvoid handler(int sig) {\n stop = 1;\n}\nint main() {\n struct sigaction sa;\n sa.sa_flags = 0; // no flags\n sigemptyset(&sa.sa_mask); // clear the mask so no signals are blocked\n sa.sa_handler = handler; // set function pointer for handler\n sigaction(SIGINT, &sa, NULL); // set the handler\n while(!stop) {\n ;\n }\n}\n```\n\n**setjmp & longjmp**\n\n* setjmp and longjmp are two flow control subroutines.\n\n* When setjmp is called, it saves the program state at that point and returns 0.\n\n* When longjmp is called, it returns from the place where the jump is set with the given value.\n\n* If you are jumping from a signal handler, you might need to used **sigsetjmp** and **siglongjmp** instead setjmp and longjmp due to signal mask issues. \n\n```c\n#include <setjmp.h>\n#include <stdlib.h>\n#include <stdio.h>\nint main()\n{\n jmp_buf env;\n int i;\n i = setjmp(env);\n printf(\"i = %d\\n\", i);\n if (i != 0)\n {\n exit(0);\n }\n longjmp(env, 1);\n printf(\"I will never be printed!!\\n\");\n}\n```\n\n`setjmp` 與 `longjmp` 函數可以讓程式往回跳到函數呼叫堆疊中的某個函數中，就像是一種跨函數的 `goto`。\n\n首先使用 `setjmp` 在程式中標示一個目標位置（跳躍的目的地），然後在程式要進行跳躍的地方呼叫 `longjmp` 即可。\n\n```c\n#include <stdio.h>\n#include <setjmp.h>\n\n// 儲存程式跳躍時所需之資訊\njmp_buf jmpbuffer;\n\nint fun_a(int v) {\n  int r = v * 2 - 1;\n  if (r < 0) {\n    // 跳躍至 main 函數\n    longjmp(jmpbuffer, 1);\n  }\n  return r;\n}\nint fun_b(int v) {\n  int r = fun_a(v) + 6;\n  if (r > 10) {\n    // 跳躍至 main 函數\n    longjmp(jmpbuffer, 2);\n  }\n  return r;\n}\nint fun_c(int v) {\n  int r = fun_b(v) * 5 - 21;\n  return r;\n}\nint main() {\n  // 設定跳躍目標位置\n  int jmpVal = setjmp(jmpbuffer);\n  if ( jmpVal == 1 ) {\n    printf(\"fun_a errorn\");\n  } else if ( jmpVal == 2 ) {\n    printf(\"fun_b errorn\");\n  } else {  // jmpVal == 0\n    int x = -5;\n    int result = fun_c(x);\n    printf(\"Result = %dn\", result);\n  }\n  return 0;\n}\n\n```\n\n在 `setjmp` 設定跳躍目標位置時，會需要指定一個特殊的 `jmp_buf` 變數，用來儲存程式跳躍時所需之資訊，而在直接呼叫 `setjmp` 函數時其傳回值為 `0`，若是透過 `longjmp` 跳回這裡時，其傳回值就會是呼叫 `longjmp` 時所指定的值.\n\n\n\n* What if you want to handle a signal multiple times in your program?\n\n* Do not use setjmp() and longjmp().\n\n* setjmp() does not save the signal mask.\n\n* The first SIGSEGV is added to the process' signal mask to prevent subsequent signals interrupting the handler\n\n* When setjmp() pseudo returns, that mask is still there.\n\n*  use sigsetjmp() and siglongjmp()\n\n  ````c\n  int sigsetjmp(sigjmp_buf env, int savemask)\n  void siglongjmp(sigjmp_buf env, int val)\n  ````\n\n  If savemask is set to 1, it saves the signal mask and siglongjmp restores the saved signal mask.\n\n* What is saved in sigjmp_buf?\n\n  **Program Counter**\n\n  Location in the code\n\n  **Stack pointer**\n\n  Locations of local variables\n\n  Return address of called functions\n\n  **Signal Mask** \n\n   If specified\n\n  **Rest of environment (CPU state)**\n\n  Calculations can continue from where they stopped\n\n* What is NOT saved in sigjmp_buf?\n\n  Global variables\n\n  Variables allocated dynamically\n\n  Values of local variables\n\n  Any other global resources\n\n* What does it mean by scanning the memory?\n\n  Simply, you can try to access memory locations in a loop, using pointer dereferencing\n\n  ```c\n  char *p = (char *)0xff13abc1;\n  char a = *p;\n  ```\n\n* How do we know where the process’ address space starts and ends?\n\n  0x0 to 0xffffffff (2^32-1)\n\n  This is organized into pages of 4096 bytes (or other defined size in the assignment)\n\n* How do we check a page’s permissions?\n\n  Try reading/writing to it and see what’s the response from OS.\n\n  If two consecutive pages have the same permissions, they are part of the same “mem_region\"\n\n  When you try to write to memory, write the same content to avoid modifying it\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n  ","slug":"Make-and-Signal","published":1,"updated":"2021-04-07T05:55:27.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn71ze8f0000ukuj6qo973p1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"Make\"><a href=\"#Make\" class=\"headerlink\" title=\"Make\"></a>Make</h2><p>hello world in make</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">hello:</span></span><br><span class=\"line\">\techo <span class=\"string\">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Save this in a file named ‘makefile’. Then navigate to the directory and run the command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make hello</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>Makefile syntax</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">target: prerequisites</span></span><br><span class=\"line\">&lt;TAB&gt; recipe</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Make command in shell:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Other targets can be used as prerequisites of a target</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">target: other_target target.c</span></span><br><span class=\"line\"> Recipe_to_create_target</span><br><span class=\"line\"><span class=\"section\">other_target: other_target.c</span></span><br><span class=\"line\"> Recipe_to_create_other_target</span><br></pre></td></tr></table></figure>\n<p>example:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">code_file1.o: code_file1.c</span></span><br><span class=\"line\">\tgcc -c code_file1.c -o code_file1.o</span><br><span class=\"line\"><span class=\"section\">code_file2.o: code_file2.c</span></span><br><span class=\"line\">\tgcc -c code_file2.c -o code_file2.o</span><br><span class=\"line\"><span class=\"section\">my_app: code_file1.o code_file2.o</span></span><br><span class=\"line\">\tgcc -o my_app code_file1.o code_file2.o</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm *.o my_app</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>When make is ran, it looks for the <strong>target</strong> file in the directory. If the target is not found, </p>\n<p>recipe to generate target is ran with all the prerequisites.</p>\n</li>\n<li><p>If <strong>target</strong> is found, it checks whether the dependencies have changed since last time. If </p>\n<p>so, changed dependencies are run according to the configuration and the target is </p>\n<p>generated.</p>\n</li>\n<li><p><strong>target</strong> can be different from output filename. In this case, make won’t be able to find the </p>\n</li>\n</ul>\n<p>file and the file will be regenerated regardless of no changes. (Don’t do this when</p>\n<p>compiling)</p>\n<ul>\n<li><p>By default the first target of the makefile is considered as the default target. If you run </p>\n<p>make with no arguments, the first target is run.</p>\n</li>\n<li><p>By convention, the first target is set as <strong>all</strong>. It should have the recipe for the default </p>\n<p>behaviour you expect from make.</p>\n</li>\n<li><p>Using <strong>.DEFAULT_GOAL</strong> can override the default behaviour of make</p>\n</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#same behaviour if we use .DEFAULT_GOAL=my_app</span></span><br><span class=\"line\"><span class=\"section\">all:my_app </span></span><br><span class=\"line\"><span class=\"section\">code_file1.o: code_file1.c</span></span><br><span class=\"line\">\tgcc -c code_file1.c -o code_file1.o</span><br><span class=\"line\"><span class=\"section\">code_file2.o: code_file2.c</span></span><br><span class=\"line\">\tgcc -c code_file2.c -o code_file2.o</span><br><span class=\"line\"><span class=\"section\">my_app: code_file1.o code_file2.o</span></span><br><span class=\"line\">\tgcc -o my_app code_file1.o code_file2.o</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm *.o my_app</span><br></pre></td></tr></table></figure>\n<p><strong>Phony target</strong> is a target which is not the name of a file. Say we have a target named ‘clean’. If we also have a file named clean, make will not run the recipe for this target.</p>\n<p>We can indicate such targets with <strong>.PHONY</strong> and make will run it regardless of a file.</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">.PHONY</span>: clean</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm *.o my_app</span><br></pre></td></tr></table></figure>\n<p>You can define variables in makefile:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJECTS=code_file1.o code_file2.o</span><br><span class=\"line\"><span class=\"section\">my_app: <span class=\"variable\">$(OBJECTS)</span></span></span><br><span class=\"line\">\tgcc -o my_app <span class=\"variable\">$(OBJECTS)</span></span><br></pre></td></tr></table></figure>\n<p>You can use wildcards as well.</p>\n<h3 id=\"implicit-variables\"><a href=\"#implicit-variables\" class=\"headerlink\" title=\"implicit variables\"></a>implicit variables</h3><p>There are a set of implicit variables defined in make:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFLAGS</span><br><span class=\"line\">CC</span><br><span class=\"line\">CXX</span><br><span class=\"line\">and etc..</span><br></pre></td></tr></table></figure>\n<p>These variables can be referred without declaring them and the default value will be passed. If needed they can be overridden by declaring them as a regular variable.</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">code_file1.o: code_file1.c</span></span><br><span class=\"line\">\t<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c code_file1.c -o code_file1.o</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html\">List of implicit variables</a></p>\n<h3 id=\"pass-command-line-arguments\"><a href=\"#pass-command-line-arguments\" class=\"headerlink\" title=\"pass command line arguments\"></a>pass command line arguments</h3><p>We can pass command line arguments when using make to alter the compilation.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;MY_VAL = %d\\n&quot;</span>, MY_VAL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">main:main.c</span></span><br><span class=\"line\">\tgcc <span class=\"variable\">$(CFLAGS)</span> main.c -o main</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm main</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make CFLAGS=-DMY_VAL=3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output:</span><br><span class=\"line\">MY_VAL = 3</span><br></pre></td></tr></table></figure>\n<p>如何在程序中确定make指令有没有指定MY_VAL</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MY_VAL</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>It won’t compile without the argument.</li>\n</ul>\n<h2 id=\"Signals\"><a href=\"#Signals\" class=\"headerlink\" title=\"Signals\"></a>Signals</h2><p>Signals are events created by UNIX and Linux systems and are a method for the OS to communicate with a process. They can be acted upon or ignored.</p>\n<ul>\n<li>A method of interprocess communication</li>\n<li>Are the result of some condition</li>\n<li>Allow the process receiving the signal to take an action through a signal handler</li>\n</ul>\n<p>Provide a process a notification of an event.</p>\n<ul>\n<li><p>Event gains attention of the OS.</p>\n</li>\n<li><p>OS stops the application process immediately, sending it a signal.</p>\n</li>\n<li><p>Signal handler is executed.</p>\n</li>\n<li><p>Application process resumes where it left of.</p>\n</li>\n</ul>\n<p><strong>Raise</strong></p>\n<p>The generation of a signal upon a process.</p>\n<p><strong>Catch</strong></p>\n<p>The reception of a signal by that process.</p>\n<p><strong>Handle</strong></p>\n<p>How the program reacts to the signal.</p>\n<h4 id=\"Conditions-for-signals\"><a href=\"#Conditions-for-signals\" class=\"headerlink\" title=\"Conditions for signals\"></a>Conditions for signals</h4><ul>\n<li><p>Error conditions such as：</p>\n<p>Memory segment violations</p>\n<p>Floating-point processor errors</p>\n<p>Illegal instructions</p>\n</li>\n<li><p>Explicitly sent from one process to another as a method of Inter-process communication</p>\n<p>example:</p>\n</li>\n<li><p>Process makes illegal memory reference</p>\n<p>Event gains attention of the OS.</p>\n<p>OS stops application process immediately, sending it a SIGSEGV signal.</p>\n<p>Signal handler for SIGSEGV signal executes to completion.</p>\n<p>Default signal handler for SIGSEGV signal prints “Segmentation Fault” and exits process.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SIGINT Terminal interrupt</span><br><span class=\"line\">SIGKILL <span class=\"keyword\">Kill</span> process</span><br><span class=\"line\">SIGSEGV Invalid <span class=\"keyword\">memory</span> <span class=\"keyword\">segment</span> <span class=\"keyword\">access</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Signals can be raised using a few different methods</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Keystrokes</span></span><br><span class=\"line\"><span class=\"attribute\">Commands</span></span><br><span class=\"line\"><span class=\"attribute\">System calls</span></span><br></pre></td></tr></table></figure></li>\n<li>Keystrokes</li>\n</ul>\n<p>​     <strong>CTRL + C</strong> -&gt; SIGINT</p>\n<p>​     Default handler exits process.</p>\n<p>​     <strong>CTRL + Z</strong> -&gt; SIGTSTP</p>\n<p>​     Default handler suspends process.(进程暂停)</p>\n<p>​     <strong>CTRL + \\</strong> -&gt; SIGQUIT</p>\n<p>​     Default handler exits process</p>\n<ul>\n<li><p>Sending signals via command</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -<span class=\"keyword\">signal</span><span class=\"string\"> pid</span></span><br></pre></td></tr></table></figure>\n<p>Send a signal of type signal to the process with id pid.</p>\n<p>The kill command can send all signals</p>\n<p>e.g.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -2 1234</span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> -INT 1234</span><br></pre></td></tr></table></figure></li>\n<li><p>System calls</p>\n<p><strong>kill()</strong></p>\n<p>Commands the OS to send a signal to the process, must have permission.</p>\n<p>Both processes must have the same user ID.(具有相同的用户id)</p>\n<p>Superuser can send signal to any process(超级用户可以向任何进程发送信号)</p>\n<p>==Return value==:</p>\n<p>Success: 0</p>\n<p>Error: -1 (errno is set appropriately)</p>\n<p>EINVAL if invalid</p>\n<p>EPERM if no permission</p>\n<p>ESRCH if specified process does not exist</p>\n<p><strong>raise()</strong></p>\n<p>Commands the OS to send a signal to current process</p>\n<p><strong>alarm()</strong></p>\n<p>Schedule a SIGALRM at some time in future.</p>\n<p>Processing delays and scheduling uncertainties.</p>\n<p>Value of 0 cancels any outstanding alarm request.</p>\n<p>Each process can have only one outstanding alarm.</p>\n<p>Calling alarm before signal is received will cause alarm to be rescheduled.</p>\n</li>\n</ul>\n<h3 id=\"how-to-handle-signal\"><a href=\"#how-to-handle-signal\" class=\"headerlink\" title=\"how to handle signal\"></a>how to handle signal</h3><p>  <strong>signal()</strong></p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\">Void (*signal(<span class=\"keyword\">int</span> sig, <span class=\"keyword\">void</span> (*func)(<span class=\"keyword\">int</span>)))(<span class=\"keyword\">int</span>);</span><br></pre></td></tr></table></figure>\n<p>  signal() returns a function which is the previous value of the function set up to handle the signal.</p>\n<p>  OR one of these two special values:</p>\n<p>  SIG_IGN – Ignore the signal</p>\n<p>  SIG_DFL – Restore default behavior</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ouch</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(“OUCH – I got signal %d\\n”, sig);</span><br><span class=\"line\"> (<span class=\"keyword\">void</span>) signal(SIGINT, SIG_DFL);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> (<span class=\"keyword\">void</span>) signal(SIGINT, ouch);</span><br><span class=\"line\"> <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(“Hello World!\\n”);</span><br><span class=\"line\"> sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <strong>Waiting for signal</strong></p>\n<p>  <strong>pause()</strong></p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pause</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Causes program to suspend execution until a signal occurs.</p>\n</li>\n<li><p>When it receives a signal, any established handler is run and execution </p>\n<p>continues as normal.</p>\n</li>\n</ul>\n<p><strong>Re-entrant Functions</strong></p>\n<ul>\n<li><p>That can be interrupted in the middle of execution and then safely called again (“re-entered”) before its previous invocations complete execution.</p>\n</li>\n<li><p>Never call a non-reentrant function inside a signal handler, if the function was being ran the behaviour will be changed.</p>\n</li>\n<li><p>Example if a global was used as a temporary value, and gets overwritten in </p>\n<p>the signal handler</p>\n</li>\n</ul>\n<p><strong>Race conditions</strong></p>\n<ul>\n<li><p>A flaw in a program whereby the correctness of the program is critically </p>\n<p>dependent on the sequence or timing of other events</p>\n</li>\n<li><p>Example: a signal handler and function modifying the same value</p>\n</li>\n<li><p>Race conditions Example</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//deposit is running and is interrupted by a signal after copying savings to temp.</span></span><br><span class=\"line\">savings = <span class=\"number\">5000</span>, value = <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> savings; <span class=\"comment\">// 5000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deposit</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> <span class=\"comment\">// 2000</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> temp = savings;</span><br><span class=\"line\">---- Signal</span><br><span class=\"line\">temp += val;</span><br><span class=\"line\">savings = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">salary</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">savings += <span class=\"number\">5000</span>; <span class=\"comment\">// 10000</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>POSIX Signal Handling</strong></p>\n</li>\n</ul>\n<p><strong>C90 standard</strong></p>\n<p>signal() and raise() functions</p>\n<p>Works across all systems (UNIX, Linux, Windows)</p>\n<p>But differently across some systems</p>\n<p>Blocked signals during handler execution</p>\n<p>Reinstall handler after every signal invocation</p>\n<p>Does not provide mechanism to block signals</p>\n<p><strong>POSIX standard</strong></p>\n<p>sigaction() and sigprocmask() functions:</p>\n<p>Works the same across all POSIX-compliant UNIX systems (Linux, Solaris etc) but…</p>\n<p>Do not work on non-UNIX systems (e.g. Windows)</p>\n<p>Provides mechanism to block signals in general</p>\n<p>sigprocmask() is not required to use sigaction()</p>\n<p><strong>sigaction()</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigaction</span><span class=\"params\">(<span class=\"keyword\">int</span> sig, <span class=\"keyword\">const</span> struct sigaction *act, struct sigaction *oact)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>struct sigaction has at least</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (*) (<span class=\"keyword\">int</span>) sa_handler <span class=\"comment\">// function, SIG_DFL, SIG_IGN</span></span><br><span class=\"line\"><span class=\"keyword\">sigset_t</span> sa_mask <span class=\"comment\">// signals to block in sa_handler</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sa_flags <span class=\"comment\">// signal action modifiers</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> stop = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handler</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\"> stop = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">sa</span>;</span></span><br><span class=\"line\"> sa.sa_flags = <span class=\"number\">0</span>; <span class=\"comment\">// no flags</span></span><br><span class=\"line\"> sigemptyset(&amp;sa.sa_mask); <span class=\"comment\">// clear the mask so no signals are blocked</span></span><br><span class=\"line\"> sa.sa_handler = handler; <span class=\"comment\">// set function pointer for handler</span></span><br><span class=\"line\"> sigaction(SIGINT, &amp;sa, <span class=\"literal\">NULL</span>); <span class=\"comment\">// set the handler</span></span><br><span class=\"line\"> <span class=\"keyword\">while</span>(!stop) &#123;</span><br><span class=\"line\"> ;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>setjmp &amp; longjmp</strong></p>\n<ul>\n<li><p>setjmp and longjmp are two flow control subroutines.</p>\n</li>\n<li><p>When setjmp is called, it saves the program state at that point and returns 0.</p>\n</li>\n<li><p>When longjmp is called, it returns from the place where the jump is set with the given value.</p>\n</li>\n<li><p>If you are jumping from a signal handler, you might need to used <strong>sigsetjmp</strong> and <strong>siglongjmp</strong> instead setjmp and longjmp due to signal mask issues. </p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;setjmp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> jmp_buf env;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"> i = setjmp(env);</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;i = %d\\n&quot;</span>, i);</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> longjmp(env, <span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I will never be printed!!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>setjmp</code> 與 <code>longjmp</code> 函數可以讓程式往回跳到函數呼叫堆疊中的某個函數中，就像是一種跨函數的 <code>goto</code>。</p>\n<p>首先使用 <code>setjmp</code> 在程式中標示一個目標位置（跳躍的目的地），然後在程式要進行跳躍的地方呼叫 <code>longjmp</code> 即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;setjmp.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 儲存程式跳躍時所需之資訊</span></span><br><span class=\"line\">jmp_buf jmpbuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun_a</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r = v * <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跳躍至 main 函數</span></span><br><span class=\"line\">    longjmp(jmpbuffer, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun_b</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r = fun_a(v) + <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跳躍至 main 函數</span></span><br><span class=\"line\">    longjmp(jmpbuffer, <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun_c</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r = fun_b(v) * <span class=\"number\">5</span> - <span class=\"number\">21</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 設定跳躍目標位置</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> jmpVal = setjmp(jmpbuffer);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( jmpVal == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fun_a errorn&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( jmpVal == <span class=\"number\">2</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fun_b errorn&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// jmpVal == 0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">-5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = fun_c(x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Result = %dn&quot;</span>, result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 <code>setjmp</code> 設定跳躍目標位置時，會需要指定一個特殊的 <code>jmp_buf</code> 變數，用來儲存程式跳躍時所需之資訊，而在直接呼叫 <code>setjmp</code> 函數時其傳回值為 <code>0</code>，若是透過 <code>longjmp</code> 跳回這裡時，其傳回值就會是呼叫 <code>longjmp</code> 時所指定的值.</p>\n<ul>\n<li><p>What if you want to handle a signal multiple times in your program?</p>\n</li>\n<li><p>Do not use setjmp() and longjmp().</p>\n</li>\n<li><p>setjmp() does not save the signal mask.</p>\n</li>\n<li><p>The first SIGSEGV is added to the process’ signal mask to prevent subsequent signals interrupting the handler</p>\n</li>\n<li><p>When setjmp() pseudo returns, that mask is still there.</p>\n</li>\n<li><p>use sigsetjmp() and siglongjmp()</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigsetjmp</span><span class=\"params\">(sigjmp_buf env, <span class=\"keyword\">int</span> savemask)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">siglongjmp</span><span class=\"params\">(sigjmp_buf env, <span class=\"keyword\">int</span> val)</span></span></span><br></pre></td></tr></table></figure>\n<p>If savemask is set to 1, it saves the signal mask and siglongjmp restores the saved signal mask.</p>\n</li>\n<li><p>What is saved in sigjmp_buf?</p>\n<p><strong>Program Counter</strong></p>\n<p>Location in the code</p>\n<p><strong>Stack pointer</strong></p>\n<p>Locations of local variables</p>\n<p>Return address of called functions</p>\n<p><strong>Signal Mask</strong> </p>\n<p> If specified</p>\n<p><strong>Rest of environment (CPU state)</strong></p>\n<p>Calculations can continue from where they stopped</p>\n</li>\n<li><p>What is NOT saved in sigjmp_buf?</p>\n<p>Global variables</p>\n<p>Variables allocated dynamically</p>\n<p>Values of local variables</p>\n<p>Any other global resources</p>\n</li>\n<li><p>What does it mean by scanning the memory?</p>\n<p>Simply, you can try to access memory locations in a loop, using pointer dereferencing</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *p = (<span class=\"keyword\">char</span> *)<span class=\"number\">0xff13abc1</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a = *p;</span><br></pre></td></tr></table></figure></li>\n<li><p>How do we know where the process’ address space starts and ends?</p>\n<p>0x0 to 0xffffffff (2^32-1)</p>\n<p>This is organized into pages of 4096 bytes (or other defined size in the assignment)</p>\n</li>\n<li><p>How do we check a page’s permissions?</p>\n<p>Try reading/writing to it and see what’s the response from OS.</p>\n<p>If two consecutive pages have the same permissions, they are part of the same “mem_region”</p>\n<p>When you try to write to memory, write the same content to avoid modifying it</p>\n</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<h2 id=\"Make\"><a href=\"#Make\" class=\"headerlink\" title=\"Make\"></a>Make</h2><p>hello world in make</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">hello:</span></span><br><span class=\"line\">\techo <span class=\"string\">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Save this in a file named ‘makefile’. Then navigate to the directory and run the command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make hello</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>Makefile syntax</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">target: prerequisites</span></span><br><span class=\"line\">&lt;TAB&gt; recipe</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Make command in shell:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Other targets can be used as prerequisites of a target</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">target: other_target target.c</span></span><br><span class=\"line\"> Recipe_to_create_target</span><br><span class=\"line\"><span class=\"section\">other_target: other_target.c</span></span><br><span class=\"line\"> Recipe_to_create_other_target</span><br></pre></td></tr></table></figure>\n<p>example:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">code_file1.o: code_file1.c</span></span><br><span class=\"line\">\tgcc -c code_file1.c -o code_file1.o</span><br><span class=\"line\"><span class=\"section\">code_file2.o: code_file2.c</span></span><br><span class=\"line\">\tgcc -c code_file2.c -o code_file2.o</span><br><span class=\"line\"><span class=\"section\">my_app: code_file1.o code_file2.o</span></span><br><span class=\"line\">\tgcc -o my_app code_file1.o code_file2.o</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm *.o my_app</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>When make is ran, it looks for the <strong>target</strong> file in the directory. If the target is not found, </p>\n<p>recipe to generate target is ran with all the prerequisites.</p>\n</li>\n<li><p>If <strong>target</strong> is found, it checks whether the dependencies have changed since last time. If </p>\n<p>so, changed dependencies are run according to the configuration and the target is </p>\n<p>generated.</p>\n</li>\n<li><p><strong>target</strong> can be different from output filename. In this case, make won’t be able to find the </p>\n</li>\n</ul>\n<p>file and the file will be regenerated regardless of no changes. (Don’t do this when</p>\n<p>compiling)</p>\n<ul>\n<li><p>By default the first target of the makefile is considered as the default target. If you run </p>\n<p>make with no arguments, the first target is run.</p>\n</li>\n<li><p>By convention, the first target is set as <strong>all</strong>. It should have the recipe for the default </p>\n<p>behaviour you expect from make.</p>\n</li>\n<li><p>Using <strong>.DEFAULT_GOAL</strong> can override the default behaviour of make</p>\n</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#same behaviour if we use .DEFAULT_GOAL=my_app</span></span><br><span class=\"line\"><span class=\"section\">all:my_app </span></span><br><span class=\"line\"><span class=\"section\">code_file1.o: code_file1.c</span></span><br><span class=\"line\">\tgcc -c code_file1.c -o code_file1.o</span><br><span class=\"line\"><span class=\"section\">code_file2.o: code_file2.c</span></span><br><span class=\"line\">\tgcc -c code_file2.c -o code_file2.o</span><br><span class=\"line\"><span class=\"section\">my_app: code_file1.o code_file2.o</span></span><br><span class=\"line\">\tgcc -o my_app code_file1.o code_file2.o</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm *.o my_app</span><br></pre></td></tr></table></figure>\n<p><strong>Phony target</strong> is a target which is not the name of a file. Say we have a target named ‘clean’. If we also have a file named clean, make will not run the recipe for this target.</p>\n<p>We can indicate such targets with <strong>.PHONY</strong> and make will run it regardless of a file.</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">.PHONY</span>: clean</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm *.o my_app</span><br></pre></td></tr></table></figure>\n<p>You can define variables in makefile:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJECTS=code_file1.o code_file2.o</span><br><span class=\"line\"><span class=\"section\">my_app: <span class=\"variable\">$(OBJECTS)</span></span></span><br><span class=\"line\">\tgcc -o my_app <span class=\"variable\">$(OBJECTS)</span></span><br></pre></td></tr></table></figure>\n<p>You can use wildcards as well.</p>\n<h3 id=\"implicit-variables\"><a href=\"#implicit-variables\" class=\"headerlink\" title=\"implicit variables\"></a>implicit variables</h3><p>There are a set of implicit variables defined in make:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CFLAGS</span><br><span class=\"line\">CC</span><br><span class=\"line\">CXX</span><br><span class=\"line\">and etc..</span><br></pre></td></tr></table></figure>\n<p>These variables can be referred without declaring them and the default value will be passed. If needed they can be overridden by declaring them as a regular variable.</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">code_file1.o: code_file1.c</span></span><br><span class=\"line\">\t<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c code_file1.c -o code_file1.o</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html\">List of implicit variables</a></p>\n<h3 id=\"pass-command-line-arguments\"><a href=\"#pass-command-line-arguments\" class=\"headerlink\" title=\"pass command line arguments\"></a>pass command line arguments</h3><p>We can pass command line arguments when using make to alter the compilation.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;MY_VAL = %d\\n&quot;</span>, MY_VAL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">main:main.c</span></span><br><span class=\"line\">\tgcc <span class=\"variable\">$(CFLAGS)</span> main.c -o main</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\trm main</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make CFLAGS=-DMY_VAL=3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output:</span><br><span class=\"line\">MY_VAL = 3</span><br></pre></td></tr></table></figure>\n<p>如何在程序中确定make指令有没有指定MY_VAL</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> MY_VAL</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>It won’t compile without the argument.</li>\n</ul>\n<h2 id=\"Signals\"><a href=\"#Signals\" class=\"headerlink\" title=\"Signals\"></a>Signals</h2><p>Signals are events created by UNIX and Linux systems and are a method for the OS to communicate with a process. They can be acted upon or ignored.</p>\n<ul>\n<li>A method of interprocess communication</li>\n<li>Are the result of some condition</li>\n<li>Allow the process receiving the signal to take an action through a signal handler</li>\n</ul>\n<p>Provide a process a notification of an event.</p>\n<ul>\n<li><p>Event gains attention of the OS.</p>\n</li>\n<li><p>OS stops the application process immediately, sending it a signal.</p>\n</li>\n<li><p>Signal handler is executed.</p>\n</li>\n<li><p>Application process resumes where it left of.</p>\n</li>\n</ul>\n<p><strong>Raise</strong></p>\n<p>The generation of a signal upon a process.</p>\n<p><strong>Catch</strong></p>\n<p>The reception of a signal by that process.</p>\n<p><strong>Handle</strong></p>\n<p>How the program reacts to the signal.</p>\n<h4 id=\"Conditions-for-signals\"><a href=\"#Conditions-for-signals\" class=\"headerlink\" title=\"Conditions for signals\"></a>Conditions for signals</h4><ul>\n<li><p>Error conditions such as：</p>\n<p>Memory segment violations</p>\n<p>Floating-point processor errors</p>\n<p>Illegal instructions</p>\n</li>\n<li><p>Explicitly sent from one process to another as a method of Inter-process communication</p>\n<p>example:</p>\n</li>\n<li><p>Process makes illegal memory reference</p>\n<p>Event gains attention of the OS.</p>\n<p>OS stops application process immediately, sending it a SIGSEGV signal.</p>\n<p>Signal handler for SIGSEGV signal executes to completion.</p>\n<p>Default signal handler for SIGSEGV signal prints “Segmentation Fault” and exits process.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SIGINT Terminal interrupt</span><br><span class=\"line\">SIGKILL <span class=\"keyword\">Kill</span> process</span><br><span class=\"line\">SIGSEGV Invalid <span class=\"keyword\">memory</span> <span class=\"keyword\">segment</span> <span class=\"keyword\">access</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Signals can be raised using a few different methods</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Keystrokes</span></span><br><span class=\"line\"><span class=\"attribute\">Commands</span></span><br><span class=\"line\"><span class=\"attribute\">System calls</span></span><br></pre></td></tr></table></figure></li>\n<li>Keystrokes</li>\n</ul>\n<p>​     <strong>CTRL + C</strong> -&gt; SIGINT</p>\n<p>​     Default handler exits process.</p>\n<p>​     <strong>CTRL + Z</strong> -&gt; SIGTSTP</p>\n<p>​     Default handler suspends process.(进程暂停)</p>\n<p>​     <strong>CTRL + \\</strong> -&gt; SIGQUIT</p>\n<p>​     Default handler exits process</p>\n<ul>\n<li><p>Sending signals via command</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -<span class=\"keyword\">signal</span><span class=\"string\"> pid</span></span><br></pre></td></tr></table></figure>\n<p>Send a signal of type signal to the process with id pid.</p>\n<p>The kill command can send all signals</p>\n<p>e.g.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -2 1234</span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> -INT 1234</span><br></pre></td></tr></table></figure></li>\n<li><p>System calls</p>\n<p><strong>kill()</strong></p>\n<p>Commands the OS to send a signal to the process, must have permission.</p>\n<p>Both processes must have the same user ID.(具有相同的用户id)</p>\n<p>Superuser can send signal to any process(超级用户可以向任何进程发送信号)</p>\n<p>==Return value==:</p>\n<p>Success: 0</p>\n<p>Error: -1 (errno is set appropriately)</p>\n<p>EINVAL if invalid</p>\n<p>EPERM if no permission</p>\n<p>ESRCH if specified process does not exist</p>\n<p><strong>raise()</strong></p>\n<p>Commands the OS to send a signal to current process</p>\n<p><strong>alarm()</strong></p>\n<p>Schedule a SIGALRM at some time in future.</p>\n<p>Processing delays and scheduling uncertainties.</p>\n<p>Value of 0 cancels any outstanding alarm request.</p>\n<p>Each process can have only one outstanding alarm.</p>\n<p>Calling alarm before signal is received will cause alarm to be rescheduled.</p>\n</li>\n</ul>\n<h3 id=\"how-to-handle-signal\"><a href=\"#how-to-handle-signal\" class=\"headerlink\" title=\"how to handle signal\"></a>how to handle signal</h3><p>  <strong>signal()</strong></p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\">Void (*signal(<span class=\"keyword\">int</span> sig, <span class=\"keyword\">void</span> (*func)(<span class=\"keyword\">int</span>)))(<span class=\"keyword\">int</span>);</span><br></pre></td></tr></table></figure>\n<p>  signal() returns a function which is the previous value of the function set up to handle the signal.</p>\n<p>  OR one of these two special values:</p>\n<p>  SIG_IGN – Ignore the signal</p>\n<p>  SIG_DFL – Restore default behavior</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ouch</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(“OUCH – I got signal %d\\n”, sig);</span><br><span class=\"line\"> (<span class=\"keyword\">void</span>) signal(SIGINT, SIG_DFL);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> (<span class=\"keyword\">void</span>) signal(SIGINT, ouch);</span><br><span class=\"line\"> <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(“Hello World!\\n”);</span><br><span class=\"line\"> sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  <strong>Waiting for signal</strong></p>\n<p>  <strong>pause()</strong></p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pause</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Causes program to suspend execution until a signal occurs.</p>\n</li>\n<li><p>When it receives a signal, any established handler is run and execution </p>\n<p>continues as normal.</p>\n</li>\n</ul>\n<p><strong>Re-entrant Functions</strong></p>\n<ul>\n<li><p>That can be interrupted in the middle of execution and then safely called again (“re-entered”) before its previous invocations complete execution.</p>\n</li>\n<li><p>Never call a non-reentrant function inside a signal handler, if the function was being ran the behaviour will be changed.</p>\n</li>\n<li><p>Example if a global was used as a temporary value, and gets overwritten in </p>\n<p>the signal handler</p>\n</li>\n</ul>\n<p><strong>Race conditions</strong></p>\n<ul>\n<li><p>A flaw in a program whereby the correctness of the program is critically </p>\n<p>dependent on the sequence or timing of other events</p>\n</li>\n<li><p>Example: a signal handler and function modifying the same value</p>\n</li>\n<li><p>Race conditions Example</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//deposit is running and is interrupted by a signal after copying savings to temp.</span></span><br><span class=\"line\">savings = <span class=\"number\">5000</span>, value = <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> savings; <span class=\"comment\">// 5000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deposit</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> <span class=\"comment\">// 2000</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> temp = savings;</span><br><span class=\"line\">---- Signal</span><br><span class=\"line\">temp += val;</span><br><span class=\"line\">savings = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">salary</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">savings += <span class=\"number\">5000</span>; <span class=\"comment\">// 10000</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>POSIX Signal Handling</strong></p>\n</li>\n</ul>\n<p><strong>C90 standard</strong></p>\n<p>signal() and raise() functions</p>\n<p>Works across all systems (UNIX, Linux, Windows)</p>\n<p>But differently across some systems</p>\n<p>Blocked signals during handler execution</p>\n<p>Reinstall handler after every signal invocation</p>\n<p>Does not provide mechanism to block signals</p>\n<p><strong>POSIX standard</strong></p>\n<p>sigaction() and sigprocmask() functions:</p>\n<p>Works the same across all POSIX-compliant UNIX systems (Linux, Solaris etc) but…</p>\n<p>Do not work on non-UNIX systems (e.g. Windows)</p>\n<p>Provides mechanism to block signals in general</p>\n<p>sigprocmask() is not required to use sigaction()</p>\n<p><strong>sigaction()</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigaction</span><span class=\"params\">(<span class=\"keyword\">int</span> sig, <span class=\"keyword\">const</span> struct sigaction *act, struct sigaction *oact)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>struct sigaction has at least</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (*) (<span class=\"keyword\">int</span>) sa_handler <span class=\"comment\">// function, SIG_DFL, SIG_IGN</span></span><br><span class=\"line\"><span class=\"keyword\">sigset_t</span> sa_mask <span class=\"comment\">// signals to block in sa_handler</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> sa_flags <span class=\"comment\">// signal action modifiers</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> stop = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handler</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span> </span>&#123;</span><br><span class=\"line\"> stop = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">sa</span>;</span></span><br><span class=\"line\"> sa.sa_flags = <span class=\"number\">0</span>; <span class=\"comment\">// no flags</span></span><br><span class=\"line\"> sigemptyset(&amp;sa.sa_mask); <span class=\"comment\">// clear the mask so no signals are blocked</span></span><br><span class=\"line\"> sa.sa_handler = handler; <span class=\"comment\">// set function pointer for handler</span></span><br><span class=\"line\"> sigaction(SIGINT, &amp;sa, <span class=\"literal\">NULL</span>); <span class=\"comment\">// set the handler</span></span><br><span class=\"line\"> <span class=\"keyword\">while</span>(!stop) &#123;</span><br><span class=\"line\"> ;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>setjmp &amp; longjmp</strong></p>\n<ul>\n<li><p>setjmp and longjmp are two flow control subroutines.</p>\n</li>\n<li><p>When setjmp is called, it saves the program state at that point and returns 0.</p>\n</li>\n<li><p>When longjmp is called, it returns from the place where the jump is set with the given value.</p>\n</li>\n<li><p>If you are jumping from a signal handler, you might need to used <strong>sigsetjmp</strong> and <strong>siglongjmp</strong> instead setjmp and longjmp due to signal mask issues. </p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;setjmp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> jmp_buf env;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"> i = setjmp(env);</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;i = %d\\n&quot;</span>, i);</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> longjmp(env, <span class=\"number\">1</span>);</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I will never be printed!!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>setjmp</code> 與 <code>longjmp</code> 函數可以讓程式往回跳到函數呼叫堆疊中的某個函數中，就像是一種跨函數的 <code>goto</code>。</p>\n<p>首先使用 <code>setjmp</code> 在程式中標示一個目標位置（跳躍的目的地），然後在程式要進行跳躍的地方呼叫 <code>longjmp</code> 即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;setjmp.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 儲存程式跳躍時所需之資訊</span></span><br><span class=\"line\">jmp_buf jmpbuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun_a</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r = v * <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跳躍至 main 函數</span></span><br><span class=\"line\">    longjmp(jmpbuffer, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun_b</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r = fun_a(v) + <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跳躍至 main 函數</span></span><br><span class=\"line\">    longjmp(jmpbuffer, <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun_c</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r = fun_b(v) * <span class=\"number\">5</span> - <span class=\"number\">21</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 設定跳躍目標位置</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> jmpVal = setjmp(jmpbuffer);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( jmpVal == <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fun_a errorn&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( jmpVal == <span class=\"number\">2</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fun_b errorn&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// jmpVal == 0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">-5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = fun_c(x);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Result = %dn&quot;</span>, result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 <code>setjmp</code> 設定跳躍目標位置時，會需要指定一個特殊的 <code>jmp_buf</code> 變數，用來儲存程式跳躍時所需之資訊，而在直接呼叫 <code>setjmp</code> 函數時其傳回值為 <code>0</code>，若是透過 <code>longjmp</code> 跳回這裡時，其傳回值就會是呼叫 <code>longjmp</code> 時所指定的值.</p>\n<ul>\n<li><p>What if you want to handle a signal multiple times in your program?</p>\n</li>\n<li><p>Do not use setjmp() and longjmp().</p>\n</li>\n<li><p>setjmp() does not save the signal mask.</p>\n</li>\n<li><p>The first SIGSEGV is added to the process’ signal mask to prevent subsequent signals interrupting the handler</p>\n</li>\n<li><p>When setjmp() pseudo returns, that mask is still there.</p>\n</li>\n<li><p>use sigsetjmp() and siglongjmp()</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sigsetjmp</span><span class=\"params\">(sigjmp_buf env, <span class=\"keyword\">int</span> savemask)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">siglongjmp</span><span class=\"params\">(sigjmp_buf env, <span class=\"keyword\">int</span> val)</span></span></span><br></pre></td></tr></table></figure>\n<p>If savemask is set to 1, it saves the signal mask and siglongjmp restores the saved signal mask.</p>\n</li>\n<li><p>What is saved in sigjmp_buf?</p>\n<p><strong>Program Counter</strong></p>\n<p>Location in the code</p>\n<p><strong>Stack pointer</strong></p>\n<p>Locations of local variables</p>\n<p>Return address of called functions</p>\n<p><strong>Signal Mask</strong> </p>\n<p> If specified</p>\n<p><strong>Rest of environment (CPU state)</strong></p>\n<p>Calculations can continue from where they stopped</p>\n</li>\n<li><p>What is NOT saved in sigjmp_buf?</p>\n<p>Global variables</p>\n<p>Variables allocated dynamically</p>\n<p>Values of local variables</p>\n<p>Any other global resources</p>\n</li>\n<li><p>What does it mean by scanning the memory?</p>\n<p>Simply, you can try to access memory locations in a loop, using pointer dereferencing</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *p = (<span class=\"keyword\">char</span> *)<span class=\"number\">0xff13abc1</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> a = *p;</span><br></pre></td></tr></table></figure></li>\n<li><p>How do we know where the process’ address space starts and ends?</p>\n<p>0x0 to 0xffffffff (2^32-1)</p>\n<p>This is organized into pages of 4096 bytes (or other defined size in the assignment)</p>\n</li>\n<li><p>How do we check a page’s permissions?</p>\n<p>Try reading/writing to it and see what’s the response from OS.</p>\n<p>If two consecutive pages have the same permissions, they are part of the same “mem_region”</p>\n<p>When you try to write to memory, write the same content to avoid modifying it</p>\n</li>\n</ul>"},{"title":"防止条件丢失","date":"2021-04-08T03:14:10.000Z","_content":"\n \n\n### 条件丢失\n\n{% asset_img campaign-6269159.jpg %}\n\n当signal发生在wait之前，就会丢失这次signal事件.\n\n```c++\nclass Condition : public ConditionBase\n{\npublic:\n    Condition()\n        : signal_(false)\n    {\n    }\n \n    void wait()\n    {\n        pthread_mutex_lock(&mutex_);\n        while (!signal_)\n        {\n            pthread_cond_wait(&cond_, &mutex_);\n        }\n        signal_ = false;\n        pthread_mutex_unlock(&mutex_);\n    }\n \n    void wakeup()\n    {\n        pthread_mutex_lock(&mutex_);\n        signal_ = true;\n        pthread_cond_signal(&cond_);\n        pthread_mutex_unlock(&mutex_);\n    }\n \nprivate:\n    bool signal_;\n};\n```\n\n\n\n","source":"_posts/防止条件丢失.md","raw":"---\ntitle: 防止条件丢失\ndate: 2021-04-08 11:14:10\ntags: os\n---\n\n \n\n### 条件丢失\n\n{% asset_img campaign-6269159.jpg %}\n\n当signal发生在wait之前，就会丢失这次signal事件.\n\n```c++\nclass Condition : public ConditionBase\n{\npublic:\n    Condition()\n        : signal_(false)\n    {\n    }\n \n    void wait()\n    {\n        pthread_mutex_lock(&mutex_);\n        while (!signal_)\n        {\n            pthread_cond_wait(&cond_, &mutex_);\n        }\n        signal_ = false;\n        pthread_mutex_unlock(&mutex_);\n    }\n \n    void wakeup()\n    {\n        pthread_mutex_lock(&mutex_);\n        signal_ = true;\n        pthread_cond_signal(&cond_);\n        pthread_mutex_unlock(&mutex_);\n    }\n \nprivate:\n    bool signal_;\n};\n```\n\n\n\n","slug":"防止条件丢失","published":1,"updated":"2021-05-27T04:18:52.016Z","_id":"ckn8dyi7q0000zwujcw7qh2qr","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"条件丢失\"><a href=\"#条件丢失\" class=\"headerlink\" title=\"条件丢失\"></a>条件丢失</h3><img src=\"/2021/04/08/%E9%98%B2%E6%AD%A2%E6%9D%A1%E4%BB%B6%E4%B8%A2%E5%A4%B1/campaign-6269159.jpg\" class=\"\">\n<p>当signal发生在wait之前，就会丢失这次signal事件.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Condition</span> :</span> <span class=\"keyword\">public</span> ConditionBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Condition()</span><br><span class=\"line\">        : signal_(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex_);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!signal_)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pthread_cond_wait(&amp;cond_, &amp;mutex_);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        signal_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wakeup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex_);</span><br><span class=\"line\">        signal_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        pthread_cond_signal(&amp;cond_);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> signal_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"","more":"<h3 id=\"条件丢失\"><a href=\"#条件丢失\" class=\"headerlink\" title=\"条件丢失\"></a>条件丢失</h3><img src=\"/2021/04/08/%E9%98%B2%E6%AD%A2%E6%9D%A1%E4%BB%B6%E4%B8%A2%E5%A4%B1/campaign-6269159.jpg\" class=\"\">\n<p>当signal发生在wait之前，就会丢失这次signal事件.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Condition</span> :</span> <span class=\"keyword\">public</span> ConditionBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Condition()</span><br><span class=\"line\">        : signal_(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex_);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!signal_)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pthread_cond_wait(&amp;cond_, &amp;mutex_);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        signal_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wakeup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex_);</span><br><span class=\"line\">        signal_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        pthread_cond_signal(&amp;cond_);</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> signal_;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"iterator","date":"2021-04-16T02:39:21.000Z","_content":"\n### C++ 自定义iterator\n\n{% asset_img lake-6256628.jpg %}\n\n<!-- More -->\n\n```C++\n#ifndef LINKEDLIST_H\n#define LINKEDLIST_H\n\n#include \"node.h\"\n\n#include <utility>\n\n// Do not add any #include statements here.  If you have a convincing need for adding a different `#include` please post in the forum on KEATS.\n\n// TODO your code goes here:\n#include <initializer_list>\n\ntemplate<typename T>\nclass LinkedList{\npublic:\n    Node<T>* head;\n    Node<T>* tail;\n    int sz;\n    // constructor with no parameters\n    LinkedList(){\n        head = tail = nullptr;\n        sz = 0;\n    }\n    // constructor with initializer list\n    LinkedList( std::initializer_list<T> ls ){\n        head = tail = nullptr;\n        sz = 0;\n        // add the elements to list\n        for(T a: ls){\n            push_back(a);\n        }\n    }\n\n    // push a data in front of list\n    void push_front(T data){\n        Node<T> * tmp = new Node<T>(data);\n        tmp->next = head;\n        if(head != nullptr)\n            head->previous = tmp;\n        else tail = tmp;\n        //update head\n        head = tmp;\n        sz += 1;\n    }\n\n    //get first element in list\n    T front(){\n      return head->data;\n    }\n\n    //push a data in the back of list\n    void push_back(T data){\n        Node<T> * tmp = new Node<T>(data);\n        tmp->previous = tail;\n        if(tail != nullptr)\n            tail->next = tmp;\n        else head = tmp;\n        //update tail\n        tail = tmp;\n        sz += 1;\n\n    }\n\n    //return the last element\n    T back(){\n         return tail->data;\n    }\n\n    NodeIterator<T>  begin(){\n        return NodeIterator<T>(head);\n    }\n    NodeIterator<T> end(){\n        return NodeIterator<T>(tail->next);\n    }\n\n    //destructor\n    ~LinkedList(){\n        Node<T> * tmp;\n        // free list\n        while(head != nullptr){\n            tmp = head ->next;\n            delete head;\n            head = tmp;\n        }\n        tail = nullptr;\n        sz = 0;\n    }\n\n    // reverse the list\n    void reverse(){\n\n        if(sz <= 1)return;\n        Node<T> * tmp = tail;\n        Node<T> * t = tmp -> previous ;\n        Node<T> * tt = t->previous;\n        // reverse the antecedent and successor relationship\n        while(t != nullptr){\n            tmp->next = t;\n            t->previous = tmp;\n            tmp = t;\n            t = tt;\n            if(t != nullptr)\n            tt = t->previous;\n        }\n        tail->previous = nullptr;\n        head->next = nullptr;\n        //update head pointer and tail pointer\n        tmp = head;\n        head = tail;\n        tail = tmp;\n    }\n\n    // return the size of list\n    int size(){\n        return sz;\n    }\n\n    // insert a new data to it\n    NodeIterator<T> insert(NodeIterator<T> it,T data){\n        Node<T> *cur = it.get();\n        Node<T> *tmp = new Node<T>(data);\n        // empty list\n        if(head == nullptr && tail == nullptr){\n            head = tail = tmp;\n            sz ++;\n            return NodeIterator<T>(tmp);\n        }\n        // not the end,insert data to list\n        if(cur != nullptr){\n            tmp->previous = cur->previous;\n            tmp->next = cur;\n            if(tmp->previous == nullptr){\n                head = tmp;\n            }else{\n                tmp->previous->next = tmp;\n            }\n            cur->previous = tmp;\n        }else{\n            tail->next = tmp;\n            tmp->previous = tail;\n            // update tail pointer\n            tail = tmp;\n        }\n\n        sz ++;\n        return NodeIterator<T>(tmp);\n    }\n\n    // erase one node from list\n    NodeIterator<T> erase(NodeIterator<T> it){\n        Node<T> *cur = it.get();\n\n        // current iterator is the tail of list\n        if(cur->next == nullptr){\n            //update tail pointer\n            tail = cur->previous;\n            //empty list\n            if(tail == nullptr){\n                head = nullptr;\n            }else tail->next = nullptr;\n            delete cur;\n            sz --;\n            // return iterator of nullptr\n            return NodeIterator<T>(nullptr);\n        }else {\n\n            cur->next->previous = cur->previous;\n            // current iterator is the head of list\n            if(cur->previous == nullptr){\n                //update head pointer\n                head = cur->next;\n                //empty list\n                if(head == nullptr)tail = nullptr;\n                else head->previous = nullptr;\n            }else{\n                cur->previous->next = cur->next;\n            }\n            Node<T> * tmp = cur->next;\n            sz --;\n            delete cur;\n            // return a NodeIterator to what is now element i\n            return NodeIterator<T>(tmp);\n        }\n    }\n\n    //return begin of list\n    iterator<T> begin() const {\n        return iterator<T>(head);\n    }\n\n    // end of list\n    iterator<T> end() const {\n        return iterator<T>(tail->next);\n    }\n};\n\n// do not edit below this line\n\n#endif\n\n```\n\n\n\n\n\n```C++\n#ifndef NODE_H\n#define NODE_H\n\n#include <iostream>\nusing std::cout;\nusing std::cerr;\nusing std::endl;\n\n// Do not add any #include statements here.  If you have a convincing need for adding a different `#include` please post in the forum on KEATS.\n\n// TODO your code for the Node class goes here:\n// (Note the 'NodeIterator' class will report lots of errors until Node exists\ntemplate<typename T>\nclass Node{\npublic:\n    T data;// data\n    Node * next;//next Node\n    Node * previous;//previous Node\n    // constructor\n    Node(T data){\n        this->data = data;\n        this->next = nullptr;\n        this->previous = nullptr;\n    }\n\n\n\n};\n\n\n\n\ntemplate<typename T>\nclass NodeIterator {\n  \nprivate:\n    \n    Node<T>* current;\n    \npublic:\n    \n\n    NodeIterator(Node<T>* currentIn)\n        : current(currentIn) {        \n    }\n\n    T & operator*() {\n        return current->data;\n    }\n\n    // TODO: complete the code for NodeIterator here\n    //return the next Node\n    NodeIterator operator++(){\n        if(current != nullptr)\n            current = current->next;\n        return *this;\n    }\n\n    // check whether two iterator is same\n    bool operator==(const NodeIterator<T> & nod){\n        return this->current == nod.current;\n    }\n\n    // check whether two iterator is not same\n    bool operator!=(const NodeIterator<T> & nod){\n        return this->current != nod.current;\n    }\n\n    // return the current pointer\n    Node<T> *get(){\n        return this->current;\n    }\n};\ntemplate<typename T>\nclass iterator {\nprivate:\n    Node<T> *m_ptr;\npublic:\n    // constructor\n    iterator(Node<T>* p = nullptr) :\n            m_ptr(p) {\n    }\n\n    //get data\n    T operator*() const {\n        return m_ptr->data;\n    }\n\n    Node<T>* operator->() const {\n        return m_ptr;\n    }\n\n    //return the next Node\n    iterator& operator++() {\n        m_ptr = m_ptr->next;\n        return *this;\n    }\n\n    // check whether two iterator is same\n    bool operator==(const iterator &arg) const {\n        return arg.m_ptr == this->m_ptr;\n    }\n\n    // check whether two iterator is not same\n    bool operator!=(const iterator &arg) const {\n        return arg.m_ptr != this->m_ptr;\n    }\n\n};\n\n// do not edit below this line\n\n#endif\n\n```\n\n","source":"_posts/iterator.md","raw":"---\ntitle: iterator\ndate: 2021-04-16 10:39:21\ntags: C++\n---\n\n### C++ 自定义iterator\n\n{% asset_img lake-6256628.jpg %}\n\n<!-- More -->\n\n```C++\n#ifndef LINKEDLIST_H\n#define LINKEDLIST_H\n\n#include \"node.h\"\n\n#include <utility>\n\n// Do not add any #include statements here.  If you have a convincing need for adding a different `#include` please post in the forum on KEATS.\n\n// TODO your code goes here:\n#include <initializer_list>\n\ntemplate<typename T>\nclass LinkedList{\npublic:\n    Node<T>* head;\n    Node<T>* tail;\n    int sz;\n    // constructor with no parameters\n    LinkedList(){\n        head = tail = nullptr;\n        sz = 0;\n    }\n    // constructor with initializer list\n    LinkedList( std::initializer_list<T> ls ){\n        head = tail = nullptr;\n        sz = 0;\n        // add the elements to list\n        for(T a: ls){\n            push_back(a);\n        }\n    }\n\n    // push a data in front of list\n    void push_front(T data){\n        Node<T> * tmp = new Node<T>(data);\n        tmp->next = head;\n        if(head != nullptr)\n            head->previous = tmp;\n        else tail = tmp;\n        //update head\n        head = tmp;\n        sz += 1;\n    }\n\n    //get first element in list\n    T front(){\n      return head->data;\n    }\n\n    //push a data in the back of list\n    void push_back(T data){\n        Node<T> * tmp = new Node<T>(data);\n        tmp->previous = tail;\n        if(tail != nullptr)\n            tail->next = tmp;\n        else head = tmp;\n        //update tail\n        tail = tmp;\n        sz += 1;\n\n    }\n\n    //return the last element\n    T back(){\n         return tail->data;\n    }\n\n    NodeIterator<T>  begin(){\n        return NodeIterator<T>(head);\n    }\n    NodeIterator<T> end(){\n        return NodeIterator<T>(tail->next);\n    }\n\n    //destructor\n    ~LinkedList(){\n        Node<T> * tmp;\n        // free list\n        while(head != nullptr){\n            tmp = head ->next;\n            delete head;\n            head = tmp;\n        }\n        tail = nullptr;\n        sz = 0;\n    }\n\n    // reverse the list\n    void reverse(){\n\n        if(sz <= 1)return;\n        Node<T> * tmp = tail;\n        Node<T> * t = tmp -> previous ;\n        Node<T> * tt = t->previous;\n        // reverse the antecedent and successor relationship\n        while(t != nullptr){\n            tmp->next = t;\n            t->previous = tmp;\n            tmp = t;\n            t = tt;\n            if(t != nullptr)\n            tt = t->previous;\n        }\n        tail->previous = nullptr;\n        head->next = nullptr;\n        //update head pointer and tail pointer\n        tmp = head;\n        head = tail;\n        tail = tmp;\n    }\n\n    // return the size of list\n    int size(){\n        return sz;\n    }\n\n    // insert a new data to it\n    NodeIterator<T> insert(NodeIterator<T> it,T data){\n        Node<T> *cur = it.get();\n        Node<T> *tmp = new Node<T>(data);\n        // empty list\n        if(head == nullptr && tail == nullptr){\n            head = tail = tmp;\n            sz ++;\n            return NodeIterator<T>(tmp);\n        }\n        // not the end,insert data to list\n        if(cur != nullptr){\n            tmp->previous = cur->previous;\n            tmp->next = cur;\n            if(tmp->previous == nullptr){\n                head = tmp;\n            }else{\n                tmp->previous->next = tmp;\n            }\n            cur->previous = tmp;\n        }else{\n            tail->next = tmp;\n            tmp->previous = tail;\n            // update tail pointer\n            tail = tmp;\n        }\n\n        sz ++;\n        return NodeIterator<T>(tmp);\n    }\n\n    // erase one node from list\n    NodeIterator<T> erase(NodeIterator<T> it){\n        Node<T> *cur = it.get();\n\n        // current iterator is the tail of list\n        if(cur->next == nullptr){\n            //update tail pointer\n            tail = cur->previous;\n            //empty list\n            if(tail == nullptr){\n                head = nullptr;\n            }else tail->next = nullptr;\n            delete cur;\n            sz --;\n            // return iterator of nullptr\n            return NodeIterator<T>(nullptr);\n        }else {\n\n            cur->next->previous = cur->previous;\n            // current iterator is the head of list\n            if(cur->previous == nullptr){\n                //update head pointer\n                head = cur->next;\n                //empty list\n                if(head == nullptr)tail = nullptr;\n                else head->previous = nullptr;\n            }else{\n                cur->previous->next = cur->next;\n            }\n            Node<T> * tmp = cur->next;\n            sz --;\n            delete cur;\n            // return a NodeIterator to what is now element i\n            return NodeIterator<T>(tmp);\n        }\n    }\n\n    //return begin of list\n    iterator<T> begin() const {\n        return iterator<T>(head);\n    }\n\n    // end of list\n    iterator<T> end() const {\n        return iterator<T>(tail->next);\n    }\n};\n\n// do not edit below this line\n\n#endif\n\n```\n\n\n\n\n\n```C++\n#ifndef NODE_H\n#define NODE_H\n\n#include <iostream>\nusing std::cout;\nusing std::cerr;\nusing std::endl;\n\n// Do not add any #include statements here.  If you have a convincing need for adding a different `#include` please post in the forum on KEATS.\n\n// TODO your code for the Node class goes here:\n// (Note the 'NodeIterator' class will report lots of errors until Node exists\ntemplate<typename T>\nclass Node{\npublic:\n    T data;// data\n    Node * next;//next Node\n    Node * previous;//previous Node\n    // constructor\n    Node(T data){\n        this->data = data;\n        this->next = nullptr;\n        this->previous = nullptr;\n    }\n\n\n\n};\n\n\n\n\ntemplate<typename T>\nclass NodeIterator {\n  \nprivate:\n    \n    Node<T>* current;\n    \npublic:\n    \n\n    NodeIterator(Node<T>* currentIn)\n        : current(currentIn) {        \n    }\n\n    T & operator*() {\n        return current->data;\n    }\n\n    // TODO: complete the code for NodeIterator here\n    //return the next Node\n    NodeIterator operator++(){\n        if(current != nullptr)\n            current = current->next;\n        return *this;\n    }\n\n    // check whether two iterator is same\n    bool operator==(const NodeIterator<T> & nod){\n        return this->current == nod.current;\n    }\n\n    // check whether two iterator is not same\n    bool operator!=(const NodeIterator<T> & nod){\n        return this->current != nod.current;\n    }\n\n    // return the current pointer\n    Node<T> *get(){\n        return this->current;\n    }\n};\ntemplate<typename T>\nclass iterator {\nprivate:\n    Node<T> *m_ptr;\npublic:\n    // constructor\n    iterator(Node<T>* p = nullptr) :\n            m_ptr(p) {\n    }\n\n    //get data\n    T operator*() const {\n        return m_ptr->data;\n    }\n\n    Node<T>* operator->() const {\n        return m_ptr;\n    }\n\n    //return the next Node\n    iterator& operator++() {\n        m_ptr = m_ptr->next;\n        return *this;\n    }\n\n    // check whether two iterator is same\n    bool operator==(const iterator &arg) const {\n        return arg.m_ptr == this->m_ptr;\n    }\n\n    // check whether two iterator is not same\n    bool operator!=(const iterator &arg) const {\n        return arg.m_ptr != this->m_ptr;\n    }\n\n};\n\n// do not edit below this line\n\n#endif\n\n```\n\n","slug":"iterator","published":1,"updated":"2021-05-27T04:17:26.008Z","_id":"cknjpiqqp0000psuj3caj2pv9","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"C-自定义iterator\"><a href=\"#C-自定义iterator\" class=\"headerlink\" title=\"C++ 自定义iterator\"></a>C++ 自定义iterator</h3><img src=\"/2021/04/16/iterator/lake-6256628.jpg\" class=\"\">\n<a id=\"more\"></a>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> LINKEDLIST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINKEDLIST_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;node.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Do not add any #include statements here.  If you have a convincing need for adding a different `#include` please post in the forum on KEATS.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO your code goes here:</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Node&lt;T&gt;* head;</span><br><span class=\"line\">    Node&lt;T&gt;* tail;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz;</span><br><span class=\"line\">    <span class=\"comment\">// constructor with no parameters</span></span><br><span class=\"line\">    LinkedList()&#123;</span><br><span class=\"line\">        head = tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// constructor with initializer list</span></span><br><span class=\"line\">    LinkedList( <span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;T&gt; ls )&#123;</span><br><span class=\"line\">        head = tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// add the elements to list</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(T a: ls)&#123;</span><br><span class=\"line\">            push_back(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// push a data in front of list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(T data)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; * tmp = <span class=\"keyword\">new</span> Node&lt;T&gt;(data);</span><br><span class=\"line\">        tmp-&gt;next = head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            head-&gt;previous = tmp;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tail = tmp;</span><br><span class=\"line\">        <span class=\"comment\">//update head</span></span><br><span class=\"line\">        head = tmp;</span><br><span class=\"line\">        sz += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//get first element in list</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">front</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> head-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//push a data in the back of list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(T data)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; * tmp = <span class=\"keyword\">new</span> Node&lt;T&gt;(data);</span><br><span class=\"line\">        tmp-&gt;previous = tail;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tail != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            tail-&gt;next = tmp;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> head = tmp;</span><br><span class=\"line\">        <span class=\"comment\">//update tail</span></span><br><span class=\"line\">        tail = tmp;</span><br><span class=\"line\">        sz += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return the last element</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">back</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> tail-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">NodeIterator&lt;T&gt;  <span class=\"title\">begin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">NodeIterator&lt;T&gt; <span class=\"title\">end</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(tail-&gt;next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//destructor</span></span><br><span class=\"line\">    ~LinkedList()&#123;</span><br><span class=\"line\">        Node&lt;T&gt; * tmp;</span><br><span class=\"line\">        <span class=\"comment\">// free list</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head != <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            tmp = head -&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> head;</span><br><span class=\"line\">            head = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reverse the list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sz &lt;= <span class=\"number\">1</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        Node&lt;T&gt; * tmp = tail;</span><br><span class=\"line\">        Node&lt;T&gt; * t = tmp -&gt; previous ;</span><br><span class=\"line\">        Node&lt;T&gt; * tt = t-&gt;previous;</span><br><span class=\"line\">        <span class=\"comment\">// reverse the antecedent and successor relationship</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t != <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;next = t;</span><br><span class=\"line\">            t-&gt;previous = tmp;</span><br><span class=\"line\">            tmp = t;</span><br><span class=\"line\">            t = tt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            tt = t-&gt;previous;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail-&gt;previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"comment\">//update head pointer and tail pointer</span></span><br><span class=\"line\">        tmp = head;</span><br><span class=\"line\">        head = tail;</span><br><span class=\"line\">        tail = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return the size of list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// insert a new data to it</span></span><br><span class=\"line\">    <span class=\"function\">NodeIterator&lt;T&gt; <span class=\"title\">insert</span><span class=\"params\">(NodeIterator&lt;T&gt; it,T data)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; *cur = it.get();</span><br><span class=\"line\">        Node&lt;T&gt; *tmp = <span class=\"keyword\">new</span> Node&lt;T&gt;(data);</span><br><span class=\"line\">        <span class=\"comment\">// empty list</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">nullptr</span> &amp;&amp; tail == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            head = tail = tmp;</span><br><span class=\"line\">            sz ++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// not the end,insert data to list</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur != <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;previous = cur-&gt;previous;</span><br><span class=\"line\">            tmp-&gt;next = cur;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp-&gt;previous == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">                head = tmp;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                tmp-&gt;previous-&gt;next = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur-&gt;previous = tmp;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tail-&gt;next = tmp;</span><br><span class=\"line\">            tmp-&gt;previous = tail;</span><br><span class=\"line\">            <span class=\"comment\">// update tail pointer</span></span><br><span class=\"line\">            tail = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sz ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// erase one node from list</span></span><br><span class=\"line\">    <span class=\"function\">NodeIterator&lt;T&gt; <span class=\"title\">erase</span><span class=\"params\">(NodeIterator&lt;T&gt; it)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; *cur = it.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// current iterator is the tail of list</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur-&gt;next == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//update tail pointer</span></span><br><span class=\"line\">            tail = cur-&gt;previous;</span><br><span class=\"line\">            <span class=\"comment\">//empty list</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tail == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">                head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> tail-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">            sz --;</span><br><span class=\"line\">            <span class=\"comment\">// return iterator of nullptr</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            cur-&gt;next-&gt;previous = cur-&gt;previous;</span><br><span class=\"line\">            <span class=\"comment\">// current iterator is the head of list</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;previous == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//update head pointer</span></span><br><span class=\"line\">                head = cur-&gt;next;</span><br><span class=\"line\">                <span class=\"comment\">//empty list</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(head == <span class=\"literal\">nullptr</span>)tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> head-&gt;previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                cur-&gt;previous-&gt;next = cur-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Node&lt;T&gt; * tmp = cur-&gt;next;</span><br><span class=\"line\">            sz --;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">            <span class=\"comment\">// return a NodeIterator to what is now element i</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return begin of list</span></span><br><span class=\"line\">    <span class=\"function\">iterator&lt;T&gt; <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator&lt;T&gt;(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// end of list</span></span><br><span class=\"line\">    <span class=\"function\">iterator&lt;T&gt; <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator&lt;T&gt;(tail-&gt;next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do not edit below this line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> NODE_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NODE_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Do not add any #include statements here.  If you have a convincing need for adding a different `#include` please post in the forum on KEATS.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO your code for the Node class goes here:</span></span><br><span class=\"line\"><span class=\"comment\">// (Note the &#x27;NodeIterator&#x27; class will report lots of errors until Node exists</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    T data;<span class=\"comment\">// data</span></span><br><span class=\"line\">    Node * next;<span class=\"comment\">//next Node</span></span><br><span class=\"line\">    Node * previous;<span class=\"comment\">//previous Node</span></span><br><span class=\"line\">    <span class=\"comment\">// constructor</span></span><br><span class=\"line\">    Node(T data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodeIterator</span> &#123;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    Node&lt;T&gt;* current;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    NodeIterator(Node&lt;T&gt;* currentIn)</span><br><span class=\"line\">        : current(currentIn) &#123;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    T &amp; <span class=\"keyword\">operator</span>*() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> complete the code for NodeIterator here</span></span><br><span class=\"line\">    <span class=\"comment\">//return the next Node</span></span><br><span class=\"line\">    NodeIterator <span class=\"keyword\">operator</span>++()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            current = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether two iterator is same</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> NodeIterator&lt;T&gt; &amp; nod)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;current == nod.current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether two iterator is not same</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> NodeIterator&lt;T&gt; &amp; nod)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;current != nod.current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return the current pointer</span></span><br><span class=\"line\">    <span class=\"function\">Node&lt;T&gt; *<span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iterator</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Node&lt;T&gt; *m_ptr;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// constructor</span></span><br><span class=\"line\">    iterator(Node&lt;T&gt;* p = <span class=\"literal\">nullptr</span>) :</span><br><span class=\"line\">            m_ptr(p) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//get data</span></span><br><span class=\"line\">    T <span class=\"keyword\">operator</span>*() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_ptr-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;T&gt;* <span class=\"keyword\">operator</span>-&gt;() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return the next Node</span></span><br><span class=\"line\">    iterator&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">        m_ptr = m_ptr-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether two iterator is same</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> iterator &amp;arg) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arg.m_ptr == <span class=\"keyword\">this</span>-&gt;m_ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether two iterator is not same</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> iterator &amp;arg) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arg.m_ptr != <span class=\"keyword\">this</span>-&gt;m_ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do not edit below this line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"<h3 id=\"C-自定义iterator\"><a href=\"#C-自定义iterator\" class=\"headerlink\" title=\"C++ 自定义iterator\"></a>C++ 自定义iterator</h3><img src=\"/2021/04/16/iterator/lake-6256628.jpg\" class=\"\">","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> LINKEDLIST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LINKEDLIST_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;node.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Do not add any #include statements here.  If you have a convincing need for adding a different `#include` please post in the forum on KEATS.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO your code goes here:</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Node&lt;T&gt;* head;</span><br><span class=\"line\">    Node&lt;T&gt;* tail;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz;</span><br><span class=\"line\">    <span class=\"comment\">// constructor with no parameters</span></span><br><span class=\"line\">    LinkedList()&#123;</span><br><span class=\"line\">        head = tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// constructor with initializer list</span></span><br><span class=\"line\">    LinkedList( <span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;T&gt; ls )&#123;</span><br><span class=\"line\">        head = tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// add the elements to list</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(T a: ls)&#123;</span><br><span class=\"line\">            push_back(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// push a data in front of list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(T data)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; * tmp = <span class=\"keyword\">new</span> Node&lt;T&gt;(data);</span><br><span class=\"line\">        tmp-&gt;next = head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            head-&gt;previous = tmp;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tail = tmp;</span><br><span class=\"line\">        <span class=\"comment\">//update head</span></span><br><span class=\"line\">        head = tmp;</span><br><span class=\"line\">        sz += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//get first element in list</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">front</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> head-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//push a data in the back of list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(T data)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; * tmp = <span class=\"keyword\">new</span> Node&lt;T&gt;(data);</span><br><span class=\"line\">        tmp-&gt;previous = tail;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tail != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            tail-&gt;next = tmp;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> head = tmp;</span><br><span class=\"line\">        <span class=\"comment\">//update tail</span></span><br><span class=\"line\">        tail = tmp;</span><br><span class=\"line\">        sz += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return the last element</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">back</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> tail-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">NodeIterator&lt;T&gt;  <span class=\"title\">begin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">NodeIterator&lt;T&gt; <span class=\"title\">end</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(tail-&gt;next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//destructor</span></span><br><span class=\"line\">    ~LinkedList()&#123;</span><br><span class=\"line\">        Node&lt;T&gt; * tmp;</span><br><span class=\"line\">        <span class=\"comment\">// free list</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head != <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            tmp = head -&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> head;</span><br><span class=\"line\">            head = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reverse the list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sz &lt;= <span class=\"number\">1</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        Node&lt;T&gt; * tmp = tail;</span><br><span class=\"line\">        Node&lt;T&gt; * t = tmp -&gt; previous ;</span><br><span class=\"line\">        Node&lt;T&gt; * tt = t-&gt;previous;</span><br><span class=\"line\">        <span class=\"comment\">// reverse the antecedent and successor relationship</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t != <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;next = t;</span><br><span class=\"line\">            t-&gt;previous = tmp;</span><br><span class=\"line\">            tmp = t;</span><br><span class=\"line\">            t = tt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            tt = t-&gt;previous;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail-&gt;previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"comment\">//update head pointer and tail pointer</span></span><br><span class=\"line\">        tmp = head;</span><br><span class=\"line\">        head = tail;</span><br><span class=\"line\">        tail = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return the size of list</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// insert a new data to it</span></span><br><span class=\"line\">    <span class=\"function\">NodeIterator&lt;T&gt; <span class=\"title\">insert</span><span class=\"params\">(NodeIterator&lt;T&gt; it,T data)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; *cur = it.get();</span><br><span class=\"line\">        Node&lt;T&gt; *tmp = <span class=\"keyword\">new</span> Node&lt;T&gt;(data);</span><br><span class=\"line\">        <span class=\"comment\">// empty list</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">nullptr</span> &amp;&amp; tail == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            head = tail = tmp;</span><br><span class=\"line\">            sz ++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// not the end,insert data to list</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur != <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            tmp-&gt;previous = cur-&gt;previous;</span><br><span class=\"line\">            tmp-&gt;next = cur;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp-&gt;previous == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">                head = tmp;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                tmp-&gt;previous-&gt;next = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur-&gt;previous = tmp;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tail-&gt;next = tmp;</span><br><span class=\"line\">            tmp-&gt;previous = tail;</span><br><span class=\"line\">            <span class=\"comment\">// update tail pointer</span></span><br><span class=\"line\">            tail = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sz ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// erase one node from list</span></span><br><span class=\"line\">    <span class=\"function\">NodeIterator&lt;T&gt; <span class=\"title\">erase</span><span class=\"params\">(NodeIterator&lt;T&gt; it)</span></span>&#123;</span><br><span class=\"line\">        Node&lt;T&gt; *cur = it.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// current iterator is the tail of list</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur-&gt;next == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//update tail pointer</span></span><br><span class=\"line\">            tail = cur-&gt;previous;</span><br><span class=\"line\">            <span class=\"comment\">//empty list</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tail == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">                head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> tail-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">            sz --;</span><br><span class=\"line\">            <span class=\"comment\">// return iterator of nullptr</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            cur-&gt;next-&gt;previous = cur-&gt;previous;</span><br><span class=\"line\">            <span class=\"comment\">// current iterator is the head of list</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur-&gt;previous == <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//update head pointer</span></span><br><span class=\"line\">                head = cur-&gt;next;</span><br><span class=\"line\">                <span class=\"comment\">//empty list</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(head == <span class=\"literal\">nullptr</span>)tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> head-&gt;previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                cur-&gt;previous-&gt;next = cur-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Node&lt;T&gt; * tmp = cur-&gt;next;</span><br><span class=\"line\">            sz --;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> cur;</span><br><span class=\"line\">            <span class=\"comment\">// return a NodeIterator to what is now element i</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> NodeIterator&lt;T&gt;(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return begin of list</span></span><br><span class=\"line\">    <span class=\"function\">iterator&lt;T&gt; <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator&lt;T&gt;(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// end of list</span></span><br><span class=\"line\">    <span class=\"function\">iterator&lt;T&gt; <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> iterator&lt;T&gt;(tail-&gt;next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do not edit below this line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> NODE_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NODE_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Do not add any #include statements here.  If you have a convincing need for adding a different `#include` please post in the forum on KEATS.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO your code for the Node class goes here:</span></span><br><span class=\"line\"><span class=\"comment\">// (Note the &#x27;NodeIterator&#x27; class will report lots of errors until Node exists</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    T data;<span class=\"comment\">// data</span></span><br><span class=\"line\">    Node * next;<span class=\"comment\">//next Node</span></span><br><span class=\"line\">    Node * previous;<span class=\"comment\">//previous Node</span></span><br><span class=\"line\">    <span class=\"comment\">// constructor</span></span><br><span class=\"line\">    Node(T data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;previous = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodeIterator</span> &#123;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    Node&lt;T&gt;* current;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    NodeIterator(Node&lt;T&gt;* currentIn)</span><br><span class=\"line\">        : current(currentIn) &#123;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    T &amp; <span class=\"keyword\">operator</span>*() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> complete the code for NodeIterator here</span></span><br><span class=\"line\">    <span class=\"comment\">//return the next Node</span></span><br><span class=\"line\">    NodeIterator <span class=\"keyword\">operator</span>++()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">            current = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether two iterator is same</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> NodeIterator&lt;T&gt; &amp; nod)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;current == nod.current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether two iterator is not same</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> NodeIterator&lt;T&gt; &amp; nod)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;current != nod.current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return the current pointer</span></span><br><span class=\"line\">    <span class=\"function\">Node&lt;T&gt; *<span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iterator</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Node&lt;T&gt; *m_ptr;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// constructor</span></span><br><span class=\"line\">    iterator(Node&lt;T&gt;* p = <span class=\"literal\">nullptr</span>) :</span><br><span class=\"line\">            m_ptr(p) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//get data</span></span><br><span class=\"line\">    T <span class=\"keyword\">operator</span>*() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_ptr-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node&lt;T&gt;* <span class=\"keyword\">operator</span>-&gt;() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//return the next Node</span></span><br><span class=\"line\">    iterator&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">        m_ptr = m_ptr-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether two iterator is same</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> iterator &amp;arg) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arg.m_ptr == <span class=\"keyword\">this</span>-&gt;m_ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check whether two iterator is not same</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> iterator &amp;arg) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arg.m_ptr != <span class=\"keyword\">this</span>-&gt;m_ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do not edit below this line</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"操作系统","date":"2021-05-26T02:53:24.000Z","_content":"\n批处理操作系统\n\n操作系统是一个简单的串行程序调度器和一系列库函数\n\n操作系统中开始有设备文件任务，但只有一个独占计算机运行的程序。\n","source":"_posts/操作系统.md","raw":"---\ntitle: 操作系统\ndate: 2021-05-26 10:53:24\ntags:\n---\n\n批处理操作系统\n\n操作系统是一个简单的串行程序调度器和一系列库函数\n\n操作系统中开始有设备文件任务，但只有一个独占计算机运行的程序。\n","slug":"操作系统","published":1,"updated":"2021-05-26T03:01:54.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp6e3ym70000s4uj6gnwf85x","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>批处理操作系统</p>\n<p>操作系统是一个简单的串行程序调度器和一系列库函数</p>\n<p>操作系统中开始有设备文件任务，但只有一个独占计算机运行的程序。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"","more":"<p>批处理操作系统</p>\n<p>操作系统是一个简单的串行程序调度器和一系列库函数</p>\n<p>操作系统中开始有设备文件任务，但只有一个独占计算机运行的程序。</p>\n"},{"title":"网络","date":"2021-05-24T06:05:43.000Z","_content":"\n* 节点\n\n  主机或运行在其上面的应用程序\n\n  路由器（网络层）交换机（链路层）等网络交换设备\n\n* 边：(通讯链路)\n\n  接入网链路\n\n  主干链路\n\n* 协议\n\n  对等层实体在通信过程中应遵守的规则集合。\n\n  协议定义了在两个或多个通信实体之间交换的报文**格式**和**次序**，以及在报文传输和/或接收或其他事件方面所采取的**动作**。\n\n* 互联网\n\n​       分布式应用，以及为分布式应用提供通信服务的基础设施。\n\n* 网络结构\n\n  * 网络边缘\n\n    主机、应用程序\n\n  * 网络核心\n\n    互联着的路由器、网络的网络\n\n  * 接入网、物理媒体\n\n    有线或者无线通信链路\n\n* 网络边缘\n\n  * 客户端、服务器模式\n\n  客户端向服务器请求、接收服务\n\n  问题：可扩展性差，随着请求载荷增加，性能变差。\n\n  * 对等（peer-peer）模式\n\n  面向连接的通信方式（仅端系统连接）\n\n  有连接\n\n  **TCP**\n\n  可靠、保序\n\n  流量控制\n\n  拥塞控制\n\n  **UDP**\n\n  无连接、不可靠、无流量、拥塞控制\n\n* 网络核心\n\n  路由器的网状网络\n\n  数据怎么通过网络进行传输？\n\n  * 电路交换\n\n  端到端的资源被分配给从源端到目标端的呼叫\n\n  独享资源（每个呼叫一旦建立起来就能保证性能）\n\n  如果呼叫没有数据发送，被分配的资源会被浪费\n\n  通常被传统电话网络采用\n\n  网络资源（如带宽）被分成片\n\n  为呼叫分配片\n\n  如果某个呼叫没有数据，则其资源片处于空闲状态\n\n  将带宽分成片\n\n  频分、时分、波分\n\n  连接建立时间长\n\n  计算机通信有突发性，如果使用线路交换则浪费的片较多\n\n  可靠性不高\n\n  * 分组交换\n\n  以分组为单位存储转发方式\n\n  被传输到下一个链路之前，整个分组必须到达路由器，**存储转发**\n\n  在一个速率为R bps的链路，一个长度为L bits的分组的存储转发延时：L/R s.\n\n  排队与延迟\n\n  **如果到达速率>链路传输速率**：\n\n  分组将会排队，等待传输\n\n  如果路由器缓存用完了，分组将会被抛弃\n\n  * 网络核心的关键功能\n\n    路由：决定分组采用的源到目标的路径\n\n    转发：将分组从路由器的输入链路转移到输出链路。\n\n    统计多路复用\n\n  分组交换允许更多用户使用网络。\n\n  适合于对突发式数据传输\n\n  * 资源共享\n  * 简单、不必建立呼叫\n\n  过度使用会造成网络拥塞\n\n  分组交换网络按照有无网络层连接：\n\n  * 数据报网络(不建立连接)\n\n    分组的目标地址决定下一跳\n\n    在不同阶段，路由可以改变\n\n  * 虚电路网络（有连接）\n\n\n* 接入网与物理媒体\n\n  住宅接入：modem\n\n  企业接入网络\n\n  无线接入网络\n\n  (无线LANs、广域无线接入)\n\n  物理媒体\n\n  物理链路：在每个传输-接收对，跨越一种物理媒体\n\n  * 导引型媒体\n\n    信号沿着固体媒介被导引，（同轴电缆、光纤、双绞线、光缆）\n\n  * 非导引型媒体\n\n    信号自由传播，如无线电\n\n* Internet结构和ISP\n\n  端系统通过接入ISPs（Internet Service Providers）接入到互联网\n\n  接入ISPs相应的必须是互联的\n\n* 在路由器缓存区得分组队列\n\n  分组到达链路得速率超过了链路输出能力\n\n  分组等待排到队头，被输出\n\n  * 节点处理延时\n\n    检查bit级差错\n\n    检查分组首部和决定将分组导向何处\n\n  * 排队延时\n\n    在输出链路上等待输出的时间\n\n    依赖于路由器的拥塞程度\n\n  * 传输延时\n\n    R = 链路带宽（bps)\n\n    L = 分组长度（bits)\n\n    将分组发送到链路上的时间L/R\n\n    存储转发延时\n\n  * 传播延时\n\n    d = 物理链路长度\n\n    s = 在媒体上的传播速度$(2*10^8m/s)$\n\n    传播延时 = d/s\n\n  * 流量强度\n\n    $I = La/R$\n\n    $R$=链路带宽（bps)\n\n    $L$=分组长度（bits)\n\n    $a$=分组到达队列的平均速率\n\n  * 分组丢失\n\n    链路队列缓冲区容量有限\n\n    当分组到达一个满的队列时，该分组会丢失\n\n    丢失的分组可能会被前一个节点或源端系统重传或根本不重传。\n\n  * 吞吐量\n\n    在源端和目标端之间传输的速率（数据量/单位时间）\n\n    瞬间吞吐量：在一个时间点的速率\n\n    平均吞吐量：在一个长时间内的平均值\n\n  \n\n* 协议层次及服务模型\n\n  将网络复杂功能分成功能明确的层次，每一层实现了其中一个或一组功能，功能中有其上层可以使用的功能：服务。\n\n  本层协议实体相互交互执行本层的协议动作，目的是实现本层功能，通过接口为上层提供更好的服务。\n\n  在实现本层协议的时候，直接利用了下层所提供的服务。\n\n  本层的服务：借助下层服务实现的本层协议实体之间的交互带来的新功能（上层可以利用的）+更下层所提供的服务。\n\n  * 服务（Service):底层实体向上层实体提供它们之间的通信能力。服务用户（service user) 服务提供者（service provider)\n\n  * 原语（primitive):上层使用下层服务的形式，高层使用低层提供的服务，以及底层向高层提供服务都是通过服务访问源于来进行交互的--形式\n\n  * 服务访问点SAP(Services Access Point):上层使用下层提供的服务通过层间的接口--地点：\n\n    地址（address)：下层的一个实体支撑着上层的多个实体，SAP有标志不同上层实体的作用。 \n\n    传输层的SAP、端口\n\n  * 面向连接的服务、无连接的服务。\n\n  * **服务与协议的区别**\n\n    服务(service)：底层实体向上层实体提供它们之间的通信的能力，是通过原语(primitive)来操作的，垂直\n\n    协议（protocol）：对等层(peer entity)实体之间在互相通信过程中需要遵循的规则的集合，水平\n\n  * 服务与协议的联系\n\n    本层的协议实现要靠下层提供的服务来实现。\n\n    本层实体通过协议为上层提供更高级的服务。\n\n  * 数据单元（SDU,ICI,PDU)\n\n  * Internet协议栈\n\n    **应用层**：网络应用（应用报文与应用报文交互\n\n    为人类用户或其他应用进程提供网络应用服务。\n\n    FTP,SMTP,HTTP,DNS\n\n    **传输层**：主机之间的数据传输(进程到进程传输、不可靠变为可靠\n\n    在网络层提供的端到端通信基础上，细分为进程到进程，将不可靠通信变成可靠地通信。\n\n    TCP,UDP\n\n    **网络层**：为数据报从源到目的选择路由（传输以分组为单位端到端的数据 E2E\n\n    主机主机之间的通信、端到端通信，不可靠\n\n    IP、路由协议\n\n    **链路层**：相邻网络节点之间的数据传输（在相邻两点之间传输以帧为单位的数据 P2P\n\n    2个相邻2点的通信，点到点的通信，可靠或不可靠。\n\n    点对对协议PPP,802.11(Wifi),Ethernet\n\n    **物理层**：在线路上传送bit,（把输入数据转成物理信号\n\n  * ISO/OSI参考模型：\n\n    表示层：允许应用解释传输的数据 e.g.加密、压缩、机器相关的表示转换\n\n    会话层：数据交换的同步、检查点、恢复(建立会话、维持会话)\n\n  * 各层次的协议数据单元\n\n    应用层：报文（message)\n\n    传输层：报文段（segment); TCP段，UDP数据报\n\n    网络层：分组packet(如果无连接方式：数据报（datagram))\n\n    数据链路层：帧（frame）\n\n    物理层：位（bit)\n\n  \n\n  \n\n### 应用层\n\n#### 网络应用的体系结构\n\n**可能的应用架构**\n\n  客户-服务器模式（C/S:Client/Serve)\n\n  * 服务器\n  \n    一直运行\n  \n    固定的IP地址和周知的端口号（约定）\n  \n    扩展性：服务器场（数据中心进行扩展，扩展性差，可靠性差）\n  \n  * 客户端\n  \n    主动与服务器通信\n  \n    与互联网有间歇性的连接\n  \n    可能是动态IP地址\n  \n    不直接与其他客户端通信\n\n  对等模式（P2P:Peer to Peer)\n\n  * 几乎没有一直运行的服务器\n  * 任意端系统之间可以通信\n  * 每一个节点既是客户端又是服务器\n  * 参与的主机间歇性连接且可以改变IP地址\n\n   (难以管理)\n\n  混合体：客户-服务器和对等体系结构\n\n**进程通信**\n\n  客户端进程：发起通信的进程\n\n  服务器进程：等待连接的进程\n\n不同主机，通过交换报文（Message)来通信\n\n使用OS提供的通信服务\n\n按照应用协议交换报文（借助传输层提供的服务）\n\n（P2P架构之间也有客户端服务器进程之分）\n\n问题：\n\n进程表示与寻址问题（服务用户）\n\n传输层-应用层提供服务是如何（服务）\n\n* 位置：层间界面的SAP(TCP/IP: socket)\n* 形式：应用程序接口API(TCP/IP: socket API)\n\n如何使用传输层提供的服务，实现应用进程之间的报文交换，实现应用（用户使用服务）\n\n定义应用层协议：报文格式、解释、时序等\n\n编制程序，使用OS提供的API,调用网络基础设施提供的通信服务传报文，实现应用时序。\n\n#### 对进程进行编址\n\n进程为了接受报文，必须有一个唯一标识。\n\n即:SAP\n\n* 主机：唯一的32位IP地址\n\n* 所采用的传输层协议TCP or UDP\n\n* 端口号（Port Number)$(2^{16})$\n\n  web应用HTTP tcp 80，ftp tcp 2, Mail: tcp 25\n\n* 一个进程：用IP+port标识，端节点\n\n#### 传输层提供服务-需要穿过层间的信息\n\n* 要传输的报文（SDU)\n* 谁传的：自己应用进程标识\n* 传给谁：对方应用进程标识（IP+TCP(UDP)端口号\n\n传输层实体（tcp或udp实体）根据这些信息进行TCP报文段（UDP数据报）的封装\n\n* 源端口号、目标端口号、数据等\n* 将IP地址往下交IP实体，用于封装IP数据报，源IP,目标IP.\n\n如果Socket API每次传输报文都携带如此多的信息，太繁琐易错，不便于管理。\n\n用个代号标示通信的双方或者单方：socket\n\n就像OS打开文件返回的句柄\n\n* TCP socket:\n\n  * TCP服务。两个进程之间的通信要先建立连接\n  * 可以用一个整数表示两个应用实体之间的通信关系，本地标识。\n  * 穿过层间接口的信息量最小\n  * TCP socket :源IP，源端口，目标IP,目标端口\n\n  对于面向连接服务TCP的应用而言，套接字是4元组的一个具有本地意义的标示。\n\n  * 4元组（:源IP，源port，目标IP,目标port\n  * 唯一指定了一个会话（2个进程之间的会话关系\n  * 应用这个标识，与远程的应用进程通信\n  * 不必在每一个报文的发送都指定这四元组\n  * 简单、便于管理。\n\n* UDP socket\n\n  * UDP服务，两个进程之间通信无需建立连接\n  * 每个报文都是独立传输\n  * 前后报文可能给不同的分布式进程\n  * 只能用一个整数标识本应用实体的标识\n  * 穿过层间接口的信息大小最小\n  * UPD socket:本IP,本端口\n  * 传输报文时，必须提供对方IP、port\n\n  对于UDP,套接字是2元组的一个具有本地意义的标识。\n\n  2元组：IP、port\n\n  UDP套接字制定了应用所在的一个端节点（end point)\n\n**套接字**（socket)\n\n进程向套接字发送报文或从套接字接受报文\n\n套接字<->门户\n\n发送进程将报文推出门户，发送进程依赖于传输层设施在另一侧的门将报文交付给接受进程\n\n接收进程从另外一端的门户收到报文（依赖于传输层设施）\n\n#### 如何使用传输层提供的服务实现应用\n\n定义应用层协议：报文格式、解释、时序等\n\n编制程序，使用API调用网络基础设施提供的通信服务传报文，解析报文、实现应用时序等。\n\n##### 应用层协议\n\n定义了：运行在不同端系统上的应用**进程**如何相互交换报文\n\n交换报文类型：请求与应答报文\n\n各种报文类型语法：报文中的各个字段及其描述\n\n字段的语义：即字段取值的含义\n\n进程何时、如何发送报文及对报文进行响应的规则\n\n* 应用协议仅仅是应用的一个组成部分。\n\n  Web应用：HTTP协议，web客户端、web服务器、HTML\n\n* 公开协议\n\n  由RFC文档定义\n\n  允许互操作\n\n  如HTTP,SMTP\n\n* 专用协议\n\n  协议不公开 Skype\n\n性能要求：\n\n* 数据丢失率\n* 延迟\n* 吞吐\n* 安全性（机密性、完整性、可认证性\n\nInternet传输层提供的服务\n\n**TCP服务**\n\n* 可靠的传输服务\n* 流量控制：发送方不会淹没接受方\n* 拥塞控制：当网络出现拥塞，能抑制发送方\n* 不能提供的服务：时间保证、最小吞吐保证和安全\n* 面向连接：要求在客户端进程与服务器进程之间建立连接\n\n**UDP服务**\n\n* 不可靠数据传输\n* 不提供服务：可靠、流量控制、拥塞控制、时间、带宽保证、建立连接\n\nUDP存在的必要性\n\n* 能够区分不同的进程，而IP服务不能\n\n  * 在IP提供的主机到主机端到端功能基础上，区分了主机的应用进程。\n\n* 无需建立连接、省去了建立连接时间、适合事务性应用\n\n* 不做可靠性工作，如检错重发，适合于实时性要求高正确性要求低的应用\n\n* 没用拥塞流量控制、应用能够按照设定的速度发送数据\n\n  * 在TCP上的应用，应用发送数据的速度和主机向网络发送的实际速度不一样，因为由流量、拥塞控制。\n\n    \n\n安全TCP\n\nTCP&UDP\n\n* 都没有加密\n* 明文通过互联网传输\n\nSSL\n\n* 在TCP上面实现，提供加密的TCP连接\n* 私密性\n* 数据完整性\n* 端到端的鉴别\n* SSL在应用层，应用采用SSL库，SSL库采用TCP通信\n* 应用通过API将明文给socket,SSL将其加密在互联网上传播\n\n  #### Web与HTTP\n\nWeb页：由一些对象组成\n\n对象可以是HTML文件、JPEG图像、Java小程序、声音剪辑文件等\n\nWeb页含有一个基本的HTML文件、该基本HTML文件又包含若干对象的引用（链接）\n\n通过URL对每个对象进行引用\n\n* 访问协议、用户名、口令字、端口等\n\nURL格式：\n\nProt://user:psw@www.someSchool.edu/someDept/pic.gif:port\n\n协议名 用户名:口令 主机名[:port]                             路径名     端口\n\nHTTP概况\n\nHTTP:超文本传输协议\n\n* Web的应用层协议\n\n* 客户/服务器模式\n\n  * 客户：请求、接收和显示Web对象的浏览器\n  * 服务器：对请求进行响应，发送对象的Web服务器\n\n  HTTP request HTTP response\n\n* 使用TCP\n\n  * 客户发起一个与服务器的TCP链接（建立套接字）端口号为80\n  * 服务器接受客户的TCP链接\n  * 在浏览器（HTTP客户端）与Web服务器（HTTP服务器server)交换HTTP报文（应用层协议报文）\n  * TCP连接关闭\n\n* HTTP是无状态的\n\n  服务器不维护关于客户的任何信息\n\n  维护状态的协议很复杂，必须维护历史信息\n\n  如果服务器、客户端死机，他们的状态信息不一致\n\n  无状态的服务器能支持更多的客户端\n\n* HTTP链接\n\n  * 非持久HTTP\n\n    最多只有一个对象在TCP连接上发送\n\n    下载多个对象需要多个TCP链接\n\n    HTTP/1.0使用非持久连接\n\n  * 持久HTTP\n\n    多个对象可以在一个TCP连接上传输\n\n    HTTP/1.1默认采用持久连接\n\n* 响应时间模型：\n\n  往返时间RTT(round-trip time):一个小的分组从客户端到服务器，再回到客户端的时间（传输时间忽略）\n\n  **响应时间**：\n\n  一个RTT用来发起TCP连接\n\n  一个RTT用来HTTP请求并等待HTTP响应\n\n  文件传输时间：\n\n  2*RTT+传输时间\n\n* 非持久HTTP缺点：\n\n  * 每个对象要2个RTT\n  * 操作系统必须为每个TCP连接分配资源\n  * 但浏览器通常打开并行TCP连接、以获取引用对象\n\n* 持久HTTP\n\n  * 服务器在发送响应后仍保持TCP链接\n  * 在相同客户端服务器之间的后续请求和响应报文通过相同的链接进行传送。\n  * 客户端在遇到一个引用对象的时候，可以尽快发送该对象的请求\n  * 非流水方式的持久HTTP:\n    * 客户端只能在收到前一个响应后才能发出新的请求\n    * 每个引用对象花费一个RTT\n  * 流水方式的持久HTTP\n    * HTTP/1.1默认模式\n    * 客户端遇到一个引用对象就立即发送一个请求\n    * 所有引用对象只花费一个RTT是可能的\n\n##### HTTP请求报文\n\n* 两种类型的HTTP报文：请求、响应\n\n* HTTP请求报文\n\n  * ASCII\n\n    ```shell\n    GET /somedir/page.html HTTP/1.1 /*请求行（GET、POST（上载）、HEAD（头）命令*/\n    /*首部行*/\n    Host: www.someschool.edu 主机名\n    User-agent:Mozilla/4.0 用户代理程序、浏览器版本\n    Connection:close 关连接\n    Accept-language:fr\n    \n    （一个额外的换行回车符，标识报文结束\n    ```\n\n\n**提交表单输入**\n\n* Post方式\n  * 网页通常包括表单输入\n  * 包含在实体主体（entity body)中输入被提交到服务器\n\n* URL方式\n\n  * 方法：GET\n\n  * 输入通过请求行的URL字段上载\n\n    www.somesite.com/animalsearch?monkeys&banana\n\n    http://www.baidu.com/s?wd=xx+yy+zzz&cl=3\n\n    参数：wd.cl\n\n    参数值XX+YY+zzz, 3\n\nHTTP/1.1\n\n* PUT 将实体主体中的文件载到URL字段规定的路径\n* DELETE删除URL字段规定的文件\n\n![img1](D:\\blog\\source\\_posts\\网络\\img1.png)\n\nHTTP响应状态码：\n\n200 OK\n\n301 Moved Permanently\n\n400 Bad Request\n\n404 Not Found\n\n505 HTTP Version Not Supported\n\n##### 用户-服务器状态：cookies\n\n4个组成部分：\n\n1）在HTTP响应报文中有一个cookie的首部行\n\n2）在HTTP请求报文中含有一个cookie首部行\n\n3）在用户端系统中保留有一个cookie文件，由用户的浏览器管理\n\n4）在Web站点有一个后端数据库\n\n* Cookies能\n  * 用户验证\n  * 购物车\n  * 推荐\n  * 用户状态（Web e-mail)\n* 如何维持状态\n  * 协议端节点：在多个事务上，发送端和接收端维持状态\n  * cookies: http报文携带状态信息\n\n##### Web缓存（代理服务器）\n\n目标：不访问原始服务器，就满足客户请求\n\n用户设置浏览器：通过缓存访问Web\n\n浏览器将所有HTTP请求发给缓存\n\n* 在缓存中的对象：缓存直接返回对象\n* 不在缓存中，缓存请求原始服务器\n\n缓存既是客户端又是服务器\n\n通常缓存是由ISP安装\n\n为什么要使用缓存？\n\n* 降低客户端的请求响应时间\n* 可以大大减少一个机构内部网络与Internet接入链路上的流量\n* 互联网大量采用了缓存，可以是较弱的ICP也能有效提供内容。\n\n条件GET方法\n\n* 目标：如果缓存器中的对象拷贝是最新的，就不要发送对象\n\n* 缓存器：在HTTP请求中指定缓存拷贝的日期\n\n  If-modified-since <date>\n\n* 服务器：如果缓存拷贝陈旧，则响应报文没包含对象：\n\n  HTTP/1.0 304 Not Modified\n","source":"_posts/网络.md","raw":"---\ntitle: 网络\ndate: 2021-05-24 14:05:43\ntags:\n---\n\n* 节点\n\n  主机或运行在其上面的应用程序\n\n  路由器（网络层）交换机（链路层）等网络交换设备\n\n* 边：(通讯链路)\n\n  接入网链路\n\n  主干链路\n\n* 协议\n\n  对等层实体在通信过程中应遵守的规则集合。\n\n  协议定义了在两个或多个通信实体之间交换的报文**格式**和**次序**，以及在报文传输和/或接收或其他事件方面所采取的**动作**。\n\n* 互联网\n\n​       分布式应用，以及为分布式应用提供通信服务的基础设施。\n\n* 网络结构\n\n  * 网络边缘\n\n    主机、应用程序\n\n  * 网络核心\n\n    互联着的路由器、网络的网络\n\n  * 接入网、物理媒体\n\n    有线或者无线通信链路\n\n* 网络边缘\n\n  * 客户端、服务器模式\n\n  客户端向服务器请求、接收服务\n\n  问题：可扩展性差，随着请求载荷增加，性能变差。\n\n  * 对等（peer-peer）模式\n\n  面向连接的通信方式（仅端系统连接）\n\n  有连接\n\n  **TCP**\n\n  可靠、保序\n\n  流量控制\n\n  拥塞控制\n\n  **UDP**\n\n  无连接、不可靠、无流量、拥塞控制\n\n* 网络核心\n\n  路由器的网状网络\n\n  数据怎么通过网络进行传输？\n\n  * 电路交换\n\n  端到端的资源被分配给从源端到目标端的呼叫\n\n  独享资源（每个呼叫一旦建立起来就能保证性能）\n\n  如果呼叫没有数据发送，被分配的资源会被浪费\n\n  通常被传统电话网络采用\n\n  网络资源（如带宽）被分成片\n\n  为呼叫分配片\n\n  如果某个呼叫没有数据，则其资源片处于空闲状态\n\n  将带宽分成片\n\n  频分、时分、波分\n\n  连接建立时间长\n\n  计算机通信有突发性，如果使用线路交换则浪费的片较多\n\n  可靠性不高\n\n  * 分组交换\n\n  以分组为单位存储转发方式\n\n  被传输到下一个链路之前，整个分组必须到达路由器，**存储转发**\n\n  在一个速率为R bps的链路，一个长度为L bits的分组的存储转发延时：L/R s.\n\n  排队与延迟\n\n  **如果到达速率>链路传输速率**：\n\n  分组将会排队，等待传输\n\n  如果路由器缓存用完了，分组将会被抛弃\n\n  * 网络核心的关键功能\n\n    路由：决定分组采用的源到目标的路径\n\n    转发：将分组从路由器的输入链路转移到输出链路。\n\n    统计多路复用\n\n  分组交换允许更多用户使用网络。\n\n  适合于对突发式数据传输\n\n  * 资源共享\n  * 简单、不必建立呼叫\n\n  过度使用会造成网络拥塞\n\n  分组交换网络按照有无网络层连接：\n\n  * 数据报网络(不建立连接)\n\n    分组的目标地址决定下一跳\n\n    在不同阶段，路由可以改变\n\n  * 虚电路网络（有连接）\n\n\n* 接入网与物理媒体\n\n  住宅接入：modem\n\n  企业接入网络\n\n  无线接入网络\n\n  (无线LANs、广域无线接入)\n\n  物理媒体\n\n  物理链路：在每个传输-接收对，跨越一种物理媒体\n\n  * 导引型媒体\n\n    信号沿着固体媒介被导引，（同轴电缆、光纤、双绞线、光缆）\n\n  * 非导引型媒体\n\n    信号自由传播，如无线电\n\n* Internet结构和ISP\n\n  端系统通过接入ISPs（Internet Service Providers）接入到互联网\n\n  接入ISPs相应的必须是互联的\n\n* 在路由器缓存区得分组队列\n\n  分组到达链路得速率超过了链路输出能力\n\n  分组等待排到队头，被输出\n\n  * 节点处理延时\n\n    检查bit级差错\n\n    检查分组首部和决定将分组导向何处\n\n  * 排队延时\n\n    在输出链路上等待输出的时间\n\n    依赖于路由器的拥塞程度\n\n  * 传输延时\n\n    R = 链路带宽（bps)\n\n    L = 分组长度（bits)\n\n    将分组发送到链路上的时间L/R\n\n    存储转发延时\n\n  * 传播延时\n\n    d = 物理链路长度\n\n    s = 在媒体上的传播速度$(2*10^8m/s)$\n\n    传播延时 = d/s\n\n  * 流量强度\n\n    $I = La/R$\n\n    $R$=链路带宽（bps)\n\n    $L$=分组长度（bits)\n\n    $a$=分组到达队列的平均速率\n\n  * 分组丢失\n\n    链路队列缓冲区容量有限\n\n    当分组到达一个满的队列时，该分组会丢失\n\n    丢失的分组可能会被前一个节点或源端系统重传或根本不重传。\n\n  * 吞吐量\n\n    在源端和目标端之间传输的速率（数据量/单位时间）\n\n    瞬间吞吐量：在一个时间点的速率\n\n    平均吞吐量：在一个长时间内的平均值\n\n  \n\n* 协议层次及服务模型\n\n  将网络复杂功能分成功能明确的层次，每一层实现了其中一个或一组功能，功能中有其上层可以使用的功能：服务。\n\n  本层协议实体相互交互执行本层的协议动作，目的是实现本层功能，通过接口为上层提供更好的服务。\n\n  在实现本层协议的时候，直接利用了下层所提供的服务。\n\n  本层的服务：借助下层服务实现的本层协议实体之间的交互带来的新功能（上层可以利用的）+更下层所提供的服务。\n\n  * 服务（Service):底层实体向上层实体提供它们之间的通信能力。服务用户（service user) 服务提供者（service provider)\n\n  * 原语（primitive):上层使用下层服务的形式，高层使用低层提供的服务，以及底层向高层提供服务都是通过服务访问源于来进行交互的--形式\n\n  * 服务访问点SAP(Services Access Point):上层使用下层提供的服务通过层间的接口--地点：\n\n    地址（address)：下层的一个实体支撑着上层的多个实体，SAP有标志不同上层实体的作用。 \n\n    传输层的SAP、端口\n\n  * 面向连接的服务、无连接的服务。\n\n  * **服务与协议的区别**\n\n    服务(service)：底层实体向上层实体提供它们之间的通信的能力，是通过原语(primitive)来操作的，垂直\n\n    协议（protocol）：对等层(peer entity)实体之间在互相通信过程中需要遵循的规则的集合，水平\n\n  * 服务与协议的联系\n\n    本层的协议实现要靠下层提供的服务来实现。\n\n    本层实体通过协议为上层提供更高级的服务。\n\n  * 数据单元（SDU,ICI,PDU)\n\n  * Internet协议栈\n\n    **应用层**：网络应用（应用报文与应用报文交互\n\n    为人类用户或其他应用进程提供网络应用服务。\n\n    FTP,SMTP,HTTP,DNS\n\n    **传输层**：主机之间的数据传输(进程到进程传输、不可靠变为可靠\n\n    在网络层提供的端到端通信基础上，细分为进程到进程，将不可靠通信变成可靠地通信。\n\n    TCP,UDP\n\n    **网络层**：为数据报从源到目的选择路由（传输以分组为单位端到端的数据 E2E\n\n    主机主机之间的通信、端到端通信，不可靠\n\n    IP、路由协议\n\n    **链路层**：相邻网络节点之间的数据传输（在相邻两点之间传输以帧为单位的数据 P2P\n\n    2个相邻2点的通信，点到点的通信，可靠或不可靠。\n\n    点对对协议PPP,802.11(Wifi),Ethernet\n\n    **物理层**：在线路上传送bit,（把输入数据转成物理信号\n\n  * ISO/OSI参考模型：\n\n    表示层：允许应用解释传输的数据 e.g.加密、压缩、机器相关的表示转换\n\n    会话层：数据交换的同步、检查点、恢复(建立会话、维持会话)\n\n  * 各层次的协议数据单元\n\n    应用层：报文（message)\n\n    传输层：报文段（segment); TCP段，UDP数据报\n\n    网络层：分组packet(如果无连接方式：数据报（datagram))\n\n    数据链路层：帧（frame）\n\n    物理层：位（bit)\n\n  \n\n  \n\n### 应用层\n\n#### 网络应用的体系结构\n\n**可能的应用架构**\n\n  客户-服务器模式（C/S:Client/Serve)\n\n  * 服务器\n  \n    一直运行\n  \n    固定的IP地址和周知的端口号（约定）\n  \n    扩展性：服务器场（数据中心进行扩展，扩展性差，可靠性差）\n  \n  * 客户端\n  \n    主动与服务器通信\n  \n    与互联网有间歇性的连接\n  \n    可能是动态IP地址\n  \n    不直接与其他客户端通信\n\n  对等模式（P2P:Peer to Peer)\n\n  * 几乎没有一直运行的服务器\n  * 任意端系统之间可以通信\n  * 每一个节点既是客户端又是服务器\n  * 参与的主机间歇性连接且可以改变IP地址\n\n   (难以管理)\n\n  混合体：客户-服务器和对等体系结构\n\n**进程通信**\n\n  客户端进程：发起通信的进程\n\n  服务器进程：等待连接的进程\n\n不同主机，通过交换报文（Message)来通信\n\n使用OS提供的通信服务\n\n按照应用协议交换报文（借助传输层提供的服务）\n\n（P2P架构之间也有客户端服务器进程之分）\n\n问题：\n\n进程表示与寻址问题（服务用户）\n\n传输层-应用层提供服务是如何（服务）\n\n* 位置：层间界面的SAP(TCP/IP: socket)\n* 形式：应用程序接口API(TCP/IP: socket API)\n\n如何使用传输层提供的服务，实现应用进程之间的报文交换，实现应用（用户使用服务）\n\n定义应用层协议：报文格式、解释、时序等\n\n编制程序，使用OS提供的API,调用网络基础设施提供的通信服务传报文，实现应用时序。\n\n#### 对进程进行编址\n\n进程为了接受报文，必须有一个唯一标识。\n\n即:SAP\n\n* 主机：唯一的32位IP地址\n\n* 所采用的传输层协议TCP or UDP\n\n* 端口号（Port Number)$(2^{16})$\n\n  web应用HTTP tcp 80，ftp tcp 2, Mail: tcp 25\n\n* 一个进程：用IP+port标识，端节点\n\n#### 传输层提供服务-需要穿过层间的信息\n\n* 要传输的报文（SDU)\n* 谁传的：自己应用进程标识\n* 传给谁：对方应用进程标识（IP+TCP(UDP)端口号\n\n传输层实体（tcp或udp实体）根据这些信息进行TCP报文段（UDP数据报）的封装\n\n* 源端口号、目标端口号、数据等\n* 将IP地址往下交IP实体，用于封装IP数据报，源IP,目标IP.\n\n如果Socket API每次传输报文都携带如此多的信息，太繁琐易错，不便于管理。\n\n用个代号标示通信的双方或者单方：socket\n\n就像OS打开文件返回的句柄\n\n* TCP socket:\n\n  * TCP服务。两个进程之间的通信要先建立连接\n  * 可以用一个整数表示两个应用实体之间的通信关系，本地标识。\n  * 穿过层间接口的信息量最小\n  * TCP socket :源IP，源端口，目标IP,目标端口\n\n  对于面向连接服务TCP的应用而言，套接字是4元组的一个具有本地意义的标示。\n\n  * 4元组（:源IP，源port，目标IP,目标port\n  * 唯一指定了一个会话（2个进程之间的会话关系\n  * 应用这个标识，与远程的应用进程通信\n  * 不必在每一个报文的发送都指定这四元组\n  * 简单、便于管理。\n\n* UDP socket\n\n  * UDP服务，两个进程之间通信无需建立连接\n  * 每个报文都是独立传输\n  * 前后报文可能给不同的分布式进程\n  * 只能用一个整数标识本应用实体的标识\n  * 穿过层间接口的信息大小最小\n  * UPD socket:本IP,本端口\n  * 传输报文时，必须提供对方IP、port\n\n  对于UDP,套接字是2元组的一个具有本地意义的标识。\n\n  2元组：IP、port\n\n  UDP套接字制定了应用所在的一个端节点（end point)\n\n**套接字**（socket)\n\n进程向套接字发送报文或从套接字接受报文\n\n套接字<->门户\n\n发送进程将报文推出门户，发送进程依赖于传输层设施在另一侧的门将报文交付给接受进程\n\n接收进程从另外一端的门户收到报文（依赖于传输层设施）\n\n#### 如何使用传输层提供的服务实现应用\n\n定义应用层协议：报文格式、解释、时序等\n\n编制程序，使用API调用网络基础设施提供的通信服务传报文，解析报文、实现应用时序等。\n\n##### 应用层协议\n\n定义了：运行在不同端系统上的应用**进程**如何相互交换报文\n\n交换报文类型：请求与应答报文\n\n各种报文类型语法：报文中的各个字段及其描述\n\n字段的语义：即字段取值的含义\n\n进程何时、如何发送报文及对报文进行响应的规则\n\n* 应用协议仅仅是应用的一个组成部分。\n\n  Web应用：HTTP协议，web客户端、web服务器、HTML\n\n* 公开协议\n\n  由RFC文档定义\n\n  允许互操作\n\n  如HTTP,SMTP\n\n* 专用协议\n\n  协议不公开 Skype\n\n性能要求：\n\n* 数据丢失率\n* 延迟\n* 吞吐\n* 安全性（机密性、完整性、可认证性\n\nInternet传输层提供的服务\n\n**TCP服务**\n\n* 可靠的传输服务\n* 流量控制：发送方不会淹没接受方\n* 拥塞控制：当网络出现拥塞，能抑制发送方\n* 不能提供的服务：时间保证、最小吞吐保证和安全\n* 面向连接：要求在客户端进程与服务器进程之间建立连接\n\n**UDP服务**\n\n* 不可靠数据传输\n* 不提供服务：可靠、流量控制、拥塞控制、时间、带宽保证、建立连接\n\nUDP存在的必要性\n\n* 能够区分不同的进程，而IP服务不能\n\n  * 在IP提供的主机到主机端到端功能基础上，区分了主机的应用进程。\n\n* 无需建立连接、省去了建立连接时间、适合事务性应用\n\n* 不做可靠性工作，如检错重发，适合于实时性要求高正确性要求低的应用\n\n* 没用拥塞流量控制、应用能够按照设定的速度发送数据\n\n  * 在TCP上的应用，应用发送数据的速度和主机向网络发送的实际速度不一样，因为由流量、拥塞控制。\n\n    \n\n安全TCP\n\nTCP&UDP\n\n* 都没有加密\n* 明文通过互联网传输\n\nSSL\n\n* 在TCP上面实现，提供加密的TCP连接\n* 私密性\n* 数据完整性\n* 端到端的鉴别\n* SSL在应用层，应用采用SSL库，SSL库采用TCP通信\n* 应用通过API将明文给socket,SSL将其加密在互联网上传播\n\n  #### Web与HTTP\n\nWeb页：由一些对象组成\n\n对象可以是HTML文件、JPEG图像、Java小程序、声音剪辑文件等\n\nWeb页含有一个基本的HTML文件、该基本HTML文件又包含若干对象的引用（链接）\n\n通过URL对每个对象进行引用\n\n* 访问协议、用户名、口令字、端口等\n\nURL格式：\n\nProt://user:psw@www.someSchool.edu/someDept/pic.gif:port\n\n协议名 用户名:口令 主机名[:port]                             路径名     端口\n\nHTTP概况\n\nHTTP:超文本传输协议\n\n* Web的应用层协议\n\n* 客户/服务器模式\n\n  * 客户：请求、接收和显示Web对象的浏览器\n  * 服务器：对请求进行响应，发送对象的Web服务器\n\n  HTTP request HTTP response\n\n* 使用TCP\n\n  * 客户发起一个与服务器的TCP链接（建立套接字）端口号为80\n  * 服务器接受客户的TCP链接\n  * 在浏览器（HTTP客户端）与Web服务器（HTTP服务器server)交换HTTP报文（应用层协议报文）\n  * TCP连接关闭\n\n* HTTP是无状态的\n\n  服务器不维护关于客户的任何信息\n\n  维护状态的协议很复杂，必须维护历史信息\n\n  如果服务器、客户端死机，他们的状态信息不一致\n\n  无状态的服务器能支持更多的客户端\n\n* HTTP链接\n\n  * 非持久HTTP\n\n    最多只有一个对象在TCP连接上发送\n\n    下载多个对象需要多个TCP链接\n\n    HTTP/1.0使用非持久连接\n\n  * 持久HTTP\n\n    多个对象可以在一个TCP连接上传输\n\n    HTTP/1.1默认采用持久连接\n\n* 响应时间模型：\n\n  往返时间RTT(round-trip time):一个小的分组从客户端到服务器，再回到客户端的时间（传输时间忽略）\n\n  **响应时间**：\n\n  一个RTT用来发起TCP连接\n\n  一个RTT用来HTTP请求并等待HTTP响应\n\n  文件传输时间：\n\n  2*RTT+传输时间\n\n* 非持久HTTP缺点：\n\n  * 每个对象要2个RTT\n  * 操作系统必须为每个TCP连接分配资源\n  * 但浏览器通常打开并行TCP连接、以获取引用对象\n\n* 持久HTTP\n\n  * 服务器在发送响应后仍保持TCP链接\n  * 在相同客户端服务器之间的后续请求和响应报文通过相同的链接进行传送。\n  * 客户端在遇到一个引用对象的时候，可以尽快发送该对象的请求\n  * 非流水方式的持久HTTP:\n    * 客户端只能在收到前一个响应后才能发出新的请求\n    * 每个引用对象花费一个RTT\n  * 流水方式的持久HTTP\n    * HTTP/1.1默认模式\n    * 客户端遇到一个引用对象就立即发送一个请求\n    * 所有引用对象只花费一个RTT是可能的\n\n##### HTTP请求报文\n\n* 两种类型的HTTP报文：请求、响应\n\n* HTTP请求报文\n\n  * ASCII\n\n    ```shell\n    GET /somedir/page.html HTTP/1.1 /*请求行（GET、POST（上载）、HEAD（头）命令*/\n    /*首部行*/\n    Host: www.someschool.edu 主机名\n    User-agent:Mozilla/4.0 用户代理程序、浏览器版本\n    Connection:close 关连接\n    Accept-language:fr\n    \n    （一个额外的换行回车符，标识报文结束\n    ```\n\n\n**提交表单输入**\n\n* Post方式\n  * 网页通常包括表单输入\n  * 包含在实体主体（entity body)中输入被提交到服务器\n\n* URL方式\n\n  * 方法：GET\n\n  * 输入通过请求行的URL字段上载\n\n    www.somesite.com/animalsearch?monkeys&banana\n\n    http://www.baidu.com/s?wd=xx+yy+zzz&cl=3\n\n    参数：wd.cl\n\n    参数值XX+YY+zzz, 3\n\nHTTP/1.1\n\n* PUT 将实体主体中的文件载到URL字段规定的路径\n* DELETE删除URL字段规定的文件\n\n![img1](D:\\blog\\source\\_posts\\网络\\img1.png)\n\nHTTP响应状态码：\n\n200 OK\n\n301 Moved Permanently\n\n400 Bad Request\n\n404 Not Found\n\n505 HTTP Version Not Supported\n\n##### 用户-服务器状态：cookies\n\n4个组成部分：\n\n1）在HTTP响应报文中有一个cookie的首部行\n\n2）在HTTP请求报文中含有一个cookie首部行\n\n3）在用户端系统中保留有一个cookie文件，由用户的浏览器管理\n\n4）在Web站点有一个后端数据库\n\n* Cookies能\n  * 用户验证\n  * 购物车\n  * 推荐\n  * 用户状态（Web e-mail)\n* 如何维持状态\n  * 协议端节点：在多个事务上，发送端和接收端维持状态\n  * cookies: http报文携带状态信息\n\n##### Web缓存（代理服务器）\n\n目标：不访问原始服务器，就满足客户请求\n\n用户设置浏览器：通过缓存访问Web\n\n浏览器将所有HTTP请求发给缓存\n\n* 在缓存中的对象：缓存直接返回对象\n* 不在缓存中，缓存请求原始服务器\n\n缓存既是客户端又是服务器\n\n通常缓存是由ISP安装\n\n为什么要使用缓存？\n\n* 降低客户端的请求响应时间\n* 可以大大减少一个机构内部网络与Internet接入链路上的流量\n* 互联网大量采用了缓存，可以是较弱的ICP也能有效提供内容。\n\n条件GET方法\n\n* 目标：如果缓存器中的对象拷贝是最新的，就不要发送对象\n\n* 缓存器：在HTTP请求中指定缓存拷贝的日期\n\n  If-modified-since <date>\n\n* 服务器：如果缓存拷贝陈旧，则响应报文没包含对象：\n\n  HTTP/1.0 304 Not Modified\n","slug":"网络","published":1,"updated":"2021-05-26T12:58:39.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp6e3ymf0001s4uj20qbcupr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><ul>\n<li><p>节点</p>\n<p>主机或运行在其上面的应用程序</p>\n<p>路由器（网络层）交换机（链路层）等网络交换设备</p>\n</li>\n<li><p>边：(通讯链路)</p>\n<p>接入网链路</p>\n<p>主干链路</p>\n</li>\n<li><p>协议</p>\n<p>对等层实体在通信过程中应遵守的规则集合。</p>\n<p>协议定义了在两个或多个通信实体之间交换的报文<strong>格式</strong>和<strong>次序</strong>，以及在报文传输和/或接收或其他事件方面所采取的<strong>动作</strong>。</p>\n</li>\n<li><p>互联网</p>\n</li>\n</ul>\n<p>​       分布式应用，以及为分布式应用提供通信服务的基础设施。</p>\n<ul>\n<li><p>网络结构</p>\n<ul>\n<li><p>网络边缘</p>\n<p>主机、应用程序</p>\n</li>\n<li><p>网络核心</p>\n<p>互联着的路由器、网络的网络</p>\n</li>\n<li><p>接入网、物理媒体</p>\n<p>有线或者无线通信链路</p>\n</li>\n</ul>\n</li>\n<li><p>网络边缘</p>\n<ul>\n<li>客户端、服务器模式</li>\n</ul>\n<p>客户端向服务器请求、接收服务</p>\n<p>问题：可扩展性差，随着请求载荷增加，性能变差。</p>\n<ul>\n<li>对等（peer-peer）模式</li>\n</ul>\n<p>面向连接的通信方式（仅端系统连接）</p>\n<p>有连接</p>\n<p><strong>TCP</strong></p>\n<p>可靠、保序</p>\n<p>流量控制</p>\n<p>拥塞控制</p>\n<p><strong>UDP</strong></p>\n<p>无连接、不可靠、无流量、拥塞控制</p>\n</li>\n<li><p>网络核心</p>\n<p>路由器的网状网络</p>\n<p>数据怎么通过网络进行传输？</p>\n<ul>\n<li>电路交换</li>\n</ul>\n<p>端到端的资源被分配给从源端到目标端的呼叫</p>\n<p>独享资源（每个呼叫一旦建立起来就能保证性能）</p>\n<p>如果呼叫没有数据发送，被分配的资源会被浪费</p>\n<p>通常被传统电话网络采用</p>\n<p>网络资源（如带宽）被分成片</p>\n<p>为呼叫分配片</p>\n<p>如果某个呼叫没有数据，则其资源片处于空闲状态</p>\n<p>将带宽分成片</p>\n<p>频分、时分、波分</p>\n<p>连接建立时间长</p>\n<p>计算机通信有突发性，如果使用线路交换则浪费的片较多</p>\n<p>可靠性不高</p>\n<ul>\n<li>分组交换</li>\n</ul>\n<p>以分组为单位存储转发方式</p>\n<p>被传输到下一个链路之前，整个分组必须到达路由器，<strong>存储转发</strong></p>\n<p>在一个速率为R bps的链路，一个长度为L bits的分组的存储转发延时：L/R s.</p>\n<p>排队与延迟</p>\n<p><strong>如果到达速率&gt;链路传输速率</strong>：</p>\n<p>分组将会排队，等待传输</p>\n<p>如果路由器缓存用完了，分组将会被抛弃</p>\n<ul>\n<li><p>网络核心的关键功能</p>\n<p>路由：决定分组采用的源到目标的路径</p>\n<p>转发：将分组从路由器的输入链路转移到输出链路。</p>\n<p>统计多路复用</p>\n</li>\n</ul>\n<p>分组交换允许更多用户使用网络。</p>\n<p>适合于对突发式数据传输</p>\n<ul>\n<li>资源共享</li>\n<li>简单、不必建立呼叫</li>\n</ul>\n<p>过度使用会造成网络拥塞</p>\n<p>分组交换网络按照有无网络层连接：</p>\n<ul>\n<li><p>数据报网络(不建立连接)</p>\n<p>分组的目标地址决定下一跳</p>\n<p>在不同阶段，路由可以改变</p>\n</li>\n<li><p>虚电路网络（有连接）</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>接入网与物理媒体</p>\n<p>住宅接入：modem</p>\n<p>企业接入网络</p>\n<p>无线接入网络</p>\n<p>(无线LANs、广域无线接入)</p>\n<p>物理媒体</p>\n<p>物理链路：在每个传输-接收对，跨越一种物理媒体</p>\n<ul>\n<li><p>导引型媒体</p>\n<p>信号沿着固体媒介被导引，（同轴电缆、光纤、双绞线、光缆）</p>\n</li>\n<li><p>非导引型媒体</p>\n<p>信号自由传播，如无线电</p>\n</li>\n</ul>\n</li>\n<li><p>Internet结构和ISP</p>\n<p>端系统通过接入ISPs（Internet Service Providers）接入到互联网</p>\n<p>接入ISPs相应的必须是互联的</p>\n</li>\n<li><p>在路由器缓存区得分组队列</p>\n<p>分组到达链路得速率超过了链路输出能力</p>\n<p>分组等待排到队头，被输出</p>\n<ul>\n<li><p>节点处理延时</p>\n<p>检查bit级差错</p>\n<p>检查分组首部和决定将分组导向何处</p>\n</li>\n<li><p>排队延时</p>\n<p>在输出链路上等待输出的时间</p>\n<p>依赖于路由器的拥塞程度</p>\n</li>\n<li><p>传输延时</p>\n<p>R = 链路带宽（bps)</p>\n<p>L = 分组长度（bits)</p>\n<p>将分组发送到链路上的时间L/R</p>\n<p>存储转发延时</p>\n</li>\n<li><p>传播延时</p>\n<p>d = 物理链路长度</p>\n<p>s = 在媒体上的传播速度$(2*10^8m/s)$</p>\n<p>传播延时 = d/s</p>\n</li>\n<li><p>流量强度</p>\n<p>$I = La/R$</p>\n<p>$R$=链路带宽（bps)</p>\n<p>$L$=分组长度（bits)</p>\n<p>$a$=分组到达队列的平均速率</p>\n</li>\n<li><p>分组丢失</p>\n<p>链路队列缓冲区容量有限</p>\n<p>当分组到达一个满的队列时，该分组会丢失</p>\n<p>丢失的分组可能会被前一个节点或源端系统重传或根本不重传。</p>\n</li>\n<li><p>吞吐量</p>\n<p>在源端和目标端之间传输的速率（数据量/单位时间）</p>\n<p>瞬间吞吐量：在一个时间点的速率</p>\n<p>平均吞吐量：在一个长时间内的平均值</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>协议层次及服务模型</p>\n<p>将网络复杂功能分成功能明确的层次，每一层实现了其中一个或一组功能，功能中有其上层可以使用的功能：服务。</p>\n<p>本层协议实体相互交互执行本层的协议动作，目的是实现本层功能，通过接口为上层提供更好的服务。</p>\n<p>在实现本层协议的时候，直接利用了下层所提供的服务。</p>\n<p>本层的服务：借助下层服务实现的本层协议实体之间的交互带来的新功能（上层可以利用的）+更下层所提供的服务。</p>\n<ul>\n<li><p>服务（Service):底层实体向上层实体提供它们之间的通信能力。服务用户（service user) 服务提供者（service provider)</p>\n</li>\n<li><p>原语（primitive):上层使用下层服务的形式，高层使用低层提供的服务，以及底层向高层提供服务都是通过服务访问源于来进行交互的—形式</p>\n</li>\n<li><p>服务访问点SAP(Services Access Point):上层使用下层提供的服务通过层间的接口—地点：</p>\n<p>地址（address)：下层的一个实体支撑着上层的多个实体，SAP有标志不同上层实体的作用。 </p>\n<p>传输层的SAP、端口</p>\n</li>\n<li><p>面向连接的服务、无连接的服务。</p>\n</li>\n<li><p><strong>服务与协议的区别</strong></p>\n<p>服务(service)：底层实体向上层实体提供它们之间的通信的能力，是通过原语(primitive)来操作的，垂直</p>\n<p>协议（protocol）：对等层(peer entity)实体之间在互相通信过程中需要遵循的规则的集合，水平</p>\n</li>\n<li><p>服务与协议的联系</p>\n<p>本层的协议实现要靠下层提供的服务来实现。</p>\n<p>本层实体通过协议为上层提供更高级的服务。</p>\n</li>\n<li><p>数据单元（SDU,ICI,PDU)</p>\n</li>\n<li><p>Internet协议栈</p>\n<p><strong>应用层</strong>：网络应用（应用报文与应用报文交互</p>\n<p>为人类用户或其他应用进程提供网络应用服务。</p>\n<p>FTP,SMTP,HTTP,DNS</p>\n<p><strong>传输层</strong>：主机之间的数据传输(进程到进程传输、不可靠变为可靠</p>\n<p>在网络层提供的端到端通信基础上，细分为进程到进程，将不可靠通信变成可靠地通信。</p>\n<p>TCP,UDP</p>\n<p><strong>网络层</strong>：为数据报从源到目的选择路由（传输以分组为单位端到端的数据 E2E</p>\n<p>主机主机之间的通信、端到端通信，不可靠</p>\n<p>IP、路由协议</p>\n<p><strong>链路层</strong>：相邻网络节点之间的数据传输（在相邻两点之间传输以帧为单位的数据 P2P</p>\n<p>2个相邻2点的通信，点到点的通信，可靠或不可靠。</p>\n<p>点对对协议PPP,802.11(Wifi),Ethernet</p>\n<p><strong>物理层</strong>：在线路上传送bit,（把输入数据转成物理信号</p>\n</li>\n<li><p>ISO/OSI参考模型：</p>\n<p>表示层：允许应用解释传输的数据 e.g.加密、压缩、机器相关的表示转换</p>\n<p>会话层：数据交换的同步、检查点、恢复(建立会话、维持会话)</p>\n</li>\n<li><p>各层次的协议数据单元</p>\n<p>应用层：报文（message)</p>\n<p>传输层：报文段（segment); TCP段，UDP数据报</p>\n<p>网络层：分组packet(如果无连接方式：数据报（datagram))</p>\n<p>数据链路层：帧（frame）</p>\n<p>物理层：位（bit)</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><h4 id=\"网络应用的体系结构\"><a href=\"#网络应用的体系结构\" class=\"headerlink\" title=\"网络应用的体系结构\"></a>网络应用的体系结构</h4><p><strong>可能的应用架构</strong></p>\n<p>  客户-服务器模式（C/S:Client/Serve)</p>\n<ul>\n<li><p>服务器</p>\n<p>一直运行</p>\n<p>固定的IP地址和周知的端口号（约定）</p>\n<p>扩展性：服务器场（数据中心进行扩展，扩展性差，可靠性差）</p>\n</li>\n<li><p>客户端</p>\n<p>主动与服务器通信</p>\n<p>与互联网有间歇性的连接</p>\n<p>可能是动态IP地址</p>\n<p>不直接与其他客户端通信</p>\n<p>对等模式（P2P:Peer to Peer)</p>\n</li>\n<li><p>几乎没有一直运行的服务器</p>\n</li>\n<li>任意端系统之间可以通信</li>\n<li>每一个节点既是客户端又是服务器</li>\n<li><p>参与的主机间歇性连接且可以改变IP地址</p>\n<p>(难以管理)</p>\n<p>混合体：客户-服务器和对等体系结构</p>\n</li>\n</ul>\n<p><strong>进程通信</strong></p>\n<p>  客户端进程：发起通信的进程</p>\n<p>  服务器进程：等待连接的进程</p>\n<p>不同主机，通过交换报文（Message)来通信</p>\n<p>使用OS提供的通信服务</p>\n<p>按照应用协议交换报文（借助传输层提供的服务）</p>\n<p>（P2P架构之间也有客户端服务器进程之分）</p>\n<p>问题：</p>\n<p>进程表示与寻址问题（服务用户）</p>\n<p>传输层-应用层提供服务是如何（服务）</p>\n<ul>\n<li>位置：层间界面的SAP(TCP/IP: socket)</li>\n<li>形式：应用程序接口API(TCP/IP: socket API)</li>\n</ul>\n<p>如何使用传输层提供的服务，实现应用进程之间的报文交换，实现应用（用户使用服务）</p>\n<p>定义应用层协议：报文格式、解释、时序等</p>\n<p>编制程序，使用OS提供的API,调用网络基础设施提供的通信服务传报文，实现应用时序。</p>\n<h4 id=\"对进程进行编址\"><a href=\"#对进程进行编址\" class=\"headerlink\" title=\"对进程进行编址\"></a>对进程进行编址</h4><p>进程为了接受报文，必须有一个唯一标识。</p>\n<p>即:SAP</p>\n<ul>\n<li><p>主机：唯一的32位IP地址</p>\n</li>\n<li><p>所采用的传输层协议TCP or UDP</p>\n</li>\n<li><p>端口号（Port Number)$(2^{16})$</p>\n<p>web应用HTTP tcp 80，ftp tcp 2, Mail: tcp 25</p>\n</li>\n<li><p>一个进程：用IP+port标识，端节点</p>\n</li>\n</ul>\n<h4 id=\"传输层提供服务-需要穿过层间的信息\"><a href=\"#传输层提供服务-需要穿过层间的信息\" class=\"headerlink\" title=\"传输层提供服务-需要穿过层间的信息\"></a>传输层提供服务-需要穿过层间的信息</h4><ul>\n<li>要传输的报文（SDU)</li>\n<li>谁传的：自己应用进程标识</li>\n<li>传给谁：对方应用进程标识（IP+TCP(UDP)端口号</li>\n</ul>\n<p>传输层实体（tcp或udp实体）根据这些信息进行TCP报文段（UDP数据报）的封装</p>\n<ul>\n<li>源端口号、目标端口号、数据等</li>\n<li>将IP地址往下交IP实体，用于封装IP数据报，源IP,目标IP.</li>\n</ul>\n<p>如果Socket API每次传输报文都携带如此多的信息，太繁琐易错，不便于管理。</p>\n<p>用个代号标示通信的双方或者单方：socket</p>\n<p>就像OS打开文件返回的句柄</p>\n<ul>\n<li><p>TCP socket:</p>\n<ul>\n<li>TCP服务。两个进程之间的通信要先建立连接</li>\n<li>可以用一个整数表示两个应用实体之间的通信关系，本地标识。</li>\n<li>穿过层间接口的信息量最小</li>\n<li>TCP socket :源IP，源端口，目标IP,目标端口</li>\n</ul>\n<p>对于面向连接服务TCP的应用而言，套接字是4元组的一个具有本地意义的标示。</p>\n<ul>\n<li>4元组（:源IP，源port，目标IP,目标port</li>\n<li>唯一指定了一个会话（2个进程之间的会话关系</li>\n<li>应用这个标识，与远程的应用进程通信</li>\n<li>不必在每一个报文的发送都指定这四元组</li>\n<li>简单、便于管理。</li>\n</ul>\n</li>\n<li><p>UDP socket</p>\n<ul>\n<li>UDP服务，两个进程之间通信无需建立连接</li>\n<li>每个报文都是独立传输</li>\n<li>前后报文可能给不同的分布式进程</li>\n<li>只能用一个整数标识本应用实体的标识</li>\n<li>穿过层间接口的信息大小最小</li>\n<li>UPD socket:本IP,本端口</li>\n<li>传输报文时，必须提供对方IP、port</li>\n</ul>\n<p>对于UDP,套接字是2元组的一个具有本地意义的标识。</p>\n<p>2元组：IP、port</p>\n<p>UDP套接字制定了应用所在的一个端节点（end point)</p>\n</li>\n</ul>\n<p><strong>套接字</strong>（socket)</p>\n<p>进程向套接字发送报文或从套接字接受报文</p>\n<p>套接字&lt;-&gt;门户</p>\n<p>发送进程将报文推出门户，发送进程依赖于传输层设施在另一侧的门将报文交付给接受进程</p>\n<p>接收进程从另外一端的门户收到报文（依赖于传输层设施）</p>\n<h4 id=\"如何使用传输层提供的服务实现应用\"><a href=\"#如何使用传输层提供的服务实现应用\" class=\"headerlink\" title=\"如何使用传输层提供的服务实现应用\"></a>如何使用传输层提供的服务实现应用</h4><p>定义应用层协议：报文格式、解释、时序等</p>\n<p>编制程序，使用API调用网络基础设施提供的通信服务传报文，解析报文、实现应用时序等。</p>\n<h5 id=\"应用层协议\"><a href=\"#应用层协议\" class=\"headerlink\" title=\"应用层协议\"></a>应用层协议</h5><p>定义了：运行在不同端系统上的应用<strong>进程</strong>如何相互交换报文</p>\n<p>交换报文类型：请求与应答报文</p>\n<p>各种报文类型语法：报文中的各个字段及其描述</p>\n<p>字段的语义：即字段取值的含义</p>\n<p>进程何时、如何发送报文及对报文进行响应的规则</p>\n<ul>\n<li><p>应用协议仅仅是应用的一个组成部分。</p>\n<p>Web应用：HTTP协议，web客户端、web服务器、HTML</p>\n</li>\n<li><p>公开协议</p>\n<p>由RFC文档定义</p>\n<p>允许互操作</p>\n<p>如HTTP,SMTP</p>\n</li>\n<li><p>专用协议</p>\n<p>协议不公开 Skype</p>\n</li>\n</ul>\n<p>性能要求：</p>\n<ul>\n<li>数据丢失率</li>\n<li>延迟</li>\n<li>吞吐</li>\n<li>安全性（机密性、完整性、可认证性</li>\n</ul>\n<p>Internet传输层提供的服务</p>\n<p><strong>TCP服务</strong></p>\n<ul>\n<li>可靠的传输服务</li>\n<li>流量控制：发送方不会淹没接受方</li>\n<li>拥塞控制：当网络出现拥塞，能抑制发送方</li>\n<li>不能提供的服务：时间保证、最小吞吐保证和安全</li>\n<li>面向连接：要求在客户端进程与服务器进程之间建立连接</li>\n</ul>\n<p><strong>UDP服务</strong></p>\n<ul>\n<li>不可靠数据传输</li>\n<li>不提供服务：可靠、流量控制、拥塞控制、时间、带宽保证、建立连接</li>\n</ul>\n<p>UDP存在的必要性</p>\n<ul>\n<li><p>能够区分不同的进程，而IP服务不能</p>\n<ul>\n<li>在IP提供的主机到主机端到端功能基础上，区分了主机的应用进程。</li>\n</ul>\n</li>\n<li><p>无需建立连接、省去了建立连接时间、适合事务性应用</p>\n</li>\n<li><p>不做可靠性工作，如检错重发，适合于实时性要求高正确性要求低的应用</p>\n</li>\n<li><p>没用拥塞流量控制、应用能够按照设定的速度发送数据</p>\n<ul>\n<li>在TCP上的应用，应用发送数据的速度和主机向网络发送的实际速度不一样，因为由流量、拥塞控制。</li>\n</ul>\n</li>\n</ul>\n<p>安全TCP</p>\n<p>TCP&amp;UDP</p>\n<ul>\n<li>都没有加密</li>\n<li>明文通过互联网传输</li>\n</ul>\n<p>SSL</p>\n<ul>\n<li>在TCP上面实现，提供加密的TCP连接</li>\n<li>私密性</li>\n<li>数据完整性</li>\n<li>端到端的鉴别</li>\n<li>SSL在应用层，应用采用SSL库，SSL库采用TCP通信</li>\n<li><p>应用通过API将明文给socket,SSL将其加密在互联网上传播</p>\n<h4 id=\"Web与HTTP\"><a href=\"#Web与HTTP\" class=\"headerlink\" title=\"Web与HTTP\"></a>Web与HTTP</h4></li>\n</ul>\n<p>Web页：由一些对象组成</p>\n<p>对象可以是HTML文件、JPEG图像、Java小程序、声音剪辑文件等</p>\n<p>Web页含有一个基本的HTML文件、该基本HTML文件又包含若干对象的引用（链接）</p>\n<p>通过URL对每个对象进行引用</p>\n<ul>\n<li>访问协议、用户名、口令字、端口等</li>\n</ul>\n<p>URL格式：</p>\n<p>Prot://user:psw@www.someSchool.edu/someDept/pic.gif:port</p>\n<p>协议名 用户名:口令 主机名[:port]                             路径名     端口</p>\n<p>HTTP概况</p>\n<p>HTTP:超文本传输协议</p>\n<ul>\n<li><p>Web的应用层协议</p>\n</li>\n<li><p>客户/服务器模式</p>\n<ul>\n<li>客户：请求、接收和显示Web对象的浏览器</li>\n<li>服务器：对请求进行响应，发送对象的Web服务器</li>\n</ul>\n<p>HTTP request HTTP response</p>\n</li>\n<li><p>使用TCP</p>\n<ul>\n<li>客户发起一个与服务器的TCP链接（建立套接字）端口号为80</li>\n<li>服务器接受客户的TCP链接</li>\n<li>在浏览器（HTTP客户端）与Web服务器（HTTP服务器server)交换HTTP报文（应用层协议报文）</li>\n<li>TCP连接关闭</li>\n</ul>\n</li>\n<li><p>HTTP是无状态的</p>\n<p>服务器不维护关于客户的任何信息</p>\n<p>维护状态的协议很复杂，必须维护历史信息</p>\n<p>如果服务器、客户端死机，他们的状态信息不一致</p>\n<p>无状态的服务器能支持更多的客户端</p>\n</li>\n<li><p>HTTP链接</p>\n<ul>\n<li><p>非持久HTTP</p>\n<p>最多只有一个对象在TCP连接上发送</p>\n<p>下载多个对象需要多个TCP链接</p>\n<p>HTTP/1.0使用非持久连接</p>\n</li>\n<li><p>持久HTTP</p>\n<p>多个对象可以在一个TCP连接上传输</p>\n<p>HTTP/1.1默认采用持久连接</p>\n</li>\n</ul>\n</li>\n<li><p>响应时间模型：</p>\n<p>往返时间RTT(round-trip time):一个小的分组从客户端到服务器，再回到客户端的时间（传输时间忽略）</p>\n<p><strong>响应时间</strong>：</p>\n<p>一个RTT用来发起TCP连接</p>\n<p>一个RTT用来HTTP请求并等待HTTP响应</p>\n<p>文件传输时间：</p>\n<p>2*RTT+传输时间</p>\n</li>\n<li><p>非持久HTTP缺点：</p>\n<ul>\n<li>每个对象要2个RTT</li>\n<li>操作系统必须为每个TCP连接分配资源</li>\n<li>但浏览器通常打开并行TCP连接、以获取引用对象</li>\n</ul>\n</li>\n<li><p>持久HTTP</p>\n<ul>\n<li>服务器在发送响应后仍保持TCP链接</li>\n<li>在相同客户端服务器之间的后续请求和响应报文通过相同的链接进行传送。</li>\n<li>客户端在遇到一个引用对象的时候，可以尽快发送该对象的请求</li>\n<li>非流水方式的持久HTTP:<ul>\n<li>客户端只能在收到前一个响应后才能发出新的请求</li>\n<li>每个引用对象花费一个RTT</li>\n</ul>\n</li>\n<li>流水方式的持久HTTP<ul>\n<li>HTTP/1.1默认模式</li>\n<li>客户端遇到一个引用对象就立即发送一个请求</li>\n<li>所有引用对象只花费一个RTT是可能的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"HTTP请求报文\"><a href=\"#HTTP请求报文\" class=\"headerlink\" title=\"HTTP请求报文\"></a>HTTP请求报文</h5><ul>\n<li><p>两种类型的HTTP报文：请求、响应</p>\n</li>\n<li><p>HTTP请求报文</p>\n<ul>\n<li><p>ASCII</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /somedir/page.html HTTP/1.1 /*请求行（GET、POST（上载）、HEAD（头）命令*/</span><br><span class=\"line\">/*首部行*/</span><br><span class=\"line\">Host: www.someschool.edu 主机名</span><br><span class=\"line\">User-agent:Mozilla/4.0 用户代理程序、浏览器版本</span><br><span class=\"line\">Connection:close 关连接</span><br><span class=\"line\">Accept-language:fr</span><br><span class=\"line\"></span><br><span class=\"line\">（一个额外的换行回车符，标识报文结束</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>提交表单输入</strong></p>\n<ul>\n<li><p>Post方式</p>\n<ul>\n<li>网页通常包括表单输入</li>\n<li>包含在实体主体（entity body)中输入被提交到服务器</li>\n</ul>\n</li>\n<li><p>URL方式</p>\n<ul>\n<li><p>方法：GET</p>\n</li>\n<li><p>输入通过请求行的URL字段上载</p>\n<p>www.somesite.com/animalsearch?monkeys&amp;banana</p>\n<p><a href=\"http://www.baidu.com/s?wd=xx+yy+zzz&amp;cl=3\">http://www.baidu.com/s?wd=xx+yy+zzz&amp;cl=3</a></p>\n<p>参数：wd.cl</p>\n<p>参数值XX+YY+zzz, 3</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>HTTP/1.1</p>\n<ul>\n<li>PUT 将实体主体中的文件载到URL字段规定的路径</li>\n<li>DELETE删除URL字段规定的文件</li>\n</ul>\n<p><img src=\"D:\\blog\\source\\_posts\\网络\\img1.png\" alt=\"img1\"></p>\n<p>HTTP响应状态码：</p>\n<p>200 OK</p>\n<p>301 Moved Permanently</p>\n<p>400 Bad Request</p>\n<p>404 Not Found</p>\n<p>505 HTTP Version Not Supported</p>\n<h5 id=\"用户-服务器状态：cookies\"><a href=\"#用户-服务器状态：cookies\" class=\"headerlink\" title=\"用户-服务器状态：cookies\"></a>用户-服务器状态：cookies</h5><p>4个组成部分：</p>\n<p>1）在HTTP响应报文中有一个cookie的首部行</p>\n<p>2）在HTTP请求报文中含有一个cookie首部行</p>\n<p>3）在用户端系统中保留有一个cookie文件，由用户的浏览器管理</p>\n<p>4）在Web站点有一个后端数据库</p>\n<ul>\n<li>Cookies能<ul>\n<li>用户验证</li>\n<li>购物车</li>\n<li>推荐</li>\n<li>用户状态（Web e-mail)</li>\n</ul>\n</li>\n<li>如何维持状态<ul>\n<li>协议端节点：在多个事务上，发送端和接收端维持状态</li>\n<li>cookies: http报文携带状态信息</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Web缓存（代理服务器）\"><a href=\"#Web缓存（代理服务器）\" class=\"headerlink\" title=\"Web缓存（代理服务器）\"></a>Web缓存（代理服务器）</h5><p>目标：不访问原始服务器，就满足客户请求</p>\n<p>用户设置浏览器：通过缓存访问Web</p>\n<p>浏览器将所有HTTP请求发给缓存</p>\n<ul>\n<li>在缓存中的对象：缓存直接返回对象</li>\n<li>不在缓存中，缓存请求原始服务器</li>\n</ul>\n<p>缓存既是客户端又是服务器</p>\n<p>通常缓存是由ISP安装</p>\n<p>为什么要使用缓存？</p>\n<ul>\n<li>降低客户端的请求响应时间</li>\n<li>可以大大减少一个机构内部网络与Internet接入链路上的流量</li>\n<li>互联网大量采用了缓存，可以是较弱的ICP也能有效提供内容。</li>\n</ul>\n<p>条件GET方法</p>\n<ul>\n<li><p>目标：如果缓存器中的对象拷贝是最新的，就不要发送对象</p>\n</li>\n<li><p>缓存器：在HTTP请求中指定缓存拷贝的日期</p>\n<p>If-modified-since <date></p>\n</li>\n<li><p>服务器：如果缓存拷贝陈旧，则响应报文没包含对象：</p>\n<p>HTTP/1.0 304 Not Modified</p>\n</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"../images/b.jpg\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.main-inner {\n  opacity: 0.92;\n}\n.content-wrap {\n  opacity: 0.92;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.8;\n}\n.back-to-top {\n  right: 10px;\n  width: 70px;\n  height: 900px;\n  top: -900px;\n  bottom: unset;\n  transition: all 0.5s ease-in-out;\n  background: url(\"/images/scroll.png\");\n}\n.back-to-top > i {\n  display: none;\n}\n.back-to-top.back-to-top-on {\n  bottom: unset;\n  top: calc(100vh - 900px - 200px);\n}\n","styles - 副本":"body {\n  background: url(\"https://source.unsplash.com/random/1600x900?wallpapers\");\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.sidebar {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n}\n.popup {\n  opacity: 0.85;\n}\n"}},"excerpt":"","more":"<ul>\n<li><p>节点</p>\n<p>主机或运行在其上面的应用程序</p>\n<p>路由器（网络层）交换机（链路层）等网络交换设备</p>\n</li>\n<li><p>边：(通讯链路)</p>\n<p>接入网链路</p>\n<p>主干链路</p>\n</li>\n<li><p>协议</p>\n<p>对等层实体在通信过程中应遵守的规则集合。</p>\n<p>协议定义了在两个或多个通信实体之间交换的报文<strong>格式</strong>和<strong>次序</strong>，以及在报文传输和/或接收或其他事件方面所采取的<strong>动作</strong>。</p>\n</li>\n<li><p>互联网</p>\n</li>\n</ul>\n<p>​       分布式应用，以及为分布式应用提供通信服务的基础设施。</p>\n<ul>\n<li><p>网络结构</p>\n<ul>\n<li><p>网络边缘</p>\n<p>主机、应用程序</p>\n</li>\n<li><p>网络核心</p>\n<p>互联着的路由器、网络的网络</p>\n</li>\n<li><p>接入网、物理媒体</p>\n<p>有线或者无线通信链路</p>\n</li>\n</ul>\n</li>\n<li><p>网络边缘</p>\n<ul>\n<li>客户端、服务器模式</li>\n</ul>\n<p>客户端向服务器请求、接收服务</p>\n<p>问题：可扩展性差，随着请求载荷增加，性能变差。</p>\n<ul>\n<li>对等（peer-peer）模式</li>\n</ul>\n<p>面向连接的通信方式（仅端系统连接）</p>\n<p>有连接</p>\n<p><strong>TCP</strong></p>\n<p>可靠、保序</p>\n<p>流量控制</p>\n<p>拥塞控制</p>\n<p><strong>UDP</strong></p>\n<p>无连接、不可靠、无流量、拥塞控制</p>\n</li>\n<li><p>网络核心</p>\n<p>路由器的网状网络</p>\n<p>数据怎么通过网络进行传输？</p>\n<ul>\n<li>电路交换</li>\n</ul>\n<p>端到端的资源被分配给从源端到目标端的呼叫</p>\n<p>独享资源（每个呼叫一旦建立起来就能保证性能）</p>\n<p>如果呼叫没有数据发送，被分配的资源会被浪费</p>\n<p>通常被传统电话网络采用</p>\n<p>网络资源（如带宽）被分成片</p>\n<p>为呼叫分配片</p>\n<p>如果某个呼叫没有数据，则其资源片处于空闲状态</p>\n<p>将带宽分成片</p>\n<p>频分、时分、波分</p>\n<p>连接建立时间长</p>\n<p>计算机通信有突发性，如果使用线路交换则浪费的片较多</p>\n<p>可靠性不高</p>\n<ul>\n<li>分组交换</li>\n</ul>\n<p>以分组为单位存储转发方式</p>\n<p>被传输到下一个链路之前，整个分组必须到达路由器，<strong>存储转发</strong></p>\n<p>在一个速率为R bps的链路，一个长度为L bits的分组的存储转发延时：L/R s.</p>\n<p>排队与延迟</p>\n<p><strong>如果到达速率&gt;链路传输速率</strong>：</p>\n<p>分组将会排队，等待传输</p>\n<p>如果路由器缓存用完了，分组将会被抛弃</p>\n<ul>\n<li><p>网络核心的关键功能</p>\n<p>路由：决定分组采用的源到目标的路径</p>\n<p>转发：将分组从路由器的输入链路转移到输出链路。</p>\n<p>统计多路复用</p>\n</li>\n</ul>\n<p>分组交换允许更多用户使用网络。</p>\n<p>适合于对突发式数据传输</p>\n<ul>\n<li>资源共享</li>\n<li>简单、不必建立呼叫</li>\n</ul>\n<p>过度使用会造成网络拥塞</p>\n<p>分组交换网络按照有无网络层连接：</p>\n<ul>\n<li><p>数据报网络(不建立连接)</p>\n<p>分组的目标地址决定下一跳</p>\n<p>在不同阶段，路由可以改变</p>\n</li>\n<li><p>虚电路网络（有连接）</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>接入网与物理媒体</p>\n<p>住宅接入：modem</p>\n<p>企业接入网络</p>\n<p>无线接入网络</p>\n<p>(无线LANs、广域无线接入)</p>\n<p>物理媒体</p>\n<p>物理链路：在每个传输-接收对，跨越一种物理媒体</p>\n<ul>\n<li><p>导引型媒体</p>\n<p>信号沿着固体媒介被导引，（同轴电缆、光纤、双绞线、光缆）</p>\n</li>\n<li><p>非导引型媒体</p>\n<p>信号自由传播，如无线电</p>\n</li>\n</ul>\n</li>\n<li><p>Internet结构和ISP</p>\n<p>端系统通过接入ISPs（Internet Service Providers）接入到互联网</p>\n<p>接入ISPs相应的必须是互联的</p>\n</li>\n<li><p>在路由器缓存区得分组队列</p>\n<p>分组到达链路得速率超过了链路输出能力</p>\n<p>分组等待排到队头，被输出</p>\n<ul>\n<li><p>节点处理延时</p>\n<p>检查bit级差错</p>\n<p>检查分组首部和决定将分组导向何处</p>\n</li>\n<li><p>排队延时</p>\n<p>在输出链路上等待输出的时间</p>\n<p>依赖于路由器的拥塞程度</p>\n</li>\n<li><p>传输延时</p>\n<p>R = 链路带宽（bps)</p>\n<p>L = 分组长度（bits)</p>\n<p>将分组发送到链路上的时间L/R</p>\n<p>存储转发延时</p>\n</li>\n<li><p>传播延时</p>\n<p>d = 物理链路长度</p>\n<p>s = 在媒体上的传播速度$(2*10^8m/s)$</p>\n<p>传播延时 = d/s</p>\n</li>\n<li><p>流量强度</p>\n<p>$I = La/R$</p>\n<p>$R$=链路带宽（bps)</p>\n<p>$L$=分组长度（bits)</p>\n<p>$a$=分组到达队列的平均速率</p>\n</li>\n<li><p>分组丢失</p>\n<p>链路队列缓冲区容量有限</p>\n<p>当分组到达一个满的队列时，该分组会丢失</p>\n<p>丢失的分组可能会被前一个节点或源端系统重传或根本不重传。</p>\n</li>\n<li><p>吞吐量</p>\n<p>在源端和目标端之间传输的速率（数据量/单位时间）</p>\n<p>瞬间吞吐量：在一个时间点的速率</p>\n<p>平均吞吐量：在一个长时间内的平均值</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>协议层次及服务模型</p>\n<p>将网络复杂功能分成功能明确的层次，每一层实现了其中一个或一组功能，功能中有其上层可以使用的功能：服务。</p>\n<p>本层协议实体相互交互执行本层的协议动作，目的是实现本层功能，通过接口为上层提供更好的服务。</p>\n<p>在实现本层协议的时候，直接利用了下层所提供的服务。</p>\n<p>本层的服务：借助下层服务实现的本层协议实体之间的交互带来的新功能（上层可以利用的）+更下层所提供的服务。</p>\n<ul>\n<li><p>服务（Service):底层实体向上层实体提供它们之间的通信能力。服务用户（service user) 服务提供者（service provider)</p>\n</li>\n<li><p>原语（primitive):上层使用下层服务的形式，高层使用低层提供的服务，以及底层向高层提供服务都是通过服务访问源于来进行交互的—形式</p>\n</li>\n<li><p>服务访问点SAP(Services Access Point):上层使用下层提供的服务通过层间的接口—地点：</p>\n<p>地址（address)：下层的一个实体支撑着上层的多个实体，SAP有标志不同上层实体的作用。 </p>\n<p>传输层的SAP、端口</p>\n</li>\n<li><p>面向连接的服务、无连接的服务。</p>\n</li>\n<li><p><strong>服务与协议的区别</strong></p>\n<p>服务(service)：底层实体向上层实体提供它们之间的通信的能力，是通过原语(primitive)来操作的，垂直</p>\n<p>协议（protocol）：对等层(peer entity)实体之间在互相通信过程中需要遵循的规则的集合，水平</p>\n</li>\n<li><p>服务与协议的联系</p>\n<p>本层的协议实现要靠下层提供的服务来实现。</p>\n<p>本层实体通过协议为上层提供更高级的服务。</p>\n</li>\n<li><p>数据单元（SDU,ICI,PDU)</p>\n</li>\n<li><p>Internet协议栈</p>\n<p><strong>应用层</strong>：网络应用（应用报文与应用报文交互</p>\n<p>为人类用户或其他应用进程提供网络应用服务。</p>\n<p>FTP,SMTP,HTTP,DNS</p>\n<p><strong>传输层</strong>：主机之间的数据传输(进程到进程传输、不可靠变为可靠</p>\n<p>在网络层提供的端到端通信基础上，细分为进程到进程，将不可靠通信变成可靠地通信。</p>\n<p>TCP,UDP</p>\n<p><strong>网络层</strong>：为数据报从源到目的选择路由（传输以分组为单位端到端的数据 E2E</p>\n<p>主机主机之间的通信、端到端通信，不可靠</p>\n<p>IP、路由协议</p>\n<p><strong>链路层</strong>：相邻网络节点之间的数据传输（在相邻两点之间传输以帧为单位的数据 P2P</p>\n<p>2个相邻2点的通信，点到点的通信，可靠或不可靠。</p>\n<p>点对对协议PPP,802.11(Wifi),Ethernet</p>\n<p><strong>物理层</strong>：在线路上传送bit,（把输入数据转成物理信号</p>\n</li>\n<li><p>ISO/OSI参考模型：</p>\n<p>表示层：允许应用解释传输的数据 e.g.加密、压缩、机器相关的表示转换</p>\n<p>会话层：数据交换的同步、检查点、恢复(建立会话、维持会话)</p>\n</li>\n<li><p>各层次的协议数据单元</p>\n<p>应用层：报文（message)</p>\n<p>传输层：报文段（segment); TCP段，UDP数据报</p>\n<p>网络层：分组packet(如果无连接方式：数据报（datagram))</p>\n<p>数据链路层：帧（frame）</p>\n<p>物理层：位（bit)</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h3><h4 id=\"网络应用的体系结构\"><a href=\"#网络应用的体系结构\" class=\"headerlink\" title=\"网络应用的体系结构\"></a>网络应用的体系结构</h4><p><strong>可能的应用架构</strong></p>\n<p>  客户-服务器模式（C/S:Client/Serve)</p>\n<ul>\n<li><p>服务器</p>\n<p>一直运行</p>\n<p>固定的IP地址和周知的端口号（约定）</p>\n<p>扩展性：服务器场（数据中心进行扩展，扩展性差，可靠性差）</p>\n</li>\n<li><p>客户端</p>\n<p>主动与服务器通信</p>\n<p>与互联网有间歇性的连接</p>\n<p>可能是动态IP地址</p>\n<p>不直接与其他客户端通信</p>\n<p>对等模式（P2P:Peer to Peer)</p>\n</li>\n<li><p>几乎没有一直运行的服务器</p>\n</li>\n<li>任意端系统之间可以通信</li>\n<li>每一个节点既是客户端又是服务器</li>\n<li><p>参与的主机间歇性连接且可以改变IP地址</p>\n<p>(难以管理)</p>\n<p>混合体：客户-服务器和对等体系结构</p>\n</li>\n</ul>\n<p><strong>进程通信</strong></p>\n<p>  客户端进程：发起通信的进程</p>\n<p>  服务器进程：等待连接的进程</p>\n<p>不同主机，通过交换报文（Message)来通信</p>\n<p>使用OS提供的通信服务</p>\n<p>按照应用协议交换报文（借助传输层提供的服务）</p>\n<p>（P2P架构之间也有客户端服务器进程之分）</p>\n<p>问题：</p>\n<p>进程表示与寻址问题（服务用户）</p>\n<p>传输层-应用层提供服务是如何（服务）</p>\n<ul>\n<li>位置：层间界面的SAP(TCP/IP: socket)</li>\n<li>形式：应用程序接口API(TCP/IP: socket API)</li>\n</ul>\n<p>如何使用传输层提供的服务，实现应用进程之间的报文交换，实现应用（用户使用服务）</p>\n<p>定义应用层协议：报文格式、解释、时序等</p>\n<p>编制程序，使用OS提供的API,调用网络基础设施提供的通信服务传报文，实现应用时序。</p>\n<h4 id=\"对进程进行编址\"><a href=\"#对进程进行编址\" class=\"headerlink\" title=\"对进程进行编址\"></a>对进程进行编址</h4><p>进程为了接受报文，必须有一个唯一标识。</p>\n<p>即:SAP</p>\n<ul>\n<li><p>主机：唯一的32位IP地址</p>\n</li>\n<li><p>所采用的传输层协议TCP or UDP</p>\n</li>\n<li><p>端口号（Port Number)$(2^{16})$</p>\n<p>web应用HTTP tcp 80，ftp tcp 2, Mail: tcp 25</p>\n</li>\n<li><p>一个进程：用IP+port标识，端节点</p>\n</li>\n</ul>\n<h4 id=\"传输层提供服务-需要穿过层间的信息\"><a href=\"#传输层提供服务-需要穿过层间的信息\" class=\"headerlink\" title=\"传输层提供服务-需要穿过层间的信息\"></a>传输层提供服务-需要穿过层间的信息</h4><ul>\n<li>要传输的报文（SDU)</li>\n<li>谁传的：自己应用进程标识</li>\n<li>传给谁：对方应用进程标识（IP+TCP(UDP)端口号</li>\n</ul>\n<p>传输层实体（tcp或udp实体）根据这些信息进行TCP报文段（UDP数据报）的封装</p>\n<ul>\n<li>源端口号、目标端口号、数据等</li>\n<li>将IP地址往下交IP实体，用于封装IP数据报，源IP,目标IP.</li>\n</ul>\n<p>如果Socket API每次传输报文都携带如此多的信息，太繁琐易错，不便于管理。</p>\n<p>用个代号标示通信的双方或者单方：socket</p>\n<p>就像OS打开文件返回的句柄</p>\n<ul>\n<li><p>TCP socket:</p>\n<ul>\n<li>TCP服务。两个进程之间的通信要先建立连接</li>\n<li>可以用一个整数表示两个应用实体之间的通信关系，本地标识。</li>\n<li>穿过层间接口的信息量最小</li>\n<li>TCP socket :源IP，源端口，目标IP,目标端口</li>\n</ul>\n<p>对于面向连接服务TCP的应用而言，套接字是4元组的一个具有本地意义的标示。</p>\n<ul>\n<li>4元组（:源IP，源port，目标IP,目标port</li>\n<li>唯一指定了一个会话（2个进程之间的会话关系</li>\n<li>应用这个标识，与远程的应用进程通信</li>\n<li>不必在每一个报文的发送都指定这四元组</li>\n<li>简单、便于管理。</li>\n</ul>\n</li>\n<li><p>UDP socket</p>\n<ul>\n<li>UDP服务，两个进程之间通信无需建立连接</li>\n<li>每个报文都是独立传输</li>\n<li>前后报文可能给不同的分布式进程</li>\n<li>只能用一个整数标识本应用实体的标识</li>\n<li>穿过层间接口的信息大小最小</li>\n<li>UPD socket:本IP,本端口</li>\n<li>传输报文时，必须提供对方IP、port</li>\n</ul>\n<p>对于UDP,套接字是2元组的一个具有本地意义的标识。</p>\n<p>2元组：IP、port</p>\n<p>UDP套接字制定了应用所在的一个端节点（end point)</p>\n</li>\n</ul>\n<p><strong>套接字</strong>（socket)</p>\n<p>进程向套接字发送报文或从套接字接受报文</p>\n<p>套接字&lt;-&gt;门户</p>\n<p>发送进程将报文推出门户，发送进程依赖于传输层设施在另一侧的门将报文交付给接受进程</p>\n<p>接收进程从另外一端的门户收到报文（依赖于传输层设施）</p>\n<h4 id=\"如何使用传输层提供的服务实现应用\"><a href=\"#如何使用传输层提供的服务实现应用\" class=\"headerlink\" title=\"如何使用传输层提供的服务实现应用\"></a>如何使用传输层提供的服务实现应用</h4><p>定义应用层协议：报文格式、解释、时序等</p>\n<p>编制程序，使用API调用网络基础设施提供的通信服务传报文，解析报文、实现应用时序等。</p>\n<h5 id=\"应用层协议\"><a href=\"#应用层协议\" class=\"headerlink\" title=\"应用层协议\"></a>应用层协议</h5><p>定义了：运行在不同端系统上的应用<strong>进程</strong>如何相互交换报文</p>\n<p>交换报文类型：请求与应答报文</p>\n<p>各种报文类型语法：报文中的各个字段及其描述</p>\n<p>字段的语义：即字段取值的含义</p>\n<p>进程何时、如何发送报文及对报文进行响应的规则</p>\n<ul>\n<li><p>应用协议仅仅是应用的一个组成部分。</p>\n<p>Web应用：HTTP协议，web客户端、web服务器、HTML</p>\n</li>\n<li><p>公开协议</p>\n<p>由RFC文档定义</p>\n<p>允许互操作</p>\n<p>如HTTP,SMTP</p>\n</li>\n<li><p>专用协议</p>\n<p>协议不公开 Skype</p>\n</li>\n</ul>\n<p>性能要求：</p>\n<ul>\n<li>数据丢失率</li>\n<li>延迟</li>\n<li>吞吐</li>\n<li>安全性（机密性、完整性、可认证性</li>\n</ul>\n<p>Internet传输层提供的服务</p>\n<p><strong>TCP服务</strong></p>\n<ul>\n<li>可靠的传输服务</li>\n<li>流量控制：发送方不会淹没接受方</li>\n<li>拥塞控制：当网络出现拥塞，能抑制发送方</li>\n<li>不能提供的服务：时间保证、最小吞吐保证和安全</li>\n<li>面向连接：要求在客户端进程与服务器进程之间建立连接</li>\n</ul>\n<p><strong>UDP服务</strong></p>\n<ul>\n<li>不可靠数据传输</li>\n<li>不提供服务：可靠、流量控制、拥塞控制、时间、带宽保证、建立连接</li>\n</ul>\n<p>UDP存在的必要性</p>\n<ul>\n<li><p>能够区分不同的进程，而IP服务不能</p>\n<ul>\n<li>在IP提供的主机到主机端到端功能基础上，区分了主机的应用进程。</li>\n</ul>\n</li>\n<li><p>无需建立连接、省去了建立连接时间、适合事务性应用</p>\n</li>\n<li><p>不做可靠性工作，如检错重发，适合于实时性要求高正确性要求低的应用</p>\n</li>\n<li><p>没用拥塞流量控制、应用能够按照设定的速度发送数据</p>\n<ul>\n<li>在TCP上的应用，应用发送数据的速度和主机向网络发送的实际速度不一样，因为由流量、拥塞控制。</li>\n</ul>\n</li>\n</ul>\n<p>安全TCP</p>\n<p>TCP&amp;UDP</p>\n<ul>\n<li>都没有加密</li>\n<li>明文通过互联网传输</li>\n</ul>\n<p>SSL</p>\n<ul>\n<li>在TCP上面实现，提供加密的TCP连接</li>\n<li>私密性</li>\n<li>数据完整性</li>\n<li>端到端的鉴别</li>\n<li>SSL在应用层，应用采用SSL库，SSL库采用TCP通信</li>\n<li><p>应用通过API将明文给socket,SSL将其加密在互联网上传播</p>\n<h4 id=\"Web与HTTP\"><a href=\"#Web与HTTP\" class=\"headerlink\" title=\"Web与HTTP\"></a>Web与HTTP</h4></li>\n</ul>\n<p>Web页：由一些对象组成</p>\n<p>对象可以是HTML文件、JPEG图像、Java小程序、声音剪辑文件等</p>\n<p>Web页含有一个基本的HTML文件、该基本HTML文件又包含若干对象的引用（链接）</p>\n<p>通过URL对每个对象进行引用</p>\n<ul>\n<li>访问协议、用户名、口令字、端口等</li>\n</ul>\n<p>URL格式：</p>\n<p>Prot://user:psw@www.someSchool.edu/someDept/pic.gif:port</p>\n<p>协议名 用户名:口令 主机名[:port]                             路径名     端口</p>\n<p>HTTP概况</p>\n<p>HTTP:超文本传输协议</p>\n<ul>\n<li><p>Web的应用层协议</p>\n</li>\n<li><p>客户/服务器模式</p>\n<ul>\n<li>客户：请求、接收和显示Web对象的浏览器</li>\n<li>服务器：对请求进行响应，发送对象的Web服务器</li>\n</ul>\n<p>HTTP request HTTP response</p>\n</li>\n<li><p>使用TCP</p>\n<ul>\n<li>客户发起一个与服务器的TCP链接（建立套接字）端口号为80</li>\n<li>服务器接受客户的TCP链接</li>\n<li>在浏览器（HTTP客户端）与Web服务器（HTTP服务器server)交换HTTP报文（应用层协议报文）</li>\n<li>TCP连接关闭</li>\n</ul>\n</li>\n<li><p>HTTP是无状态的</p>\n<p>服务器不维护关于客户的任何信息</p>\n<p>维护状态的协议很复杂，必须维护历史信息</p>\n<p>如果服务器、客户端死机，他们的状态信息不一致</p>\n<p>无状态的服务器能支持更多的客户端</p>\n</li>\n<li><p>HTTP链接</p>\n<ul>\n<li><p>非持久HTTP</p>\n<p>最多只有一个对象在TCP连接上发送</p>\n<p>下载多个对象需要多个TCP链接</p>\n<p>HTTP/1.0使用非持久连接</p>\n</li>\n<li><p>持久HTTP</p>\n<p>多个对象可以在一个TCP连接上传输</p>\n<p>HTTP/1.1默认采用持久连接</p>\n</li>\n</ul>\n</li>\n<li><p>响应时间模型：</p>\n<p>往返时间RTT(round-trip time):一个小的分组从客户端到服务器，再回到客户端的时间（传输时间忽略）</p>\n<p><strong>响应时间</strong>：</p>\n<p>一个RTT用来发起TCP连接</p>\n<p>一个RTT用来HTTP请求并等待HTTP响应</p>\n<p>文件传输时间：</p>\n<p>2*RTT+传输时间</p>\n</li>\n<li><p>非持久HTTP缺点：</p>\n<ul>\n<li>每个对象要2个RTT</li>\n<li>操作系统必须为每个TCP连接分配资源</li>\n<li>但浏览器通常打开并行TCP连接、以获取引用对象</li>\n</ul>\n</li>\n<li><p>持久HTTP</p>\n<ul>\n<li>服务器在发送响应后仍保持TCP链接</li>\n<li>在相同客户端服务器之间的后续请求和响应报文通过相同的链接进行传送。</li>\n<li>客户端在遇到一个引用对象的时候，可以尽快发送该对象的请求</li>\n<li>非流水方式的持久HTTP:<ul>\n<li>客户端只能在收到前一个响应后才能发出新的请求</li>\n<li>每个引用对象花费一个RTT</li>\n</ul>\n</li>\n<li>流水方式的持久HTTP<ul>\n<li>HTTP/1.1默认模式</li>\n<li>客户端遇到一个引用对象就立即发送一个请求</li>\n<li>所有引用对象只花费一个RTT是可能的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"HTTP请求报文\"><a href=\"#HTTP请求报文\" class=\"headerlink\" title=\"HTTP请求报文\"></a>HTTP请求报文</h5><ul>\n<li><p>两种类型的HTTP报文：请求、响应</p>\n</li>\n<li><p>HTTP请求报文</p>\n<ul>\n<li><p>ASCII</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /somedir/page.html HTTP/1.1 /*请求行（GET、POST（上载）、HEAD（头）命令*/</span><br><span class=\"line\">/*首部行*/</span><br><span class=\"line\">Host: www.someschool.edu 主机名</span><br><span class=\"line\">User-agent:Mozilla/4.0 用户代理程序、浏览器版本</span><br><span class=\"line\">Connection:close 关连接</span><br><span class=\"line\">Accept-language:fr</span><br><span class=\"line\"></span><br><span class=\"line\">（一个额外的换行回车符，标识报文结束</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>提交表单输入</strong></p>\n<ul>\n<li><p>Post方式</p>\n<ul>\n<li>网页通常包括表单输入</li>\n<li>包含在实体主体（entity body)中输入被提交到服务器</li>\n</ul>\n</li>\n<li><p>URL方式</p>\n<ul>\n<li><p>方法：GET</p>\n</li>\n<li><p>输入通过请求行的URL字段上载</p>\n<p>www.somesite.com/animalsearch?monkeys&amp;banana</p>\n<p><a href=\"http://www.baidu.com/s?wd=xx+yy+zzz&amp;cl=3\">http://www.baidu.com/s?wd=xx+yy+zzz&amp;cl=3</a></p>\n<p>参数：wd.cl</p>\n<p>参数值XX+YY+zzz, 3</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>HTTP/1.1</p>\n<ul>\n<li>PUT 将实体主体中的文件载到URL字段规定的路径</li>\n<li>DELETE删除URL字段规定的文件</li>\n</ul>\n<p><img src=\"D:\\blog\\source\\_posts\\网络\\img1.png\" alt=\"img1\"></p>\n<p>HTTP响应状态码：</p>\n<p>200 OK</p>\n<p>301 Moved Permanently</p>\n<p>400 Bad Request</p>\n<p>404 Not Found</p>\n<p>505 HTTP Version Not Supported</p>\n<h5 id=\"用户-服务器状态：cookies\"><a href=\"#用户-服务器状态：cookies\" class=\"headerlink\" title=\"用户-服务器状态：cookies\"></a>用户-服务器状态：cookies</h5><p>4个组成部分：</p>\n<p>1）在HTTP响应报文中有一个cookie的首部行</p>\n<p>2）在HTTP请求报文中含有一个cookie首部行</p>\n<p>3）在用户端系统中保留有一个cookie文件，由用户的浏览器管理</p>\n<p>4）在Web站点有一个后端数据库</p>\n<ul>\n<li>Cookies能<ul>\n<li>用户验证</li>\n<li>购物车</li>\n<li>推荐</li>\n<li>用户状态（Web e-mail)</li>\n</ul>\n</li>\n<li>如何维持状态<ul>\n<li>协议端节点：在多个事务上，发送端和接收端维持状态</li>\n<li>cookies: http报文携带状态信息</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Web缓存（代理服务器）\"><a href=\"#Web缓存（代理服务器）\" class=\"headerlink\" title=\"Web缓存（代理服务器）\"></a>Web缓存（代理服务器）</h5><p>目标：不访问原始服务器，就满足客户请求</p>\n<p>用户设置浏览器：通过缓存访问Web</p>\n<p>浏览器将所有HTTP请求发给缓存</p>\n<ul>\n<li>在缓存中的对象：缓存直接返回对象</li>\n<li>不在缓存中，缓存请求原始服务器</li>\n</ul>\n<p>缓存既是客户端又是服务器</p>\n<p>通常缓存是由ISP安装</p>\n<p>为什么要使用缓存？</p>\n<ul>\n<li>降低客户端的请求响应时间</li>\n<li>可以大大减少一个机构内部网络与Internet接入链路上的流量</li>\n<li>互联网大量采用了缓存，可以是较弱的ICP也能有效提供内容。</li>\n</ul>\n<p>条件GET方法</p>\n<ul>\n<li><p>目标：如果缓存器中的对象拷贝是最新的，就不要发送对象</p>\n</li>\n<li><p>缓存器：在HTTP请求中指定缓存拷贝的日期</p>\n<p>If-modified-since <date></p>\n</li>\n<li><p>服务器：如果缓存拷贝陈旧，则响应报文没包含对象：</p>\n<p>HTTP/1.0 304 Not Modified</p>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/jvm/javastack.png","slug":"javastack.png","post":"ckiv9pxdm000erouj6floaqsc","modified":0,"renderable":0},{"_id":"source/_posts/jvm/javastack1.png","slug":"javastack1.png","post":"ckiv9pxdm000erouj6floaqsc","modified":0,"renderable":0},{"_id":"source/_posts/jvm/jvmdata.png","slug":"jvmdata.png","post":"ckiv9pxdm000erouj6floaqsc","modified":0,"renderable":0},{"_id":"source/_posts/前端杂项/htm.jpg","slug":"htm.jpg","post":"ckiv9pxdn000iroujeoe0cn18","modified":0,"renderable":0},{"_id":"source/_posts/关于本站/test.jpg","slug":"test.jpg","post":"ckiv9pxdv000xrouj7oj121jn","modified":0,"renderable":0},{"_id":"source/_posts/百度之星2020/公式1.png","slug":"公式1.png","post":"ckiv9pxdv000zroujf2ei3chw","modified":0,"renderable":0},{"_id":"source/_posts/百度之星2020/公式2.png","slug":"公式2.png","post":"ckiv9pxdv000zroujf2ei3chw","modified":0,"renderable":0},{"_id":"source/_posts/AtCoderRegularContest111/new-year-5798330__340.png","slug":"new-year-5798330__340.png","post":"ckjpt3uot000034uj9j9t74i4","modified":0,"renderable":0},{"_id":"source/_posts/iterator/lake-6256628.jpg","slug":"lake-6256628.jpg","post":"cknjpiqqp0000psuj3caj2pv9","modified":1,"renderable":0},{"_id":"source/_posts/防止条件丢失/campaign-6269159.jpg","slug":"campaign-6269159.jpg","post":"ckn8dyi7q0000zwujcw7qh2qr","modified":1,"renderable":0},{"_id":"source/_posts/网络/img1.png","post":"ckp6e3ymf0001s4uj20qbcupr","slug":"img1.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckiv9pxdd0001rouj8zjmaivz","tag_id":"ckiv9pxdh0004roujfxwnda16","_id":"ckiv9pxdk000aroujct1lavvy"},{"post_id":"ckiv9pxdg0003rouj4zfa0yuw","tag_id":"ckiv9pxdk0009roujdvcnhto6","_id":"ckiv9pxdk000crouj2nfk2db5"},{"post_id":"ckiv9pxdi0006rouj5enj8ywt","tag_id":"ckiv9pxdk000brouj3ku3bv6p","_id":"ckiv9pxdk000drouj6nuschsc"},{"post_id":"ckiv9pxdm000erouj6floaqsc","tag_id":"ckiv9pxdn000groujc38p9w91","_id":"ckiv9pxdp000lrouja6et7ajk"},{"post_id":"ckiv9pxdm000froujgukp148d","tag_id":"ckiv9pxdp000kroujgafk0a61","_id":"ckiv9pxdq000oroujaujlc64n"},{"post_id":"ckiv9pxdn000hrouj9w434nci","tag_id":"ckiv9pxdq000nrouj2q30h7bj","_id":"ckiv9pxdq000qroujbi5iak2w"},{"post_id":"ckiv9pxdn000iroujeoe0cn18","tag_id":"ckiv9pxdq000proujefvt5mga","_id":"ckiv9pxdq000srouj5wfw8q27"},{"post_id":"ckiv9pxdo000jrouj706l0fcw","tag_id":"ckiv9pxdq000rrouj7tio9joq","_id":"ckiv9pxdr000urouj1g9g3qt9"},{"post_id":"ckiv9pxdp000mrouj4o368lyc","tag_id":"ckiv9pxdr000trouje5zyc1n5","_id":"ckiv9pxdr000vrouj3fina3v5"},{"post_id":"ckiv9pxdu000wrouj22zt9iwv","tag_id":"ckiv9pxdk000brouj3ku3bv6p","_id":"ckiv9pxdv000yrouj4v4h0c45"},{"post_id":"ckiv9pxdv000zroujf2ei3chw","tag_id":"ckiv9pxdr000trouje5zyc1n5","_id":"ckiv9pxdw0012roujfg21fm41"},{"post_id":"ckiv9pxdw0011roujaae3cjxf","tag_id":"ckiv9pxdq000rrouj7tio9joq","_id":"ckiv9pxdw0013rouj9jga2rz5"},{"post_id":"ckiv9pxdv000xrouj7oj121jn","tag_id":"ckiv9pxdw0010roujg8a14uta","_id":"ckiv9pxdx0014roujfhuh8svw"},{"post_id":"ckivcubto0000l4uj0kqv2rma","tag_id":"ckiv9pxdw0010roujg8a14uta","_id":"ckivcubtq0001l4ujf0fw8246"},{"post_id":"ckjpt3uot000034uj9j9t74i4","tag_id":"ckiv9pxdr000trouje5zyc1n5","_id":"ckjpt3upt000134ujbuadewam"},{"post_id":"ckk6vn4c90000s0uj4y800qy2","tag_id":"ckk6vn4cr0001s0uj6rbpd7eq","_id":"ckk6vn4cv0002s0ujdibl1x0q"},{"post_id":"ckn71ze8f0000ukuj6qo973p1","tag_id":"ckn71ze8m0001ukujdgda9h65","_id":"ckn71ze900002ukujaeqkfpdl"},{"post_id":"ckn8dyi7q0000zwujcw7qh2qr","tag_id":"ckn71ze8m0001ukujdgda9h65","_id":"ckn8dyigt0001zwuj4w2d8dol"},{"post_id":"cknjpiqqp0000psuj3caj2pv9","tag_id":"cknjpiqr50001psuj61xe28wa","_id":"cknjpiqr90002psujev0o9gfe"}],"Tag":[{"name":"C语言","_id":"ckiv9pxdh0004roujfxwnda16"},{"name":"数学","_id":"ckiv9pxdk0009roujdvcnhto6"},{"name":"haskell","_id":"ckiv9pxdk000brouj3ku3bv6p"},{"name":"jvm","_id":"ckiv9pxdn000groujc38p9w91"},{"name":"ubuntu","_id":"ckiv9pxdp000kroujgafk0a61"},{"name":"机器学习","_id":"ckiv9pxdq000nrouj2q30h7bj"},{"name":"前端","_id":"ckiv9pxdq000proujefvt5mga"},{"name":"随笔","_id":"ckiv9pxdq000rrouj7tio9joq"},{"name":"题解","_id":"ckiv9pxdr000trouje5zyc1n5"},{"name":"关于本站","_id":"ckiv9pxdw0010roujg8a14uta"},{"name":"OS","_id":"ckk6vn4cr0001s0uj6rbpd7eq"},{"name":"os","_id":"ckn71ze8m0001ukujdgda9h65"},{"name":"C++","_id":"cknjpiqr50001psuj61xe28wa"}]}}