<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>决策树&amp;&amp;随机森林</title>
    <url>/2020/12/19/%E5%86%B3%E7%AD%96%E6%A0%91-%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>机器学习小作业。</p>
<p>本文实现了决策树和随机森林算法。</p>
<p>简单的、仅针对二分类问题实现。<br><a id="more"></a></p>
<h2 id="C4-5决策树"><a href="#C4-5决策树" class="headerlink" title="C4.5决策树"></a>C4.5决策树</h2><p>C++实现<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; train;</span><br><span class="line"><span class="comment">//std::vector&lt;int&gt; train_Y;</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; test_X;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">splitString</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c : str)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;,&#x27;</span>)&#123;</span><br><span class="line">            ans.push_back(a);</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            a = a*<span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.push_back(a);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_train</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ifstream <span class="title">in</span><span class="params">(file)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">    in &gt;&gt; str;</span><br><span class="line">    <span class="keyword">while</span>(in &gt;&gt; str)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = splitString(str);</span><br><span class="line">        <span class="comment">//train_Y.push_back(v[(size_t)(v.size()-1)]);</span></span><br><span class="line">        <span class="comment">//v.pop_back();</span></span><br><span class="line">        train.push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_test</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ifstream <span class="title">in</span><span class="params">(file)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">    in &gt;&gt; str;</span><br><span class="line">    <span class="keyword">while</span>(in &gt;&gt; str)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = splitString(str);</span><br><span class="line">        test_X.push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span></span><br><span class="line">   <span class="keyword">int</span> col;<span class="comment">/*按照第几列进行划分*/</span></span><br><span class="line">   <span class="keyword">int</span> pos;<span class="comment">/*该节点正样本个数*/</span></span><br><span class="line">   <span class="keyword">int</span> neg;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,struct Tree *&gt; &gt; subT;</span><br><span class="line">   <span class="comment">/*划分得到的子树*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> * <span class="title">root</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; split(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp;vec,<span class="keyword">int</span> col,<span class="keyword">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp;  v : vec)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[col] == val)&#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">t</span><span class="params">(v)</span></span>;</span><br><span class="line">            t.erase(t.begin()+col);</span><br><span class="line">            ans.push_back(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Gini</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec.size() == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> y = vec[<span class="number">0</span>].size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v : vec)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[y] == <span class="number">1</span>)&#123;</span><br><span class="line">            a ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">size_t</span> s = vec.size();</span><br><span class="line">    <span class="keyword">double</span> ans = (a*a + (s-a)*(s-a))*<span class="number">1.</span>/(s*s);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">nlog</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*规定x == 0时,xlog2(x) 为0*/</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; <span class="number">1e-9</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x*log2(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算信息增益比*/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">G</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; vec, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> D = (<span class="keyword">int</span>)(vec.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : vec)&#123;</span><br><span class="line">        mp[v[col]] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(v[vec[<span class="number">0</span>].size()<span class="number">-1</span>])</span><br><span class="line">            p[v[col]] += <span class="number">1</span>,pos += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> x =  pos*<span class="number">1.</span>/D,ans,y = <span class="number">0</span>,z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> hd = -(nlog(x) + nlog(<span class="number">1</span>-x));</span><br><span class="line">    <span class="keyword">double</span> ha = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a : mp)&#123;</span><br><span class="line">        x = p[a.first]*<span class="number">1.</span>/a.second;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        z = a.second *<span class="number">1.</span>/D;</span><br><span class="line">        y -= z*(nlog(x) + nlog(<span class="number">1</span>-x));</span><br><span class="line">        ha -= nlog(z);</span><br><span class="line">    &#125;</span><br><span class="line">    hd -= y;</span><br><span class="line">    <span class="keyword">return</span> hd/ha;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*建树*/</span></span><br><span class="line"><span class="function">struct Tree* <span class="title">build</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; train)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> * <span class="title">root</span> =</span> <span class="keyword">new</span> Tree();</span><br><span class="line"></span><br><span class="line">    root-&gt;pos = <span class="number">0</span>;</span><br><span class="line">    root-&gt;neg = (<span class="keyword">int</span>)train.size();</span><br><span class="line">    root-&gt;col = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">size_t</span> y = train[<span class="number">0</span>].size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:train)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[y] == <span class="number">1</span>)&#123;</span><br><span class="line">            root-&gt;pos ++;</span><br><span class="line">            root-&gt;neg --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(train.size() == <span class="number">1</span>)<span class="keyword">return</span> root;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">int</span> col = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">double</span> mG = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*取信息增益比最大的特征对子树进行划分*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; train[<span class="number">0</span>].size() <span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">double</span> g = G(train,i);</span><br><span class="line">        <span class="keyword">if</span>(g &gt; mG)&#123;</span><br><span class="line">            mG = g;</span><br><span class="line">            col = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root-&gt;col = col;</span><br><span class="line">    <span class="keyword">if</span>(mG &gt; <span class="number">0.0000001</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : train)&#123;</span><br><span class="line">           st.insert(v[col]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a : st)&#123;</span><br><span class="line">          root-&gt;subT.push_back(&#123;a,build(split(train,col,a))&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(struct Tree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;struct Tree*,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    q.push(&#123;root,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;struct Tree*,<span class="keyword">int</span>&gt; p = q.front();q.pop();</span><br><span class="line">        <span class="keyword">if</span>(l == p.second<span class="number">-1</span>)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;l+=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt; p.first-&gt;pos &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; p.first-&gt;neg  &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp;  a : p.first-&gt;subT)&#123;</span><br><span class="line">            q.push(&#123;a.second,p.second+<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">predict</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec,struct Tree * root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;subT.size() == <span class="number">0</span>)<span class="keyword">return</span> root-&gt;pos*<span class="number">1.</span>/(root-&gt;pos+root-&gt;neg);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(vec)</span></span>;</span><br><span class="line">    <span class="keyword">size_t</span> len = root-&gt;subT.size();</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;subT[<span class="number">0</span>].first &gt;= v[root-&gt;col])&#123;</span><br><span class="line">        v.erase(v.begin()+root-&gt;col);</span><br><span class="line">        <span class="keyword">return</span> predict(v,root-&gt;subT[<span class="number">0</span>].second);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; len <span class="number">-1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;subT[i].first == v[root-&gt;col])&#123;</span><br><span class="line">               v.erase(v.begin()+root-&gt;col);</span><br><span class="line">                <span class="keyword">return</span> predict(v,root-&gt;subT[i].second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v.erase(v.begin()+root-&gt;col);</span><br><span class="line">        <span class="keyword">return</span> predict(v,root-&gt;subT[len - <span class="number">1</span>].second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read_train(<span class="string">&quot;train.csv&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; train_,test_;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : train)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = rand()%<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">30</span>)&#123;</span><br><span class="line">            test_.push_back(v);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            train_.push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root = build(train);</span><br><span class="line">    bfs(root);</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; root-&gt;pos &lt;&lt;&quot; &quot;&lt;&lt; root-&gt;neg &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : test_)&#123;</span><br><span class="line">        <span class="keyword">if</span>(predict(v,root)&gt;<span class="number">0.5</span> &amp;&amp; v[v.size()<span class="number">-1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(predict(v,root)&lt;<span class="number">0.5</span> &amp;&amp; v[v.size()<span class="number">-1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;accuracy:\n&quot;</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a*<span class="number">1.</span>/test_.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    read_test(<span class="string">&quot;test.csv&quot;</span>);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ofstream <span class="title">out</span><span class="params">(<span class="string">&quot;submission.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; test_X.size();i++)&#123;</span><br><span class="line">        out &lt;&lt; predict(test_X[i],root) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><p>在上面实现的决策树基础上，根据bagging原理，实现了随机森林。</p>
<p>每次从容量为n的样本集中有放回抽取n个样本，从特征集合中抽取m个特征，建立决策树。</p>
<p>每个决策树预测的概率求和，取算术平均作为随机森林预测结果。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; train;</span><br><span class="line"><span class="comment">//std::vector&lt;int&gt; train_Y;</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; test_X;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">splitString</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">            ans.push_back(a);</span><br><span class="line">            a = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a = a * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.push_back(a);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_train</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;file)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ifstream <span class="title">in</span><span class="params">(file)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">    in &gt;&gt; str;</span><br><span class="line">    <span class="keyword">while</span> (in &gt;&gt; str) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = splitString(str);</span><br><span class="line">        <span class="comment">//train_Y.push_back(v[(size_t)(v.size()-1)]);</span></span><br><span class="line">        <span class="comment">//v.pop_back();</span></span><br><span class="line">        train.push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_test</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;file)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ifstream <span class="title">in</span><span class="params">(file)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">    in &gt;&gt; str;</span><br><span class="line">    <span class="keyword">while</span> (in &gt;&gt; str) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = splitString(str);</span><br><span class="line">        test_X.push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> col;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> neg;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, struct Tree *&gt; &gt; subT;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; split(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;vec, <span class="keyword">int</span> col, <span class="keyword">int</span> val) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : vec) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[col] == val) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">t</span><span class="params">(v)</span></span>;</span><br><span class="line">            t.erase(t.begin() + col);</span><br><span class="line">            ans.push_back(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">nlog</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; <span class="number">1e-9</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x * log2(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">G</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;vec, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> D = (<span class="keyword">int</span>) (vec.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : vec) &#123;</span><br><span class="line">        mp[v[col]] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (v[vec[<span class="number">0</span>].size() - <span class="number">1</span>])</span><br><span class="line">            p[v[col]] += <span class="number">1</span>, pos += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> x = pos * <span class="number">1.</span> / D, y = <span class="number">0</span>, z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> hd = -(nlog(x) + nlog(<span class="number">1</span> - x));</span><br><span class="line">    <span class="keyword">double</span> ha = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : mp) &#123;</span><br><span class="line">        x = p[a.first] * <span class="number">1.</span> / a.second;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        z = a.second * <span class="number">1.</span> / D;</span><br><span class="line">        y -= z * (nlog(x) + nlog(<span class="number">1</span> - x));</span><br><span class="line">        ha -= nlog(z);</span><br><span class="line">    &#125;</span><br><span class="line">    hd -= y;</span><br><span class="line">    <span class="keyword">return</span> hd / ha;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct Tree *<span class="title">build</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; train)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> *<span class="title">root</span> =</span> <span class="keyword">new</span> Tree();</span><br><span class="line"></span><br><span class="line">    root-&gt;pos = <span class="number">0</span>;</span><br><span class="line">    root-&gt;neg = (<span class="keyword">int</span>) train.size();</span><br><span class="line">    root-&gt;col = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">size_t</span> y = train[<span class="number">0</span>].size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v:train) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[y] == <span class="number">1</span>) &#123;</span><br><span class="line">            root-&gt;pos++;</span><br><span class="line">            root-&gt;neg--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (train.size() == <span class="number">1</span>)<span class="keyword">return</span> root;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">int</span> col = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">double</span> mG = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; train[<span class="number">0</span>].size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> g = G(train, i);</span><br><span class="line">        <span class="keyword">if</span> (g &gt; mG) &#123;</span><br><span class="line">            mG = g;</span><br><span class="line">            col = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root-&gt;col = col;</span><br><span class="line">    <span class="keyword">if</span> (mG &gt; <span class="number">0.000001</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : train) &#123;</span><br><span class="line">            st.insert(v[col]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : st) &#123;</span><br><span class="line">            root-&gt;subT.push_back(&#123;a, build(split(train, col, a))&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">predict</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec, struct Tree *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;subT.size() == <span class="number">0</span>)<span class="keyword">return</span> root-&gt;pos * <span class="number">1.</span> / (root-&gt;pos + root-&gt;neg);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(vec)</span></span>;</span><br><span class="line">    <span class="keyword">size_t</span> len = root-&gt;subT.size();</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;subT[<span class="number">0</span>].first &gt;= v[root-&gt;col]) &#123;</span><br><span class="line">        v.erase(v.begin() + root-&gt;col);</span><br><span class="line">        <span class="keyword">return</span> predict(v, root-&gt;subT[<span class="number">0</span>].second);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;subT[i].first == v[root-&gt;col]) &#123;</span><br><span class="line">                v.erase(v.begin() + root-&gt;col);</span><br><span class="line">                <span class="keyword">return</span> predict(v, root-&gt;subT[i].second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v.erase(v.begin() + root-&gt;col);</span><br><span class="line">        <span class="keyword">return</span> predict(v, root-&gt;subT[len - <span class="number">1</span>].second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; resampling(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;train) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">size_t</span> n = train.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ans.push_back(train[rand() % n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; selectFeature(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;train) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; col;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; idx;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; train[<span class="number">0</span>].size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        col.push_back(rand() % <span class="number">10000</span>);</span><br><span class="line">        idx.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(idx.begin(), idx.end(), [=](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> col[a] &lt; col[b];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">while</span> (idx.size() &gt; <span class="number">28</span>)idx.pop_back();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : train) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : idx) &#123;</span><br><span class="line">            vec.push_back(v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        vec.push_back(v[v.size() - <span class="number">1</span>]);</span><br><span class="line">        ans.push_back(vec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;ans, idx&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; select(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;test, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;col) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : test) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : col) &#123;</span><br><span class="line">            vec.push_back(v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(vec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//33</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">33</span>;</span><br><span class="line">    read_train(<span class="string">&quot;train.csv&quot;</span>);</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt;train.size()&lt;&lt; std::endl;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; train_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; p;</span><br><span class="line">    <span class="comment">/*for(auto &amp; v : train)&#123;</span></span><br><span class="line"><span class="comment">        int x = rand()%100;</span></span><br><span class="line"><span class="comment">        if(x &lt; 30)&#123;</span></span><br><span class="line"><span class="comment">            test_.push_back(v);</span></span><br><span class="line"><span class="comment">        &#125;else&#123;</span></span><br><span class="line"><span class="comment">            train_.push_back(v);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; col;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;struct Tree *&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        train_ = resampling(train);</span><br><span class="line"></span><br><span class="line">        p = selectFeature(train_);</span><br><span class="line">        train_ = p.first;</span><br><span class="line">        col.push_back(p.second);</span><br><span class="line">        root.push_back(build(train_));</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;棵决策树生成完成&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    read_test(<span class="string">&quot;test.csv&quot;</span>);</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ofstream <span class="title">out</span><span class="params">(<span class="string">&quot;submission.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">ans</span><span class="params">(test_X.size())</span></span>;</span><br><span class="line">    fill(ans.begin(), ans.end(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; test = select(test_X, col[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v :col[i]) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; test.size(); j++) &#123;</span><br><span class="line">            ans[j] += predict(test[j], root[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; root[i]-&gt;pos &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; root[i]-&gt;neg &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x: ans) &#123;</span><br><span class="line">        out &lt;&lt; x * <span class="number">1.</span> / N &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>haskell-hw</title>
    <url>/2020/08/27/haskell-hw/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>homework of CIS194</p>
<h2 id="hw1"><a href="#hw1" class="headerlink" title="hw1"></a><a href="https://www.seas.upenn.edu/~cis194/spring13/hw/01-intro.pdf">hw1</a></h2><a id="more"></a>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Exercise 01</span></span><br><span class="line"><span class="title">toDigits</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">toDigits</span> x</span><br><span class="line">   | x &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">10</span> = [x]</span><br><span class="line">   | x &gt; <span class="number">10</span> = toDigits (x `div` <span class="number">10</span>) ++ [x `mod` <span class="number">10</span>]</span><br><span class="line">   | otherwise = []</span><br><span class="line"></span><br><span class="line"><span class="title">toDigitsRev</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">toDigitsRev</span> x</span><br><span class="line">   | x &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">10</span> = [x]</span><br><span class="line">   | x &gt; <span class="number">10</span> = (x `mod` <span class="number">10</span>):toDigitsRev(x `div` <span class="number">10</span>)</span><br><span class="line">   | otherwise = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 02</span></span><br><span class="line"><span class="title">len</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">len</span> [] = <span class="number">0</span></span><br><span class="line"><span class="title">len</span> (_:y) = <span class="number">1</span> + len(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">doubleEveryOther</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">doubleEveryOther</span> [] = []</span><br><span class="line"><span class="title">doubleEveryOther</span> (x:[])= [x]</span><br><span class="line"><span class="title">doubleEveryOther</span> (x:y:z)= <span class="keyword">if</span>(len(z) `mod` <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">then</span> (x*<span class="number">2</span> : y : doubleEveryOther(z)) <span class="keyword">else</span> (x:y*<span class="number">2</span>:doubleEveryOther(z))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 3</span></span><br><span class="line"><span class="title">sumDigit</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sumDigit</span> x</span><br><span class="line">    | x &lt; <span class="number">10</span>  = x</span><br><span class="line">    | otherwise = (x `mod` <span class="number">10</span>) + sumDigit (x `div` <span class="number">10</span>) </span><br><span class="line"></span><br><span class="line"><span class="title">sumDigits</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sumDigits</span> [] = <span class="number">0</span></span><br><span class="line"><span class="title">sumDigits</span> (x:y) = sumDigit(x) + sumDigits(y)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 4</span></span><br><span class="line"><span class="title">validate</span> :: <span class="type">Integer</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">validate</span> num</span><br><span class="line">   | sumDigits(doubleEveryOther(toDigits(num))) `mod` <span class="number">10</span> == <span class="number">0</span> = <span class="type">True</span></span><br><span class="line">   | otherwise = <span class="type">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 5</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Peg</span> = <span class="type">String</span></span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Move</span> = (<span class="type">Peg</span>, <span class="type">Peg</span>)</span></span><br><span class="line"><span class="title">hanoi</span> :: <span class="type">Integer</span> -&gt; <span class="type">Peg</span> -&gt; <span class="type">Peg</span> -&gt; <span class="type">Peg</span> -&gt; [<span class="type">Move</span>]</span><br><span class="line"><span class="title">hanoi</span> n a b c</span><br><span class="line">     | n == <span class="number">1</span> = [(a,b)]</span><br><span class="line">     | otherwise = (hanoi (n<span class="number">-1</span>) a c b) ++ [(a,b)] ++ (hanoi (n<span class="number">-1</span>) c b a)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 6</span></span><br><span class="line"></span><br><span class="line"><span class="title">len2</span> :: [<span class="type">Move</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">len2</span> [] = <span class="number">0</span></span><br><span class="line"><span class="title">len2</span> (_:y) = <span class="number">1</span> + len2 y</span><br><span class="line"></span><br><span class="line"><span class="title">hanoi2</span> :: <span class="type">Integer</span> -&gt; <span class="type">Peg</span> -&gt; <span class="type">Peg</span> -&gt; <span class="type">Peg</span> -&gt; <span class="type">Peg</span> -&gt; [<span class="type">Move</span>]</span><br><span class="line"><span class="title">hanoi2</span> n a b c d</span><br><span class="line">     | n == <span class="number">1</span> = [(a,b)]</span><br><span class="line">     | n == <span class="number">2</span> = [(a,d),(a,b),(d,b)]</span><br><span class="line">     | otherwise = (hanoi2 (n<span class="number">-2</span>) a c b d) ++[(a,d),(a,b),(d,b)] ++ (hanoi2 (n<span class="number">-2</span>) c b a d)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="hw2"><a href="#hw2" class="headerlink" title="hw2"></a><a href="https://www.seas.upenn.edu/~cis194/spring13/hw/02-ADTs.pdf">hw2</a></h2><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#123;-# OPTIONS_GHC -Wall #-&#125;</span></span><br><span class="line"><span class="keyword">module</span> LogAnalysis <span class="keyword">where</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Log</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 1</span></span><br><span class="line"></span><br><span class="line"><span class="title">parseMessage</span> :: <span class="type">String</span> -&gt; <span class="type">LogMessage</span></span><br><span class="line"><span class="title">parseMessage</span> msg</span><br><span class="line">      |msg!!<span class="number">0</span> == &#x27;<span class="type">I&#x27;</span> = <span class="type">LogMessage</span> <span class="type">Info</span> (read ((words msg)!!<span class="number">1</span>)::<span class="type">Int</span>)  (unwords(drop <span class="number">2</span> (words msg)))</span><br><span class="line">      |msg!!<span class="number">0</span> == &#x27;<span class="type">W&#x27;</span> = <span class="type">LogMessage</span> <span class="type">Warning</span> (read ((words msg)!!<span class="number">1</span>)::<span class="type">Int</span>)  (unwords(drop <span class="number">2</span>(words msg)))</span><br><span class="line">      |msg!!<span class="number">0</span> == &#x27;<span class="type">E&#x27;</span> = <span class="type">LogMessage</span> (<span class="type">Error</span> (read ((words msg)!!<span class="number">1</span>)::<span class="type">Int</span>)) (read ((words msg)!!<span class="number">2</span>)::<span class="type">Int</span>)  (unwords(drop <span class="number">3</span> (words msg)))</span><br><span class="line">      |otherwise = <span class="type">Unknown</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">parse</span> :: <span class="type">String</span> -&gt; [<span class="type">LogMessage</span>]</span><br><span class="line"><span class="title">parse</span> msg</span><br><span class="line">     |msg == <span class="string">&quot;&quot;</span> = []</span><br><span class="line">     |otherwise = [parseMessage ((lines msg)!!<span class="number">0</span>)] ++ parse(unlines(tail(lines msg)))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 2</span></span><br><span class="line"></span><br><span class="line"><span class="title">insert</span> :: <span class="type">LogMessage</span> -&gt; <span class="type">MessageTree</span> -&gt; <span class="type">MessageTree</span></span><br><span class="line"><span class="title">insert</span> (<span class="type">Unknown</span> _) t = t</span><br><span class="line"><span class="title">insert</span> (<span class="type">LogMessage</span> a b c) (<span class="type">Node</span> x (<span class="type">LogMessage</span> w y v) z) = <span class="keyword">if</span> b &lt; y <span class="keyword">then</span> <span class="type">Node</span> (insert (<span class="type">LogMessage</span> a b c) x) (<span class="type">LogMessage</span> w y v) z</span><br><span class="line">                                                              <span class="keyword">else</span> <span class="type">Node</span> x (<span class="type">LogMessage</span> w y v) (insert (<span class="type">LogMessage</span> a b c) z)</span><br><span class="line"><span class="title">insert</span> (<span class="type">LogMessage</span> a b c) <span class="type">Leaf</span> = <span class="type">Node</span> <span class="type">Leaf</span> (<span class="type">LogMessage</span> a b c) <span class="type">Leaf</span></span><br><span class="line"><span class="title">insert</span> (<span class="type">LogMessage</span> a b c) _ = <span class="type">Node</span> <span class="type">Leaf</span> (<span class="type">LogMessage</span> a b c) <span class="type">Leaf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 3</span></span><br><span class="line"></span><br><span class="line"><span class="title">build</span> :: [<span class="type">LogMessage</span>] -&gt; <span class="type">MessageTree</span></span><br><span class="line"><span class="title">build</span> [] = <span class="type">Leaf</span></span><br><span class="line"><span class="title">build</span> (x:y) = insert x (build y)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 4</span></span><br><span class="line"></span><br><span class="line"><span class="title">inOrder</span> :: <span class="type">MessageTree</span> -&gt; [<span class="type">LogMessage</span>]</span><br><span class="line"><span class="title">inOrder</span> <span class="type">Leaf</span> = []</span><br><span class="line"><span class="title">inOrder</span> (<span class="type">Node</span> x y z) = inOrder x ++ [y] ++ inOrder z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 5</span></span><br><span class="line"><span class="title">select</span> :: [<span class="type">LogMessage</span>] -&gt; [<span class="type">LogMessage</span>]</span><br><span class="line"><span class="title">select</span> [] = []</span><br><span class="line"><span class="title">select</span> ((<span class="type">LogMessage</span> (<span class="type">Error</span> x) y z) : w) = <span class="keyword">if</span> x &gt; <span class="number">50</span> <span class="keyword">then</span> [(<span class="type">LogMessage</span> (<span class="type">Error</span> x) y z)] ++ (select w) <span class="keyword">else</span> (select w)</span><br><span class="line"><span class="title">select</span> (_:y) = select y</span><br><span class="line"></span><br><span class="line"><span class="title">getMsg</span>::[<span class="type">LogMessage</span>] -&gt; [<span class="type">String</span>]</span><br><span class="line"><span class="title">getMsg</span> [] = []</span><br><span class="line"><span class="title">getMsg</span> ((<span class="type">LogMessage</span> _ _ z):w) = [z] ++ (getMsg w)</span><br><span class="line"><span class="title">getMsg</span> _ = []</span><br><span class="line"></span><br><span class="line"><span class="title">whatWentWrong</span> :: [<span class="type">LogMessage</span>] -&gt; [<span class="type">String</span>]</span><br><span class="line"><span class="title">whatWentWrong</span> msg = (getMsg (inOrder(build(select msg))))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="hw3"><a href="#hw3" class="headerlink" title="hw3"></a><a href="https://www.seas.upenn.edu/~cis194/spring13/hw/03-rec-poly.pdf">hw3</a></h2><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Exercise 1 Hopscotch</span></span><br><span class="line"></span><br><span class="line"><span class="title">sk</span>::<span class="type">Int</span>-&gt;<span class="type">Int</span> -&gt; [a] -&gt; [a]</span><br><span class="line"><span class="title">sk</span> n x ls</span><br><span class="line">    | n + x &gt; length(ls) = [ls !! (x<span class="number">-1</span>)]</span><br><span class="line">    | otherwise = [ls !! (x<span class="number">-1</span>)]  ++ (sk n (x+n) ls)</span><br><span class="line"></span><br><span class="line"><span class="title">skip</span>::<span class="type">Int</span>-&gt;[a] -&gt; [[a]]</span><br><span class="line"><span class="title">skip</span> n ls</span><br><span class="line">     | n == length(ls) = [(sk n n ls)]</span><br><span class="line">     | otherwise = [(sk n n ls)] ++ (skip (n+<span class="number">1</span>) ls)</span><br><span class="line"></span><br><span class="line"><span class="title">skips</span> :: [a] -&gt; [[a]]</span><br><span class="line"><span class="title">skips</span> [] = []</span><br><span class="line"><span class="title">skips</span> ls = (skip <span class="number">1</span> ls)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 2 Local maxima</span></span><br><span class="line"><span class="title">getMax</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">getMax</span> _ [] = []</span><br><span class="line"><span class="title">getMax</span> _ [x] = []</span><br><span class="line"><span class="title">getMax</span> a (x:y:z) =  <span class="keyword">if</span> (x &gt; a  &amp;&amp;  x &gt; y) <span class="keyword">then</span> [x] ++ (getMax x (y:z)) <span class="keyword">else</span> (getMax x (y:z))</span><br><span class="line"></span><br><span class="line"><span class="title">localMaxima</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">localMaxima</span> [] = []</span><br><span class="line"><span class="title">localMaxima</span> ls = getMax (ls !! <span class="number">0</span>) ls</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 3 Histogram</span></span><br><span class="line"><span class="title">count</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">count</span> <span class="number">10</span> _ = []</span><br><span class="line"><span class="title">count</span> n ls = [(toInteger(length(filter ( == n) ls)))] ++ (count (n+<span class="number">1</span>) ls)</span><br><span class="line"></span><br><span class="line"><span class="title">line</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">line</span> [] = <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="title">line</span> (x:y) = <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">then</span> <span class="string">&quot;*&quot;</span> ++ line(y) <span class="keyword">else</span> <span class="string">&quot; &quot;</span> ++ line(y)</span><br><span class="line"></span><br><span class="line"><span class="title">sub</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sub</span> x = x - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="title">toString</span>::[<span class="type">Integer</span>] -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">toString</span> ls</span><br><span class="line">     |(length(filter (&gt; <span class="number">0</span>) ls)) == <span class="number">0</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">     |otherwise = toString(map sub ls) ++ line(ls)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">histogram</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">histogram</span> ls = (toString(count <span class="number">0</span> ls) ++ <span class="string">&quot;0123456789\n&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="hw4"><a href="#hw4" class="headerlink" title="hw4"></a><a href="https://www.seas.upenn.edu/~cis194/spring13/hw/04-higher-order.pdf">hw4</a></h2><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Exercise 1: Wholemeal programming</span></span><br><span class="line"><span class="title">fun1</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">fun1</span> [] = <span class="number">1</span></span><br><span class="line"><span class="title">fun1</span> (x:xs)</span><br><span class="line">    |even x = (x - <span class="number">2</span>) * fun1 xs</span><br><span class="line">    |otherwise = fun1 xs</span><br><span class="line"></span><br><span class="line"><span class="title">fun1&#x27;</span> :: [<span class="type">Integer</span>]-&gt;<span class="type">Integer</span></span><br><span class="line"><span class="title">fun1&#x27;</span> = product.map (\x-&gt; x<span class="number">-2</span>).filter even</span><br><span class="line"></span><br><span class="line"><span class="title">fun2</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">fun2</span> <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="title">fun2</span> n | even n = n + fun2 (n `div` <span class="number">2</span>)</span><br><span class="line">       | otherwise = fun2 (<span class="number">3</span> * n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">fun2&#x27;</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">fun2&#x27;</span>  = sum.filter even.takeWhile (&gt;<span class="number">1</span>).iterate(\x -&gt; <span class="keyword">if</span> even x <span class="keyword">then</span> (x `div` <span class="number">2</span>) <span class="keyword">else</span> (<span class="number">3</span>*x + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 2:Folding with trees</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">Leaf</span></span></span><br><span class="line">            | <span class="type">Node</span> <span class="type">Integer</span> (<span class="type">Tree</span> a) a (<span class="type">Tree</span> a)</span><br><span class="line">  <span class="keyword">deriving</span> (<span class="type">Show</span>, <span class="type">Eq</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">foldTree</span> :: [a] -&gt; <span class="type">Tree</span> a</span><br><span class="line"><span class="title">foldTree</span> = foldr insertNode <span class="type">Leaf</span></span><br><span class="line"></span><br><span class="line"><span class="title">insertNode</span> :: a -&gt; <span class="type">Tree</span> a -&gt; <span class="type">Tree</span> a</span><br><span class="line"><span class="title">insertNode</span> x <span class="type">Leaf</span> = <span class="type">Node</span> <span class="number">0</span> <span class="type">Leaf</span> x <span class="type">Leaf</span></span><br><span class="line"><span class="title">insertNode</span> x (<span class="type">Node</span> h ln y rn)</span><br><span class="line">  | treeHeight ln &lt; treeHeight rn =</span><br><span class="line">    <span class="keyword">let</span> nn = insertNode x ln</span><br><span class="line">    <span class="keyword">in</span> <span class="type">Node</span> (treeHeight nn + <span class="number">1</span>) nn y rn</span><br><span class="line">  | otherwise =</span><br><span class="line">    <span class="keyword">let</span> nn = insertNode x rn</span><br><span class="line">    <span class="keyword">in</span> <span class="type">Node</span> (treeHeight nn + <span class="number">1</span>) ln y nn</span><br><span class="line"></span><br><span class="line"><span class="title">treeHeight</span> :: <span class="type">Tree</span> a -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">treeHeight</span> <span class="type">Leaf</span> = <span class="number">-1</span></span><br><span class="line"><span class="title">treeHeight</span> (<span class="type">Node</span> h _ _ _) = h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 3: More folds!</span></span><br><span class="line"><span class="title">xor</span> :: [<span class="type">Bool</span>] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">xor</span> = foldr (\x y -&gt; <span class="keyword">if</span> ((x == <span class="type">True</span> &amp;&amp; y == <span class="type">False</span>) || (x == <span class="type">False</span> &amp;&amp; y == <span class="type">True</span>)) <span class="keyword">then</span> <span class="type">True</span> <span class="keyword">else</span> <span class="type">False</span>) <span class="type">False</span></span><br><span class="line"></span><br><span class="line"><span class="title">map&#x27;</span> :: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br><span class="line"><span class="title">map&#x27;</span> f = foldr (\x y -&gt; [f(x)] ++ y) []</span><br><span class="line"></span><br><span class="line"><span class="title">myFoldl</span> :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br><span class="line"><span class="title">myFoldl</span> f base xs = foldr (flip f) base (reverse xs)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 4:Finding primes</span></span><br><span class="line"><span class="title">cartProd</span> :: [a] -&gt; [b] -&gt; [(a, b)]</span><br><span class="line"><span class="title">cartProd</span> xs ys = [(x,y) | x &lt;- xs, y &lt;- ys]</span><br><span class="line"></span><br><span class="line"><span class="title">sieveSundaram</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">sieveSundaram</span> n = map (\x -&gt; x*<span class="number">2</span> + <span class="number">1</span>) (filter (\x -&gt; notElem x (map (\(i,j) -&gt; <span class="number">2</span>*i*j + i + j) (filter (\(i,j)-&gt;<span class="number">2</span>*i*j+i+j &lt;= n) (cartProd [<span class="number">1.</span>.n] [<span class="number">1.</span>.n]))))  [<span class="number">1.</span>.n])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="hw5"><a href="#hw5" class="headerlink" title="hw5"></a><a href="https://www.seas.upenn.edu/~cis194/spring13/hw/05-type-classes.pdf">hw5</a></h2><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#123;-# LANGUAGE FlexibleInstances #-&#125;</span></span><br><span class="line"><span class="meta">&#123;-# LANGUAGE TypeSynonymInstances #-&#125;</span></span><br><span class="line"><span class="keyword">import</span> ExprT</span><br><span class="line"><span class="keyword">import</span> Parser</span><br><span class="line"><span class="keyword">import</span> StackVM</span><br><span class="line"><span class="keyword">import</span> Data.Maybe</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> M</span><br><span class="line"><span class="comment">-- Exercise 1</span></span><br><span class="line"></span><br><span class="line"><span class="title">eval</span> :: <span class="type">ExprT</span>-&gt;<span class="type">Integer</span></span><br><span class="line"><span class="title">eval</span> (<span class="type">ExprT</span>.<span class="type">Lit</span> x) = x</span><br><span class="line"><span class="title">eval</span> (<span class="type">ExprT</span>.<span class="type">Add</span> x y) = eval x + eval y</span><br><span class="line"><span class="title">eval</span> (<span class="type">ExprT</span>.<span class="type">Mul</span> x y) = eval x * eval y</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 2</span></span><br><span class="line"><span class="title">evalStr</span> :: <span class="type">String</span> -&gt; <span class="type">Maybe</span> <span class="type">Integer</span></span><br><span class="line"><span class="title">evalStr</span> str</span><br><span class="line">    |(parseExp <span class="type">ExprT</span>.<span class="type">Lit</span> <span class="type">ExprT</span>.<span class="type">Add</span> <span class="type">ExprT</span>.<span class="type">Mul</span> str == <span class="type">Nothing</span>) = <span class="type">Nothing</span></span><br><span class="line">    |otherwise = <span class="type">Just</span>(eval (fromJust(parseExp <span class="type">ExprT</span>.<span class="type">Lit</span> <span class="type">ExprT</span>.<span class="type">Add</span> <span class="type">ExprT</span>.<span class="type">Mul</span> str)))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Expr</span> a <span class="keyword">where</span></span></span><br><span class="line">   lit :: <span class="type">Integer</span> -&gt; a</span><br><span class="line">   add :: a -&gt; a -&gt; a</span><br><span class="line">   mul :: a -&gt; a -&gt; a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Expr</span> <span class="type">ExprT</span> <span class="keyword">where</span></span></span><br><span class="line">   lit = <span class="type">ExprT</span>.<span class="type">Lit</span></span><br><span class="line">   add = <span class="type">ExprT</span>.<span class="type">Add</span></span><br><span class="line">   mul = <span class="type">ExprT</span>.<span class="type">Mul</span></span><br><span class="line"></span><br><span class="line"><span class="title">reify</span> :: <span class="type">ExprT</span> -&gt; <span class="type">ExprT</span></span><br><span class="line"><span class="title">reify</span> = id</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Exercise 4</span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Expr</span> <span class="type">Integer</span> <span class="keyword">where</span></span></span><br><span class="line">    lit  a =  a</span><br><span class="line">    add a b = a + b</span><br><span class="line">    mul a b = a*b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Expr</span> <span class="type">Bool</span> <span class="keyword">where</span></span></span><br><span class="line">     lit a = (<span class="keyword">if</span> a &gt; <span class="number">0</span> <span class="keyword">then</span> <span class="type">True</span> <span class="keyword">else</span> <span class="type">False</span>)</span><br><span class="line">     add a b = a || b</span><br><span class="line">     mul a b = a &amp;&amp; b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">MinMax</span> = <span class="type">MinMax</span> <span class="type">Integer</span> <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Show</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Expr</span> <span class="type">MinMax</span> <span class="keyword">where</span></span></span><br><span class="line">      lit x = <span class="type">MinMax</span> x</span><br><span class="line">      add (<span class="type">MinMax</span> a) (<span class="type">MinMax</span> b) = <span class="type">MinMax</span>(max a b)</span><br><span class="line">      mul (<span class="type">MinMax</span> a) (<span class="type">MinMax</span> b) = <span class="type">MinMax</span>(min a b)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Mod7</span> = <span class="type">Mod7</span> <span class="type">Integer</span> <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Show</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Expr</span> <span class="type">Mod7</span> <span class="keyword">where</span></span></span><br><span class="line">     lit  x = <span class="type">Mod7</span>(x `mod` <span class="number">7</span>)</span><br><span class="line">     add (<span class="type">Mod7</span> a) (<span class="type">Mod7</span> b) = <span class="type">Mod7</span>((a + b) `mod` <span class="number">7</span>)</span><br><span class="line">     mul (<span class="type">Mod7</span> a) (<span class="type">Mod7</span> b) = <span class="type">Mod7</span>((a*b) `mod` <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">testExp</span> :: <span class="type">Expr</span> a =&gt; <span class="type">Maybe</span> a</span><br><span class="line"><span class="title">testExp</span> = parseExp lit add mul <span class="string">&quot;(3 * -4) + 5&quot;</span></span><br><span class="line"><span class="title">testInteger</span> = testExp :: <span class="type">Maybe</span> <span class="type">Integer</span></span><br><span class="line"><span class="title">testBool</span> = testExp :: <span class="type">Maybe</span> <span class="type">Bool</span></span><br><span class="line"><span class="title">testMM</span> = testExp :: <span class="type">Maybe</span> <span class="type">MinMax</span></span><br><span class="line"><span class="title">testSat</span> = testExp :: <span class="type">Maybe</span> <span class="type">Mod7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- exercise 5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Expr</span> <span class="type">Program</span> <span class="keyword">where</span></span></span><br><span class="line">    lit x = [<span class="type">PushI</span> x]</span><br><span class="line">    add a b = a ++ b ++ [<span class="type">StackVM</span>.<span class="type">Add</span>]</span><br><span class="line">    mul a b = a ++ b ++ [<span class="type">StackVM</span>.<span class="type">Mul</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">compile</span>:: <span class="type">String</span> -&gt; <span class="type">Maybe</span> <span class="type">Program</span></span><br><span class="line"><span class="title">compile</span> str = parseExp lit add mul str :: <span class="type">Maybe</span> <span class="type">Program</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- exercise 6</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">HasVars</span> a <span class="keyword">where</span></span></span><br><span class="line">        var :: <span class="type">String</span> -&gt; a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">VarExprT</span> = <span class="type">Lit</span> <span class="type">Integer</span></span></span><br><span class="line">                | <span class="type">Var</span> <span class="type">String</span></span><br><span class="line">                | <span class="type">Add</span> <span class="type">VarExprT</span> <span class="type">VarExprT</span></span><br><span class="line">                | <span class="type">Mul</span> <span class="type">VarExprT</span> <span class="type">VarExprT</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">HasVars</span> (<span class="type">M</span>.<span class="type">Map</span> <span class="type">String</span> <span class="type">Integer</span> -&gt; <span class="type">Maybe</span> <span class="type">Integer</span>) <span class="keyword">where</span></span></span><br><span class="line">        var = <span class="type">M</span>.lookup</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Expr</span> (<span class="type">M</span>.<span class="type">Map</span> <span class="type">String</span> <span class="type">Integer</span> -&gt; <span class="type">Maybe</span> <span class="type">Integer</span>) <span class="keyword">where</span></span></span><br><span class="line">        lit int0 _ = <span class="type">Just</span> int0</span><br><span class="line">        add var0 var1 map0 = <span class="keyword">do</span> int0 &lt;- var0 map0</span><br><span class="line">                                int1 &lt;- var1 map0</span><br><span class="line">                                return (int0 + int1)</span><br><span class="line">        mul var0 var1 map0 = <span class="keyword">do</span> int0 &lt;- var0 map0</span><br><span class="line">                                int1 &lt;- var1 map0</span><br><span class="line">                                return (int0 * int1)</span><br><span class="line"></span><br><span class="line"><span class="title">withVars</span> :: [(<span class="type">String</span>, <span class="type">Integer</span>)]</span><br><span class="line">            -&gt; (<span class="type">M</span>.<span class="type">Map</span> <span class="type">String</span> <span class="type">Integer</span> -&gt; <span class="type">Maybe</span> <span class="type">Integer</span>)</span><br><span class="line">            -&gt; <span class="type">Maybe</span> <span class="type">Integer</span></span><br><span class="line"><span class="title">withVars</span> vs ex = ex $ <span class="type">M</span>.fromList vs</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">          print $ withVars [(<span class="string">&quot;x&quot;</span>, <span class="number">6</span>)] $ add (lit <span class="number">3</span>) (var <span class="string">&quot;x&quot;</span>)</span><br><span class="line">          print $ withVars [(<span class="string">&quot;x&quot;</span>, <span class="number">6</span>)] $ add (lit <span class="number">3</span>) (var <span class="string">&quot;y&quot;</span>)</span><br><span class="line">          print $ withVars  [(<span class="string">&quot;x&quot;</span>, <span class="number">6</span>), (<span class="string">&quot;y&quot;</span>, <span class="number">3</span>)] $ mul (var <span class="string">&quot;x&quot;</span>) (add (var <span class="string">&quot;y&quot;</span>) (var <span class="string">&quot;x&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>haskell</title>
    <url>/2020/08/27/haskell/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Introduction-to-Haskell"><a href="#Introduction-to-Haskell" class="headerlink" title="Introduction to Haskell"></a>Introduction to Haskell</h2><ul>
<li><p>Functions are first-class, that is, functions are values which can be used in exactly the same ways as any other sort of value.</p>
</li>
<li><p>The meaning of Haskell programs is centered around evaluating expressions rather than executing instructions.</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install haskell-<span class="built_in">platform</span></span><br></pre></td></tr></table></figure>
<p>开启交互模式</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ghci</span></span><br></pre></td></tr></table></figure>
<p><code>Ctrl + z</code> 退出交互模式</p>
</li>
</ul>
<p>导入<code>test.hs</code>文件<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:l</span> <span class="selector-tag">test</span><span class="selector-class">.hs</span></span><br></pre></td></tr></table></figure></p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>GHCi is an interactive Haskell REPL (Read-Eval-Print-Loop) that comes with GHC. At the GHCi prompt, you can evaluate expressions, load Haskell files with :load (:l) (and reload them with :reload (:r)), ask for the type of an expression with :type (:t), and many other things (try :? for a list of commands).<br><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ex01</span> = <span class="number">3</span> + <span class="number">2</span></span><br><span class="line"><span class="attribute">ex02</span> = <span class="number">8</span> / <span class="number">2</span> --(<span class="number">4</span>.<span class="number">0</span>)</span><br><span class="line"><span class="attribute">ex03</span> = mod <span class="number">19</span> <span class="number">3</span></span><br><span class="line"><span class="attribute">ex04</span> = <span class="number">19</span> `mod` <span class="number">3</span></span><br><span class="line"><span class="attribute">ex05</span> = <span class="number">7</span> ^ <span class="number">222</span></span><br><span class="line"><span class="attribute">ex06</span> = (-<span class="number">3</span>) * (-<span class="number">7</span>)</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>backticks</code> make a function name into an infix operator.</li>
<li>negative numbers must often be surrounded by parentheses, to avoid having the negation sign parsed as subtraction.</li>
</ul>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- badArith1 = i + n</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Addition is only between values of the same numeric type, Haskell does not do implicit conversion,you must explicitly convert with:</p>
<p>fromIntegral: converts from any integral type (Int or Integer) to any other numeric type.</p>
<p>round, floor, ceiling: convert floating-point numbers to Int or Integer.</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- badArith2 = i / i</span></span><br></pre></td></tr></table></figure></li>
<li>This is an error since / performs floating-point division only. For integer division we can use div.<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">ex07 = i `div` i</span><br></pre></td></tr></table></figure>
<h3 id="Boolean-logic"><a href="#Boolean-logic" class="headerlink" title="Boolean logic"></a>Boolean logic</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ex08</span> = <span class="literal">True</span> &amp;&amp; <span class="literal">False</span></span><br><span class="line"><span class="attr">ex09</span> = not (<span class="literal">False</span> || <span class="literal">True</span>)</span><br><span class="line"><span class="attr">ex10</span> = <span class="number">2</span> /= <span class="number">3</span> (/= 不等于)</span><br></pre></td></tr></table></figure></li>
<li><code>if-expressions</code>: if b then t else f</li>
</ul>
<p>the else part is required for an if-expression, since the if-expression must result in some value. </p>
<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><ul>
<li>function application has higher precedence than any infix operators</li>
</ul>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">hello1 :: [Char]</span><br><span class="line">hello1 = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br><span class="line"></span><br><span class="line">hello2 :: String</span><br><span class="line">hello2 = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">helloSame = hello1 == hello2</span><br></pre></td></tr></table></figure>
<h2 id="Algebraic-Data-Types"><a href="#Algebraic-Data-Types" class="headerlink" title="Algebraic Data Types"></a>Algebraic Data Types</h2><h3 id="Enumeration-types"><a href="#Enumeration-types" class="headerlink" title="Enumeration types"></a>Enumeration types</h3><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">data Thing = Shoe </span><br><span class="line">           | <span class="type">Ship</span> </span><br><span class="line">           | <span class="type">SealingWax</span> </span><br><span class="line">           | <span class="type">Cabbage</span> </span><br><span class="line">           | <span class="type">King</span></span><br><span class="line">  deriving <span class="keyword">Show</span></span><br></pre></td></tr></table></figure>
<ul>
<li>The deriving Show is a magical incantation which tells GHC to automatically generate default code for converting Things to Strings.<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">shoe </span>:: Thing</span><br><span class="line"><span class="keyword">shoe </span>= <span class="keyword">Shoe</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">listO&#x27;Things </span>:: [Thing]</span><br><span class="line">listO<span class="string">&#x27;Things = [Shoe, SealingWax, King, Cabbage, King]</span></span><br></pre></td></tr></table></figure></li>
<li>We can write functions on Things by pattern-matching.<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">isSmall ::</span> <span class="string">Thing</span> <span class="string">-&gt;</span> <span class="string">Bool</span></span><br><span class="line"><span class="string">isSmall</span> <span class="string">Shoe</span>       <span class="string">=</span> <span class="literal">True</span></span><br><span class="line"><span class="string">isSmall</span> <span class="string">Ship</span>       <span class="string">=</span> <span class="literal">False</span></span><br><span class="line"><span class="string">isSmall</span> <span class="string">SealingWax</span> <span class="string">=</span> <span class="literal">True</span></span><br><span class="line"><span class="string">isSmall</span> <span class="string">Cabbage</span>    <span class="string">=</span> <span class="literal">True</span></span><br><span class="line"><span class="string">isSmall</span> <span class="string">King</span>       <span class="string">=</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
or<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">isSmall2 ::</span> <span class="string">Thing</span> <span class="string">-&gt;</span> <span class="string">Bool</span></span><br><span class="line"><span class="string">isSmall2</span> <span class="string">Ship</span> <span class="string">=</span> <span class="literal">False</span></span><br><span class="line"><span class="string">isSmall2</span> <span class="string">King</span> <span class="string">=</span> <span class="literal">False</span></span><br><span class="line"><span class="string">isSmall2</span> <span class="string">_</span>    <span class="string">=</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="Beyond-enumerations"><a href="#Beyond-enumerations" class="headerlink" title="Beyond enumerations"></a>Beyond enumerations</h3><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">FailableDouble</span> = <span class="type">Failure</span></span></span><br><span class="line">                    | <span class="type">OK</span> <span class="type">Double</span></span><br><span class="line">  <span class="keyword">deriving</span> <span class="type">Show</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ex01</span> = Failure</span><br><span class="line"><span class="attr">ex02</span> = OK <span class="number">3.4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">safeDiv :: Double -&gt; Double -&gt; FailableDouble</span><br><span class="line">safeDiv _ <span class="number">0</span> = Failure</span><br><span class="line">safeDiv <span class="symbol">x</span> <span class="symbol">y</span> = OK (<span class="symbol">x</span> / <span class="symbol">y</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">failureToZero :: FailableDouble -&gt; Double</span><br><span class="line">failureToZero Failure = 0</span><br><span class="line">failureToZero (OK d)  = d</span><br></pre></td></tr></table></figure></li>
<li>Data constructors can have more than one argument.<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">-- Store a <span class="keyword">person</span>&#x27;s name, age, and favourite <span class="keyword">Thing</span>.</span><br><span class="line">data <span class="keyword">Person</span> = <span class="keyword">Person</span> String Int <span class="keyword">Thing</span></span><br><span class="line">  deriving Show</span><br><span class="line"></span><br><span class="line">brent :: <span class="keyword">Person</span></span><br><span class="line">brent = <span class="keyword">Person</span> <span class="string">&quot;Brent&quot;</span> 31 SealingWax</span><br><span class="line"></span><br><span class="line">stan :: <span class="keyword">Person</span></span><br><span class="line">stan  = <span class="keyword">Person</span> <span class="string">&quot;Stan&quot;</span> 94 Cabbage</span><br><span class="line"></span><br><span class="line">getAge :: <span class="keyword">Person</span> -&gt; Int</span><br><span class="line">getAge (<span class="keyword">Person</span> _ a _) = a</span><br></pre></td></tr></table></figure></li>
<li>the type constructor and data constructor are both named Person.</li>
</ul>
<h3 id="Algebraic-data-types-in-general"><a href="#Algebraic-data-types-in-general" class="headerlink" title="Algebraic data types in general"></a>Algebraic data types in general</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">data AlgDataType = Co<span class="symbol">nstr1</span> Type<span class="number">11</span> Type<span class="number">12</span></span><br><span class="line">                 | Co<span class="symbol">nstr2</span> Type<span class="number">21</span></span><br><span class="line">                 | Co<span class="symbol">nstr3</span> Type<span class="number">31</span> Type<span class="number">32</span> Type<span class="number">33</span></span><br><span class="line">                 | Co<span class="symbol">nstr4</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>This specifies that a value of type AlgDataType can be constructed in one of four ways.</p>
</li>
<li><p>type and data constructor names must always start with a capital letter; variables (including names of functions) must always start with a lowercase letter.</p>
</li>
</ul>
<h3 id="Pattern-matching"><a href="#Pattern-matching" class="headerlink" title="Pattern-matching"></a>Pattern-matching</h3><p>We could write something like<br><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">foo <span class="comment">(Constr1 a b)</span>   = ...</span><br><span class="line">foo <span class="comment">(Constr2 a)</span>     = ...</span><br><span class="line">foo <span class="comment">(Constr3 a b c)</span> = ...</span><br><span class="line">foo Co<span class="symbol">nstr4</span>         = ...</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>parentheses are required around patterns consisting of more than just a single constructor.</p>
</li>
<li><p>An underscore _ can be used as a “wildcard pattern” which matches anything.</p>
</li>
<li><p>A pattern of the form x@pat can be used to match a value against the pattern pat, but also give the name x to the entire value being matched. For example:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">baz </span>:: Person -&gt; String</span><br><span class="line"><span class="keyword">baz </span>p@(Person n _ _) = <span class="string">&quot;The name field of (&quot;</span> ++ <span class="keyword">show </span>p ++ <span class="string">&quot;) is &quot;</span> ++ n</span><br><span class="line"></span><br><span class="line">*Main&gt; <span class="keyword">baz </span><span class="keyword">brent</span></span><br><span class="line"><span class="keyword">&quot;The </span>name field of (Person \<span class="string">&quot;Brent\&quot; 31 SealingWax) is Brent&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>字符串用++连接</p>
</li>
<li><p>Patterns can be nested. For example:</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">checkFav <span class="symbol">:</span><span class="symbol">:</span> Person -&gt; String</span><br><span class="line">checkFav (Person <span class="built_in">n</span> _ SealingWax) = <span class="built_in">n</span> ++ <span class="string">&quot;, you&#x27;re my kind of person!&quot;</span></span><br><span class="line">checkFav (Person <span class="built_in">n</span> _ _)          = <span class="built_in">n</span> ++ <span class="string">&quot;, your favorite thing is lame.&quot;</span></span><br><span class="line"></span><br><span class="line">*Main&gt; checkFav brent</span><br><span class="line"><span class="string">&quot;Brent, you&#x27;re my kind of person!&quot;</span></span><br><span class="line">*Main&gt; checkFav stan</span><br><span class="line"><span class="string">&quot;Stan, your favorite thing is lame.&quot;</span></span><br></pre></td></tr></table></figure>
<p>In general, the following grammar defines what can be used as a pattern:</p>
</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">pat ::= _</span><br><span class="line">     |  <span class="keyword">var</span></span><br><span class="line">     |  <span class="keyword">var</span> @ ( pat )</span><br><span class="line">     |  ( <span class="function"><span class="keyword">Constructor</span> <span class="title">pat1</span> <span class="title">pat2</span> ... <span class="title">patn</span> )</span></span><br></pre></td></tr></table></figure>
<h3 id="Case-expressions"><a href="#Case-expressions" class="headerlink" title="Case expressions"></a>Case expressions</h3><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">case <span class="built_in">exp</span> of</span><br><span class="line">  <span class="function"><span class="title">pat1</span> -&gt;</span> exp1</span><br><span class="line">  <span class="function"><span class="title">pat2</span> -&gt;</span> exp2</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>like this:<br><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">ex03 = <span class="keyword">case</span> <span class="string">&quot;Hello&quot;</span> <span class="keyword">of</span></span><br><span class="line">           []      -&gt; <span class="number">3</span></span><br><span class="line">           <span class="function"><span class="params">(<span class="string">&#x27;H&#x27;</span>:s)</span> -&gt;</span> length s</span><br><span class="line">           _       -&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Recursive-data-types"><a href="#Recursive-data-types" class="headerlink" title="Recursive data types"></a>Recursive data types</h3><ul>
<li>A list is either empty, or a single element followed by a remaining list.</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> IntList = Empty | Cons <span class="built_in">Int</span> IntList</span><br></pre></td></tr></table></figure>
<ul>
<li>Use recursive functions to process recursive data types.<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>ListProd :: IntList -&gt; Int</span><br><span class="line"><span class="built_in">int</span>ListProd Empty      = <span class="number">1</span></span><br><span class="line"><span class="built_in">int</span>ListProd (Cons x l) = x * <span class="built_in">int</span>ListProd l</span><br></pre></td></tr></table></figure></li>
<li>we can define a type of binary trees with an Int value stored at each internal node, and a Char stored at each leaf:<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">data Tree = Leaf Char</span><br><span class="line">          | <span class="keyword">Node</span> <span class="title">Tree</span> Int Tree</span><br><span class="line">  deriving Show</span><br></pre></td></tr></table></figure>
<h2 id="Haskell-Prelude-function"><a href="#Haskell-Prelude-function" class="headerlink" title="Haskell Prelude function"></a>Haskell Prelude function</h2></li>
</ul>
<h3 id="乘方函数"><a href="#乘方函数" class="headerlink" title="乘方函数"></a>乘方函数</h3><ul>
<li>^ 的底数可为小数，也可为整数，指数是正整数；</li>
<li>^^ 的底数是小数，指数是任意整数；</li>
<li>** 的底数和指数都是小数)</li>
</ul>
<h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><ul>
<li>signum 取符号 <code>signum (-3) == -1</code></li>
<li>negate 相反数 <code>negate (-1) == 1</code></li>
<li>abs 绝对值 </li>
<li>recip 倒数</li>
<li>floor 向下取整</li>
<li>ceiling 向上取整</li>
<li>round 四舍五入</li>
<li>truncate 取整</li>
<li>exp e的次幂</li>
<li>subtract 减去 <code>subtract 3 5 == 2</code></li>
<li>gcd lcm</li>
<li>sqrt</li>
<li>max min</li>
<li>compare 比较 <code>compare 3 5 == LT</code> <code>compare 5 3 == GT</code> <code>compare 5 5 == EQ</code></li>
</ul>
<h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><ul>
<li>pi</li>
<li>sin cos</li>
<li>tan </li>
<li>asin acos</li>
<li>atan atan2</li>
<li>sinh cosh tanh asinh acosh atanh</li>
</ul>
<h3 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h3><ul>
<li>log     exp为底</li>
<li>logBase <code>logBase 10 10 == 1.0</code></li>
</ul>
<h3 id="判断奇偶"><a href="#判断奇偶" class="headerlink" title="判断奇偶"></a>判断奇偶</h3><ul>
<li>odd even</li>
</ul>
<h3 id="pair函数"><a href="#pair函数" class="headerlink" title="pair函数"></a>pair函数</h3><ul>
<li>fst snd</li>
</ul>
<h3 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h3><ul>
<li>(!!) 获取列表第几个元素 <code>[0,1,2,3] !! 1 == 1</code></li>
<li>lookup <code>lookup 2 [(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]== &#39;b&#39;</code> 获取列表中第一个元素为2的元组中第二个元素</li>
<li>elem notElem 判断元素是否在列表中 <code>elem 2 [1,2,3] == True</code></li>
<li>null 判断列表是否为空 <code>null [] == True</code></li>
<li>and or 用于Bool列表 <code>and [False,True,True] == False</code></li>
<li>all any 判断列表是否所有(存在)元素满足条件 <code>all even [2,3,4] == False</code></li>
<li>(++) 列表连接</li>
<li>length 求列表长度</li>
<li>head 列表第一个元素</li>
<li>tail 取列表除了第一个元素的所有元素</li>
<li>last 取列表最后一个元素</li>
<li>init 取列表除最后一个元素</li>
<li>reverse 列表反转</li>
<li>cycle 反复出现列表</li>
<li>repeat 反复出现某一值</li>
<li>replicate 重复出现某一值一定次数 <code>replicate 3 1 == [1,1,1]</code></li>
<li>take <code>take 2 [1, 2, 3, 4] == [1,2]</code> 取列表前两个元素</li>
<li>drop <code>drop 2 [1, 2, 3, 4] == [3,4]</code> 去除列表前两个元素</li>
<li>splitAt <code>splitAt 1 [1,2,3,4] == ([1],[2,3,4])</code>分割列表</li>
<li>takeWhile <code>takeWhile even [2, 4, 5] == [2,4]</code> <code>takeWhile odd [2, 4, 5] == []</code> 获取满足某一条件的前几个元素</li>
<li>dropWhile <code>dropWhile odd [2, 4, 5] == [5]</code> <code>dropWhile odd [2, 4, 5] == [2,4,5]</code>丢弃满足某一条件的前几个元素</li>
<li>span <code>span even [2, 4, 5] == ([2,4],[5])</code> 分割列表，规则同 takeWhile</li>
<li>break <code>break odd [2, 4, 5] == ([2,4],[5])</code>分割列表，规则同 dropWhile</li>
<li>maximum 列表最大元素</li>
<li>minimum</li>
<li>sum</li>
<li>product 列表元素乘积</li>
<li>enumFrom <code>enumFrom 2 == [2,3,4,...]</code></li>
<li>enumFromThen <code>enumFromThen 5 3 == [5,3,1,-1,...]</code></li>
<li>enumFromThenTo <code>enumFromThenTo 5 3 1 == [5,3,1]</code></li>
<li>enumFromTo <code>enumFromTo 3 5 == [3,4,5]</code> <code>enumFromTo 3 1 == []</code></li>
<li>show <code>show [2,3] == &quot;[2,3]&quot;</code> <code>show &quot;2&quot; == &quot;\&quot;2\&quot;&quot;</code></li>
<li>read <code>read &quot;233&quot;::Int == 233</code> <code>read &quot;12&quot;::Double == 12.0</code></li>
<li>iterate creates an infinite list where the first item is calculated by applying the function on the second argument, the second item by applying the function on the previous result and so on.<br><code>take 4 (iterate (2*) 1) == [1,2,4,8]</code> <code>take 4 (iterate (\x -&gt; (x+3)*2) 1) == [1,8,22,50]</code></li>
<li>until applies a function which is passed as the second argument to the third argument and it comapares the result with the condition, if the condition evaluates to True, it prints the result, if not, it passes the result to the finction and repeats the cycle as long as the condition is matched<br><code>until (&gt; 100) (*2) 1 == 128</code> <code>until odd (</code>div<code>2) 400 == 25</code></li>
<li>zip <code>zip [1, 2] [4, 5] = [(1,4),(2,5)]</code></li>
<li>zip3 <code>zip3 [1, 2] [4, 5] [7, 8] = [(1,4,7),(2,5,8)]</code></li>
<li>zipWith <code>zipWith (+) [1, 2, 3] [4, 5, 6] = [5,7,9]</code></li>
<li>zipWith3 <code>zipWith3 (\x y z -&gt; x + y + z) [1, 2, 3] [4, 5, 6] [7, 8, 9] == [12,15,18]</code></li>
<li>unzip <code>unzip [(1, 4), (2, 5), (3, 6)] == ([1,2,3],[4,5,6])</code></li>
<li>unzip3 <code>unzip3 [(1, 4, 7), (2, 5, 8), (3, 6, 9)] == ([1,2,3],[4,5,6],[7,8,9])</code></li>
</ul>
<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><ul>
<li>lines 分割行 <code>lines &quot;abc\n123\ndef\n&quot; == [&quot;abc&quot;,&quot;123&quot;,&quot;def&quot;]</code></li>
<li>words 分割单词 <code>words &quot;abc\n123 def\t&quot; == [&quot;abc&quot;,&quot;123&quot;,&quot;def&quot;]</code></li>
<li>unlines 合并行 <code>unlines [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] == &quot;a\nb\nc\n&quot;</code></li>
<li>unwords 合并单词 <code>unwords [&quot;a&quot;,&quot;b&quot;] == &quot;a b&quot;</code></li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>(.) 函数复合 (f.g) x == f(g x)</li>
<li>($) apply 函数，通常是为了省写括号<br><code>(map Char.toUpper . filter Char.isLower) &quot;ABCdef&quot; == &quot;DEF&quot;</code><br><code>map Char.toUpper . filter Char.isLower $ &quot;ABCdef&quot; == &quot;DEF&quot;</code></li>
</ul>
<h2 id="Recursion-patterns-polymorphism-and-the-Prelude"><a href="#Recursion-patterns-polymorphism-and-the-Prelude" class="headerlink" title="Recursion patterns, polymorphism, and the Prelude"></a>Recursion patterns, polymorphism, and the Prelude</h2><h3 id="Recursion-patterns"><a href="#Recursion-patterns" class="headerlink" title="Recursion patterns"></a>Recursion patterns</h3><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="attr">ls</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">addOne <span class="attr">x</span> = x+<span class="number">1</span></span><br><span class="line"><span class="built_in">map</span> addOne ls</span><br></pre></td></tr></table></figure>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>When we want to keep only some elements of a list, and throw others away, based on a test.</p>
<h4 id="Fold"><a href="#Fold" class="headerlink" title="Fold"></a>Fold</h4><p>“summarize” the elements of the list</p>
<h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><h4 id="Polymorphic-data-types"><a href="#Polymorphic-data-types" class="headerlink" title="Polymorphic data types"></a>Polymorphic data types</h4><p>First, let’s see how to declare a polymorphic data type.<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">List</span> t = <span class="type">E</span> | <span class="type">C</span> t (<span class="type">List</span> <span class="title">t</span>)</span></span><br></pre></td></tr></table></figure><br>非泛型<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">IntList</span> = <span class="type">Empty</span> | <span class="type">Cons</span> <span class="type">Int</span> <span class="type">IntList</span></span></span><br><span class="line">  <span class="keyword">deriving</span> <span class="type">Show</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>We have data List t = … The t is a type variable which can stand for any type. </li>
<li>data List t = … means that the List type is parameterized by a type, in much the same way that a function can be parameterized by some input.<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">lst1</span> <span class="operator">::</span> <span class="built_in">List</span> <span class="variable">Int</span></span><br><span class="line"><span class="variable">lst1</span> <span class="operator">=</span> <span class="built_in">C</span> <span class="number">3</span> <span class="punctuation">(</span><span class="built_in">C</span> <span class="number">5</span> <span class="punctuation">(</span><span class="built_in">C</span> <span class="number">2</span> <span class="built_in">E</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">lst2</span> <span class="operator">::</span> <span class="built_in">List</span> <span class="variable">Char</span></span><br><span class="line"><span class="variable">lst2</span> <span class="operator">=</span> <span class="built_in">C</span> <span class="operator">&#x27;</span><span class="variable">x</span><span class="operator">&#x27;</span> <span class="punctuation">(</span><span class="built_in">C</span> <span class="operator">&#x27;</span><span class="variable">y</span><span class="operator">&#x27;</span> <span class="punctuation">(</span><span class="built_in">C</span> <span class="operator">&#x27;</span><span class="variable">z</span><span class="operator">&#x27;</span> <span class="built_in">E</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">lst3</span> <span class="operator">::</span> <span class="built_in">List</span> <span class="variable">Bool</span></span><br><span class="line"><span class="variable">lst3</span> <span class="operator">=</span> <span class="built_in">C</span> <span class="built_in">True</span> <span class="punctuation">(</span><span class="built_in">C</span> <span class="built_in">False</span> <span class="built_in">E</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>
<h4 id="Polymorphic-functions"><a href="#Polymorphic-functions" class="headerlink" title="Polymorphic functions"></a>Polymorphic functions</h4><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">filterList</span> :: (t -&gt; <span class="type">Bool</span>) -&gt; <span class="type">List</span> t -&gt; <span class="type">List</span> t    </span><br><span class="line"><span class="title">filterList</span> _ <span class="type">E</span> = <span class="type">E</span></span><br><span class="line"><span class="title">filterList</span> p (<span class="type">C</span> x xs)</span><br><span class="line">  | p x       = <span class="type">C</span> x (filterList p xs)</span><br><span class="line">  | otherwise = filterList p xs</span><br></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">mapList</span> :: (a -&gt; b) -&gt; <span class="type">List</span> a -&gt; <span class="type">List</span> b</span><br><span class="line"><span class="title">mapList</span> _ <span class="type">E</span>        = <span class="type">E</span></span><br><span class="line"><span class="title">mapList</span> f (<span class="type">C</span> x xs) = <span class="type">C</span> (f x) (mapList f xs)</span><br></pre></td></tr></table></figure>
<h3 id="The-Prelude"><a href="#The-Prelude" class="headerlink" title="The Prelude"></a>The Prelude</h3></li>
</ul>
<h4 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h4><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Maybe</span> a = <span class="type">Nothing</span> | <span class="type">Just</span> a</span></span><br></pre></td></tr></table></figure>
<ul>
<li>A value of type Maybe a either contains a value of type a (wrapped in the Just constructor), or it is Nothing (representing some sort of failure or error). The Data.Maybe module has functions for working with Maybe values.</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">maybe</span> <span class="literal">False</span> <span class="string">odd</span> <span class="string">(Just</span> <span class="number">3</span><span class="string">)</span> <span class="string">==</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h4 id="Total-and-partial-functions"><a href="#Total-and-partial-functions" class="headerlink" title="Total and partial functions"></a>Total and partial functions</h4><ul>
<li>Functions which have certain inputs that will make them recurse infinitely are also called partial.</li>
<li>Functions which are well-defined on all possible inputs are known as total functions.</li>
<li>head is what is known as a partial function: there are certain inputs for which head will crash.</li>
<li>tail, init, last, and (!!) are partial functions<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">head</span>(<span class="selector-attr">[]</span>)</span><br><span class="line">*** <span class="selector-tag">Exception</span>: <span class="selector-tag">Prelude</span><span class="selector-class">.head</span>: <span class="selector-tag">empty</span> <span class="selector-tag">list</span></span><br></pre></td></tr></table></figure>
<h4 id="Replacing-partial-functions"><a href="#Replacing-partial-functions" class="headerlink" title="Replacing partial functions"></a>Replacing partial functions</h4>Replace<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">doStuff1 :: [<span class="built_in">Int</span>] -&gt; <span class="built_in">Int</span></span><br><span class="line">doStuff1 []  = <span class="number">0</span></span><br><span class="line">doStuff1 [_] = <span class="number">0</span></span><br><span class="line">doStuff1 xs  = head xs + (head (tail xs)) </span><br></pre></td></tr></table></figure>
as<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">doStuff2 :<span class="type"></span>: [<span class="keyword">Int</span>] -&gt; <span class="keyword">Int</span></span><br><span class="line">doStuff2 []        = <span class="number">0</span></span><br><span class="line">doStuff2 [<span class="literal">_</span>]       = <span class="number">0</span></span><br><span class="line">doStuff2 (x1:<span class="type">x2</span>:<span class="literal">_</span>) = x1 + x2</span><br></pre></td></tr></table></figure>
<h3 id="Writing-partial-functions"><a href="#Writing-partial-functions" class="headerlink" title="Writing partial functions"></a>Writing partial functions</h3></li>
</ul>
<p>What if you find yourself writing a partial functions?</p>
<h4 id="Change-the-output-type-of-the-function-to-indicate-the-possible-failure"><a href="#Change-the-output-type-of-the-function-to-indicate-the-possible-failure" class="headerlink" title="Change the output type of the function to indicate the possible failure."></a>Change the output type of the function to indicate the possible failure.</h4><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Maybe</span> a = <span class="type">Nothing</span> | <span class="type">Just</span> a</span></span><br></pre></td></tr></table></figure>
<p>We could rewrite <code>head</code> safely like this<br><figure class="highlight mizar"><table><tr><td class="code"><pre><span class="line">safeHead <span class="comment">:: [a] -&gt; Maybe a</span></span><br><span class="line">safeHead []    = Nothing</span><br><span class="line">safeHead (x:_) = Just x</span><br></pre></td></tr></table></figure></p>
<h4 id="if-some-condition-is-really-guaranteed-then-the-types-ought-to-reflect-the-guarantee-Then-the-compiler-can-enforce-your-guarantees-for-you"><a href="#if-some-condition-is-really-guaranteed-then-the-types-ought-to-reflect-the-guarantee-Then-the-compiler-can-enforce-your-guarantees-for-you" class="headerlink" title="if some condition is really guaranteed, then the types ought to reflect the guarantee! Then the compiler can enforce your guarantees for you."></a>if some condition is really guaranteed, then the types ought to reflect the guarantee! Then the compiler can enforce your guarantees for you.</h4><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">data NonEmptyList <span class="keyword">a</span> = NEL <span class="keyword">a</span> [<span class="keyword">a</span>]</span><br><span class="line"></span><br><span class="line">nelToList :: NonEmptyList <span class="keyword">a</span> -&gt; [<span class="keyword">a</span>]</span><br><span class="line">nelToList (NEL x xs) = x:xs</span><br><span class="line"></span><br><span class="line">listToNel :: [<span class="keyword">a</span>] -&gt; Maybe (NonEmptyList <span class="keyword">a</span>)</span><br><span class="line">listToNel []     = Nothing</span><br><span class="line">listToNel (x:xs) = Just $ NEL x xs</span><br><span class="line"></span><br><span class="line">headNEL :: NonEmptyList <span class="keyword">a</span> -&gt; <span class="keyword">a</span></span><br><span class="line">headNEL (NEL <span class="keyword">a</span> _) = <span class="keyword">a</span></span><br><span class="line"></span><br><span class="line">tailNEL :: NonEmptyList <span class="keyword">a</span> -&gt; [<span class="keyword">a</span>]</span><br><span class="line">tailNEL (NEL _ <span class="keyword">as</span>) = <span class="keyword">as</span></span><br></pre></td></tr></table></figure>
<h2 id="Higher-order-programming-and-type-inference"><a href="#Higher-order-programming-and-type-inference" class="headerlink" title="Higher-order programming and type inference"></a>Higher-order programming and type inference</h2><h3 id="Anonymous-functions"><a href="#Anonymous-functions" class="headerlink" title="Anonymous functions"></a>Anonymous functions</h3><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">gt100</span> :: <span class="type">Integer</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">gt100</span> x = x &gt; <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="title">greaterThan100</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">greaterThan100</span> xs = filter gt100 xs</span><br></pre></td></tr></table></figure>
<p>anonymous function:<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">greaterThan100_2</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">greaterThan100_2</span> xs = filter (\x -&gt; x &gt; <span class="number">100</span>) xs</span><br></pre></td></tr></table></figure></p>
<ul>
<li>\x -&gt; x &gt; 100 (the backslash is supposed to look kind of like a lambda with the short leg missing) is the function which takes a single argument x and outputs whether x is greater than 100.</li>
<li>lambda abstractions can also have multiple arguments.<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">(\<span class="symbol">x</span> <span class="symbol">y</span> z -&gt; [<span class="symbol">x</span>,<span class="number">2</span>*<span class="symbol">y</span>,<span class="number">3</span>*z]) <span class="number">5</span> <span class="number">6</span> <span class="number">3</span> == [<span class="number">5</span>,<span class="number">12</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure></li>
<li>if ? is an operator, then (?y) is equivalent to the function \x -&gt; x ? y, and (y?) is equivalent to \x -&gt; y ? x.<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">(&gt;100)</span> <span class="number">102</span> <span class="string">==</span> <span class="literal">True</span></span><br><span class="line"><span class="string">(100&gt;)</span> <span class="number">102</span> <span class="string">==</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<code>(- 1) 2</code>不可行？ </li>
</ul>
<h3 id="Function-composition"><a href="#Function-composition" class="headerlink" title="Function composition"></a>Function composition</h3><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">foo</span> :: (b -&gt;</span> <span class="function"><span class="title">c</span>) -&gt;</span> (<span class="function"><span class="title">a</span> -&gt;</span> <span class="function"><span class="title">b</span>) -&gt;</span> (<span class="function"><span class="title">a</span> -&gt;</span> c)</span><br><span class="line"><span class="function"><span class="title">foo</span> f g = \x -&gt;</span> f (g x)</span><br></pre></td></tr></table></figure>
<ul>
<li>foo is really called (.), and represents function composition. That is, if f and g are functions, then f . g is the function which does first g and then f.</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">myTest :: [<span class="type">Integer</span>] -&gt; <span class="type">Bool</span></span><br><span class="line">myTest xs = even (length (greaterThan100 xs))</span><br></pre></td></tr></table></figure>
<p>We can rewrite this as:<br><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">myTest :: [Integer] -&gt; <span class="built_in">Bool</span></span><br><span class="line">myTest xs = even.length.greaterThan100 xs</span><br></pre></td></tr></table></figure><br><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">Prelude&gt; :t (.)</span><br><span class="line">(.) :: (<span class="function"><span class="title">b</span> -&gt;</span> <span class="function"><span class="title">c</span>) -&gt;</span> (<span class="function"><span class="title">a</span> -&gt;</span> <span class="function"><span class="title">b</span>) -&gt;</span> <span class="function"><span class="title">a</span> -&gt;</span> c</span><br></pre></td></tr></table></figure></p>
<h3 id="Currying-and-partial-application"><a href="#Currying-and-partial-application" class="headerlink" title="Currying and partial application"></a>Currying and partial application</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">f :: <span class="built_in">Int</span> -&gt; <span class="built_in">Int</span> -&gt; <span class="built_in">Int</span></span><br><span class="line">f x y = <span class="number">2</span>*x + y</span><br></pre></td></tr></table></figure>
<p>equivalently write f’s type like this:<br><figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">f&#x27; :: <span class="type">Int</span> -&gt; (<span class="type">Int</span> -&gt; <span class="type">Int</span>)</span><br><span class="line">f&#x27; x y = <span class="number">2</span>*x + y</span><br></pre></td></tr></table></figure></p>
<ul>
<li>representing multi-argument functions as one-argument functions returning functions</li>
<li>If we want to actually represent a function of two arguments we can use a single argument which is a tuple.<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">f<span class="string">&#x27;&#x27;</span> :: (<span class="built_in">Int</span>,<span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span></span><br><span class="line">f<span class="string">&#x27;&#x27;</span> (x,y) = <span class="number">2</span>*x + y</span><br></pre></td></tr></table></figure></li>
<li>In order to convert between the two representations of a two-argument function, the standard library defines functions called curry and uncurry, defined like this<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">sch</span>önfinkel :: ((a,b) -&gt;</span> <span class="function"><span class="title">c</span>) -&gt;</span> <span class="function"><span class="title">a</span> -&gt;</span> <span class="function"><span class="title">b</span> -&gt;</span> c</span><br><span class="line">schönfinkel f x y = f (x,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">unsch</span>önfinkel :: (a -&gt;</span> <span class="function"><span class="title">b</span> -&gt;</span> <span class="function"><span class="title">c</span>) -&gt;</span> (<span class="function"><span class="title">a</span>,b) -&gt;</span> c</span><br><span class="line">unschönfinkel f (x,y) = f x y</span><br></pre></td></tr></table></figure></li>
<li><p>uncurry in particular can be useful when you have a pair and want to apply a function to it. For example:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Prelude</span>&gt; uncurry (+) (<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="attribute">5</span></span><br></pre></td></tr></table></figure>
<h4 id="Partial-application"><a href="#Partial-application" class="headerlink" title="Partial application"></a>Partial application</h4></li>
<li><p>In Haskell there are no functions of multiple arguments! </p>
</li>
<li>Every function can be “partially applied” to its first (and only) argument, resulting in a function of the remaining arguments.</li>
<li>Haskell doesn’t make it easy to partially apply to an argument other than the first. </li>
<li>he one exception is infix operators, which as we’ve seen, can be partially applied to either of their two arguments using an operator section. </li>
</ul>
<h4 id="Wholemeal-programming"><a href="#Wholemeal-programming" class="headerlink" title="Wholemeal programming"></a>Wholemeal programming</h4><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">foobar :: [Integer] -&gt; Integer</span><br><span class="line">foobar []     = <span class="number">0</span></span><br><span class="line">foobar (x:xs)</span><br><span class="line">  | <span class="type">x</span> &gt; <span class="number">3</span>     = (<span class="number">7</span>*x + <span class="number">2</span>) + foobar xs</span><br><span class="line">  | <span class="type">otherwise</span> = foobar xs</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">fooba<span class="string">r&#x27; :: [Integer] -&gt; Integer</span></span><br><span class="line"><span class="string">foobar&#x27;</span> = sum . map (\x -&gt; <span class="number">7</span>*x + <span class="number">2</span>) . filter (&gt;<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Folds"><a href="#Folds" class="headerlink" title="Folds"></a>Folds</h3><p>We have one more recursion pattern on lists to talk about: folds.<br>all of them somehow “combine” the elements of the list into a final answer.</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sum&#x27;</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sum&#x27;</span> []     = <span class="number">0</span></span><br><span class="line"><span class="title">sum&#x27;</span> (x:xs) = x + sum&#x27; xs</span><br><span class="line"></span><br><span class="line"><span class="title">product&#x27;</span> :: [<span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">product&#x27;</span> [] = <span class="number">1</span></span><br><span class="line"><span class="title">product&#x27;</span> (x:xs) = x * product&#x27; xs</span><br><span class="line"></span><br><span class="line"><span class="title">length&#x27;</span> :: [a] -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">length&#x27;</span> []     = <span class="number">0</span></span><br><span class="line"><span class="title">length&#x27;</span> (_:xs) = <span class="number">1</span> + length&#x27; xs</span><br></pre></td></tr></table></figure>
<p>define higher-order functions:</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fold</span> :: b -&gt; (a -&gt; b -&gt; b) -&gt; [a] -&gt; b</span><br><span class="line"><span class="title">fold</span> z f []     = z</span><br><span class="line"><span class="title">fold</span> z f (x:xs) = f x (fold z f xs)</span><br></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fold</span> f z [a,b,c] == a `f` (b `f` (c `f` z))</span><br></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sum&#x27;&#x27;</span>     = fold <span class="number">0</span> (+)</span><br><span class="line"><span class="title">product&#x27;&#x27;</span> = fold <span class="number">1</span> (*)</span><br><span class="line"><span class="title">length&#x27;&#x27;</span>  = fold <span class="number">0</span> (\_ s -&gt; <span class="number">1</span> + s)</span><br><span class="line"></span><br><span class="line">(<span class="type">Instead</span> <span class="keyword">of</span> (\_ s -&gt; <span class="number">1</span> + s) we could also write (\_ -&gt; (<span class="number">1</span>+)) or even (const (<span class="number">1</span>+)).)</span><br></pre></td></tr></table></figure>
<ul>
<li>fold is already provided in the standard Prelude, under the name foldr<br>Here are some Prelude functions which are defined in terms of foldr:</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">length</span> :: [a] -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">sum</span> :: <span class="type">Num</span> a =&gt; [a] -&gt; a</span><br><span class="line"><span class="title">product</span> :: <span class="type">Num</span> a =&gt; [a] -&gt; a</span><br><span class="line"><span class="title">and</span> :: [<span class="type">Bool</span>] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">or</span> :: [<span class="type">Bool</span>] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">any</span> :: (a -&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">all</span> :: (a -&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure>
<ul>
<li>There is also foldl, which folds “from the left”. </li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foldr</span> f z [a,b,c] == a `f` (b `f` (c `f` z))</span><br><span class="line"><span class="title">foldl</span> f z [a,b,c] == ((z `f` a) `f` b) `f` c</span><br></pre></td></tr></table></figure>
<ul>
<li>you should use foldl’ from Data.List instead, which does the same thing as foldl but is more efficient.</li>
</ul>
<h2 id="More-polymorphism-and-type-classes"><a href="#More-polymorphism-and-type-classes" class="headerlink" title="More polymorphism and type classes"></a>More polymorphism and type classes</h2><h3 id="Parametricity"><a href="#Parametricity" class="headerlink" title="Parametricity"></a>Parametricity</h3><figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">f :: a -&gt; a -&gt; a</span><br><span class="line">f <span class="symbol">x</span> <span class="symbol">y</span> = <span class="symbol">x</span> &amp;&amp; <span class="symbol">y</span></span><br></pre></td></tr></table></figure>
<p>The reason this doesn’t work is that the caller of a polymorphic function gets to choose the type. Here we, the implementors, have tried to choose a specific type (namely, Bool), but we may be given String, or Int, or even some type defined by someone using f, which we can’t possibly know about in advance. In other words, you can read the type<br><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">a</span> -&gt;</span> <span class="function"><span class="title">a</span> -&gt;</span> a</span><br></pre></td></tr></table></figure><br>as a promise that a function with this type will work no matter what type the caller chooses.</p>
<h3 id="Two-views-on-parametricity"><a href="#Two-views-on-parametricity" class="headerlink" title="Two views on parametricity"></a>Two views on parametricity</h3><figure class="highlight mizar"><table><tr><td class="code"><pre><span class="line">(==) <span class="comment">:: Eq a   =&gt; a -&gt; a -&gt; Bool</span></span><br><span class="line">(&lt;)  <span class="comment">:: Ord a  =&gt; a -&gt; a -&gt; Bool</span></span><br><span class="line">show <span class="comment">:: Show a =&gt; a -&gt; String</span></span><br></pre></td></tr></table></figure>
<h3 id="Type-classes"><a href="#Type-classes" class="headerlink" title="Type classes"></a>Type classes</h3><ul>
<li>Num, Eq, Ord, and Show are type classes, and we say that (==), (&lt;), and (+) are “type-class polymorphic”.</li>
<li>Intuitively, type classes correspond to sets of types which have certain operations defined for them, and type class polymorphic functions work only for types which are instances of the type class(es) in question.<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">class Eq a <span class="keyword">where</span></span><br><span class="line">  (==) :: <span class="function"><span class="title">a</span> -&gt;</span> <span class="function"><span class="title">a</span> -&gt;</span> Bool</span><br><span class="line">  (/=) :: <span class="function"><span class="title">a</span> -&gt;</span> <span class="function"><span class="title">a</span> -&gt;</span> Bool</span><br></pre></td></tr></table></figure></li>
<li>Eq is declared to be a type class with a single parameter, a.</li>
<li>Any type a which wants to be an instance of Eq must define two functions, (==) and (/=), with the indicated type signatures.</li>
</ul>
<figure class="highlight mizar"><table><tr><td class="code"><pre><span class="line">(==) <span class="comment">:: Eq a =&gt; a -&gt; a -&gt; Bool</span></span><br></pre></td></tr></table></figure>
<ul>
<li>The Eq a that comes before the =&gt; is a type class constraint.</li>
<li>We can read this as saying that for any type a, as long as a is an instance of Eq, (==) can take two values of type a and return a Bool.</li>
<li>Let’s make our own type and declare an instance of Eq for it. <figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">data Foo = F Int | G Char</span><br><span class="line"></span><br><span class="line">instance Eq Foo where</span><br><span class="line">  (F i1) == (F i2) = i1 == i2</span><br><span class="line">  (G c1) == (G c2) = c1 == c2</span><br><span class="line">  _ == _ = False</span><br><span class="line"></span><br><span class="line">  foo1 /= foo2 =<span class="built_in"> not </span>(foo1 == foo2)</span><br></pre></td></tr></table></figure></li>
<li><p>the Eq class is actually declared like this:</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">class Eq a where</span><br><span class="line">  (==), (/=) :: a -&gt; a -&gt; Bool</span><br><span class="line">  <span class="symbol">x</span> == <span class="symbol">y</span> = <span class="keyword">not</span> (<span class="symbol">x</span> /= <span class="symbol">y</span>)</span><br><span class="line">  <span class="symbol">x</span> /= <span class="symbol">y</span> = <span class="keyword">not</span> (<span class="symbol">x</span> == <span class="symbol">y</span>)</span><br></pre></td></tr></table></figure>
<p>This means that when we make an instance of Eq, we can define either (==) or (/=), whichever is more convenient; </p>
</li>
<li><p>As it turns out, Eq (along with a few other standard type classes) is special: GHC is able to automatically generate instances of Eq for us. Like so:</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Foo&#x27;</span> = <span class="type">F&#x27;</span> <span class="type">Int</span> | <span class="type">G&#x27;</span> <span class="type">Char</span></span></span><br><span class="line">  <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>)</span><br></pre></td></tr></table></figure>
<p>This tells GHC to automatically derive instances of the Eq, Ord, and Show type classes for our data type Foo.</p>
</li>
</ul>
<h4 id="Type-classes-and-Java-interfaces"><a href="#Type-classes-and-Java-interfaces" class="headerlink" title="Type classes and Java interfaces"></a>Type classes and Java interfaces</h4><ul>
<li>Both define a set of types/classes which implement a specified list of operations.</li>
</ul>
<ol>
<li>When a Java class is defined, any interfaces it implements must be declared. Type class instances, on the other hand, are declared separately from the declaration of the corresponding types, and can even be put in a separate module.</li>
<li>The types that can be specified for type class methods are more general and flexible than the signatures that can be given for Java interface methods, especially when multi-parameter type classes enter the picture. For example, consider a hypothetical type class<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Blerg a b <span class="keyword">where</span></span><br><span class="line">  blerg :: a -&gt; b -&gt; <span class="built_in">Bool</span></span><br></pre></td></tr></table></figure>
Using blerg amounts to doing multiple dispatch: which implementation of blerg the compiler should choose depends on both the types a and b. There is no easy way to do this in Java.<br>Haskell type classes can also easily handle binary (or ternary, or …) methods, as in<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Num</span> a <span class="keyword">where</span></span></span><br><span class="line">  (+) :: a -&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
There is no nice way to do this in Java: for one thing, one of the two arguments would have to be the “privileged” one which is actually getting the (+) method invoked on it, and this asymmetry is awkward. Furthermore, because of Java’s subtyping, getting two arguments of a certain interface type does not guarantee that they are actually the same type, which makes implementing binary operators such as (+) awkward (usually requiring some runtime type checks).</li>
</ol>
<h4 id="Standard-type-classes"><a href="#Standard-type-classes" class="headerlink" title="Standard type classes"></a>Standard type classes</h4><ul>
<li>Ord is for types whose elements can be totally ordered, that is, where any two elements can be compared to see which is less than the other. It provides comparison operations like (&lt;) and (&lt;=), and also the compare function.</li>
<li>Num is for “numeric” types, which support things like addition, subtraction, and multipication. One very important thing to note is that integer literals are actually type class polymorphic:<figure class="highlight mizar"><table><tr><td class="code"><pre><span class="line">Prelude&gt; :t 5</span><br><span class="line">5 <span class="comment">:: Num a =&gt; a</span></span><br></pre></td></tr></table></figure>
This means that literals like 5 can be used as Ints, Integers, Doubles, or any other type which is an instance of Num (Rational, Complex Double, or even a type you define…)</li>
<li>Show defines the method show, which is used to convert values into Strings.</li>
<li>Read is the dual of Show.</li>
<li>Integral represents whole number types such as Int and Integer.</li>
</ul>
<h4 id="A-type-class-example"><a href="#A-type-class-example" class="headerlink" title="A type class example"></a>A type class example</h4><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Listable a <span class="keyword">where</span></span><br><span class="line">  toList :: a -&gt; [<span class="built_in">Int</span>]</span><br></pre></td></tr></table></figure>
<p>We can think of Listable as the class of things which can be converted to a list of Ints. Look at the type of toList:<br><figure class="highlight mizar"><table><tr><td class="code"><pre><span class="line">toList <span class="comment">:: Listable a =&gt; a -&gt; [Int]</span></span><br></pre></td></tr></table></figure><br>First, an Int can be converted to an [Int] just by creating a singleton list, and Bool can be converted similarly, say, by translating True to 1 and False to 0:<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Listable</span> <span class="type">Int</span> <span class="keyword">where</span></span></span><br><span class="line">  <span class="comment">-- toList :: Int -&gt; [Int]</span></span><br><span class="line">  toList x = [x]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Listable</span> <span class="type">Bool</span> <span class="keyword">where</span></span></span><br><span class="line">  toList <span class="type">True</span>  = [<span class="number">1</span>]</span><br><span class="line">  toList <span class="type">False</span> = [<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br>We don’t need to do any work to convert a list of Int to a list of Int:<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Listable</span> [<span class="type">Int</span>] <span class="keyword">where</span></span></span><br><span class="line">    toList = id</span><br></pre></td></tr></table></figure><br>Finally, here’s a binary tree type which we can convert to a list by flattening:<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">Empty</span> | <span class="type">Node</span> a (<span class="type">Tree</span> <span class="title">a</span>) (<span class="type">Tree</span> <span class="title">a</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Listable</span> (<span class="type">Tree</span> <span class="type">Int</span>) <span class="keyword">where</span></span></span><br><span class="line">    toList <span class="type">Node</span>(x,l,r) = toList l ++ [x] ++ toList r</span><br></pre></td></tr></table></figure><br>If we implement other functions in terms of toList, they also get a Listable constraint.<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sumL</span> x = sum (toList x)</span><br></pre></td></tr></table></figure><br>ghci informs us that type type of sumL is<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sumL</span> :: <span class="type">Listable</span> a =&gt; a -&gt; <span class="type">Int</span></span><br></pre></td></tr></table></figure><br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> x y = sum (toList x) == sum (toList y) || x &lt; y</span><br></pre></td></tr></table></figure><br>type foo:<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span> :: (<span class="type">Listable</span> a,<span class="type">Ord</span> a) =&gt; a -&gt; a -&gt; <span class="type">Bool</span></span><br></pre></td></tr></table></figure><br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Listable</span> <span class="title">a</span>, <span class="type">Listable</span> <span class="title">b</span>) =&gt; <span class="type">Listable</span> (<span class="title">a</span>,<span class="title">b</span>) <span class="keyword">where</span></span></span><br><span class="line">  toList (x,y) = toList x ++ toList y</span><br></pre></td></tr></table></figure><br>Notice how we can put type class constraints on an instance as well as on a function type. This says that a pair type (a,b) is an instance of Listable as long as a and b both are. Then we get to use toList on values of types a and b in our definition of toList for a pair. Note that this definition is not recursive! The version of toList that we are defining is calling other versions of toList, not itself.</p>
<h2 id="Lazy-evaluation"><a href="#Lazy-evaluation" class="headerlink" title="Lazy evaluation"></a>Lazy evaluation</h2><h3 id="Strict-evaluation"><a href="#Strict-evaluation" class="headerlink" title="Strict evaluation"></a>Strict evaluation</h3><ul>
<li>Under a strict evaluation strategy, function arguments are completely evaluated before passing them to the function.</li>
<li>The benefit of strict evaluation is that it is easy to predict when and in what order things will happen. </li>
</ul>
<h3 id="Side-effects-and-purity"><a href="#Side-effects-and-purity" class="headerlink" title="Side effects and purity"></a>Side effects and purity</h3><h3 id="Lazy-evaluation-1"><a href="#Lazy-evaluation-1" class="headerlink" title="Lazy evaluation"></a>Lazy evaluation</h3><ul>
<li>Under a lazy evaluation strategy, evaluation of function arguments is delayed as long as possible: they are not evaluated until it actually becomes necessary to do so. </li>
<li>When some expression is given as an argument to a function, it is simply packaged up as an unevaluated expression (called a “thunk”, don’t ask me why) without doing any actual work.<h3 id="Pattern-matching-drives-evaluation"><a href="#Pattern-matching-drives-evaluation" class="headerlink" title="Pattern matching drives evaluation"></a>Pattern matching drives evaluation</h3></li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">f1</span> :: <span class="type">Maybe</span> a -&gt; [<span class="type">Maybe</span> a]</span><br><span class="line"><span class="title">f1</span> m = [m,m]</span><br><span class="line"></span><br><span class="line"><span class="title">f2</span> :: <span class="type">Maybe</span> a -&gt; [a]</span><br><span class="line"><span class="title">f2</span> <span class="type">Nothing</span>  = []</span><br><span class="line"><span class="title">f2</span> (<span class="type">Just</span> x) = [x]</span><br></pre></td></tr></table></figure>
<ul>
<li>f1 uses its argument m, it does not need to know anything about it. m can remain completely unevaluated, and the unevaluated expression is simply put in a list. </li>
<li>f2, on the other hand, needs to know something about its argument in order to proceed: was it constructed with Nothing or Just.</li>
<li>The other important thing to note is that thunks are evaluated only enough to allow a pattern match to proceed, and no further!</li>
<li>suppose we wanted to evaluate f2 (safeHead [3^500, 49]). f2 would force evaluation of the call to safeHead [3^500, 49], which would evaluate to Just (3^500)—note that the 3^500 is not evaluated</li>
</ul>
<p><code>Expressions are only evaluated when pattern-matched</code></p>
<p><code>…only as far as necessary for the match to proceed, and no farther!</code></p>
<h3 id="Consequences"><a href="#Consequences" class="headerlink" title="Consequences"></a>Consequences</h3><h4 id="Purity"><a href="#Purity" class="headerlink" title="Purity"></a>Purity</h4><h4 id="Understanding-space-usage"><a href="#Understanding-space-usage" class="headerlink" title="Understanding space usage"></a>Understanding space usage</h4><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">-- Standard library function foldl, provided <span class="keyword">for</span> reference</span><br><span class="line"><span class="function"><span class="title">foldl</span> :: (b -&gt;</span> <span class="function"><span class="title">a</span> -&gt;</span> <span class="function"><span class="title">b</span>) -&gt;</span> <span class="function"><span class="title">b</span> -&gt;</span> [<span class="function"><span class="title">a</span>] -&gt;</span> b</span><br><span class="line">foldl _ z []     = z</span><br><span class="line">foldl f z (x:xs) = foldl f (f z x) xs</span><br></pre></td></tr></table></figure>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">  foldl (+) 0 [1,2,3]</span></span><br><span class="line"><span class="section">= foldl (+) (0+1) [2,3]</span></span><br><span class="line"><span class="section">= foldl (+) ((0+1)+2) [3]</span></span><br><span class="line"><span class="section">= foldl (+) (((0+1)+2)+3) []</span></span><br><span class="line"><span class="section">= (((0+1)+2)+3)</span></span><br><span class="line"><span class="section">= ((1+2)+3)</span></span><br><span class="line"><span class="section">= (3+3)</span></span><br><span class="line"><span class="section">= 6</span></span><br></pre></td></tr></table></figure>
<p>Since the value of the accumulator is not demanded until recursing through the entire list, the accumulator simply builds up a big unevaluated expression (((0+1)+2)+3), which finally gets reduced to a value at the end.</p>
<ul>
<li>One is that it’s simply inefficient: there’s no point in transferring all the numbers from the list into a different list-like thing (the accumulator thunk) before actually adding them up. </li>
<li>The second problem is more subtle, and more insidious: evaluating the expression (((0+1)+2)+3) actually requires pushing the 3 and 2 onto a stack before being able to compute 0+1 and then unwinding the stack, adding along the way.<br>for very long lists it’s a big problem: there is usually not as much space available for the stack, so this can lead to a stack overflow.</li>
<li>The solution in this case is to use the foldl’ function instead of foldl, which adds a bit of strictness<h4 id="Short-circuiting-operators"><a href="#Short-circuiting-operators" class="headerlink" title="Short-circuiting operators"></a>Short-circuiting operators</h4><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">(&amp;&amp;) :: <span class="built_in">Bool</span> -&gt; <span class="built_in">Bool</span> -&gt; <span class="built_in">Bool</span></span><br><span class="line"><span class="literal">True</span>  &amp;&amp; x = x</span><br><span class="line"><span class="literal">False</span> &amp;&amp; _ = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h4 id="User-defined-control-structures"><a href="#User-defined-control-structures" class="headerlink" title="User-defined control structures"></a>User-defined control structures</h4>In Haskell, however, we can define if as a library function!<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">if&#x27; :: <span class="type">Bool</span> -&gt; a -&gt; a -&gt; a</span><br><span class="line">if&#x27; <span class="type">True</span>  x _ = x</span><br><span class="line">if&#x27; <span class="type">False</span> _ y = y</span><br></pre></td></tr></table></figure>
<h4 id="Infinite-data-structures"><a href="#Infinite-data-structures" class="headerlink" title="Infinite data structures"></a>Infinite data structures</h4><h4 id="Pipelining-wholemeal-programming"><a href="#Pipelining-wholemeal-programming" class="headerlink" title="Pipelining/wholemeal programming"></a>Pipelining/wholemeal programming</h4></li>
</ul>
<h4 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h4><p>Using lazy evaluation we can get the Haskell runtime to work out the proper order of evaluation for us! For example, here is some Haskell code to solve the 0-1 knapsack problem.<br><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Array</span><br><span class="line"></span><br><span class="line"><span class="title">knapsack01</span> :: [<span class="type">Double</span>]   <span class="comment">-- values </span></span><br><span class="line">           -&gt; [<span class="type">Integer</span>]  <span class="comment">-- nonnegative weights</span></span><br><span class="line">           -&gt; <span class="type">Integer</span>    <span class="comment">-- knapsack size</span></span><br><span class="line">           -&gt; <span class="type">Double</span>     <span class="comment">-- max possible value</span></span><br><span class="line"><span class="title">knapsack01</span> vs ws maxW = m!(numItems<span class="number">-1</span>, maxW)</span><br><span class="line">  <span class="keyword">where</span> numItems = length vs</span><br><span class="line">        m = array ((<span class="number">-1</span>,<span class="number">0</span>), (numItems<span class="number">-1</span>, maxW)) $</span><br><span class="line">              [((<span class="number">-1</span>,w), <span class="number">0</span>) | w &lt;- [<span class="number">0</span> .. maxW]] ++</span><br><span class="line">              [((i,<span class="number">0</span>), <span class="number">0</span>) | i &lt;- [<span class="number">0</span> .. numItems<span class="number">-1</span>]] ++</span><br><span class="line">              [((i,w), best) </span><br><span class="line">                  | i &lt;- [<span class="number">0</span> .. numItems<span class="number">-1</span>]</span><br><span class="line">                  , w &lt;- [<span class="number">1</span> .. maxW]</span><br><span class="line">                  , <span class="keyword">let</span> best</span><br><span class="line">                          | ws!!i &gt; w  = m!(i<span class="number">-1</span>, w)</span><br><span class="line">                          | otherwise = max (m!(i<span class="number">-1</span>, w)) </span><br><span class="line">                                            (m!(i<span class="number">-1</span>, w - ws!!i) + vs!!i)</span><br><span class="line">              ]</span><br><span class="line"></span><br><span class="line"><span class="title">example</span> = knapsack01 [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>] [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>] <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言的一些记录</title>
    <url>/2020/08/21/C%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li>指针类型大小都为8</li>
<li>文件指针不关闭会导致内存泄漏<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">valgrind <span class="attribute">--leak-check</span>=full <span class="attribute">--show-reachable</span>=<span class="literal">yes</span> <span class="attribute">--trace-children</span>=<span class="literal">yes</span>   ./test</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">==<span class="number">333</span>== Memcheck, a memory error detector</span><br><span class="line">==333== Copyright (C) 2002-2017, and GNU GPL&#x27;d, by Julian Seward et al.</span><br><span class="line">==<span class="number">333</span>== Using Valgrind<span class="number">-3.15</span><span class="number">.0</span> <span class="keyword">and</span> LibVEX; rerun with -h <span class="keyword">for</span> copyright info</span><br><span class="line">==<span class="number">333</span>== Command: ./test</span><br><span class="line">==<span class="number">333</span>==</span><br><span class="line">==<span class="number">333</span>== error calling PR_SET_PTRACER, vgdb might block</span><br><span class="line">==<span class="number">333</span>==</span><br><span class="line">==<span class="number">333</span>== HEAP SUMMARY:</span><br><span class="line">==<span class="number">333</span>==     in use at <span class="built_in">exit</span>: <span class="number">472</span> bytes in <span class="number">1</span> blocks</span><br><span class="line">==<span class="number">333</span>==   total heap usage: <span class="number">1</span> allocs, <span class="number">0</span> frees, <span class="number">472</span> bytes allocated</span><br><span class="line">==<span class="number">333</span>==</span><br><span class="line">==<span class="number">333</span>== <span class="number">472</span> bytes in <span class="number">1</span> blocks are still reachable in loss record <span class="number">1</span> of <span class="number">1</span></span><br><span class="line">==<span class="number">333</span>==    at <span class="number">0x483B7F3</span>: <span class="built_in">malloc</span> (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)</span><br><span class="line">==<span class="number">333</span>==    by <span class="number">0x48E0AAD</span>: __fopen_internal (iofopen.c:<span class="number">65</span>)</span><br><span class="line">==<span class="number">333</span>==    by <span class="number">0x48E0AAD</span>: fopen@@GLIBC_2<span class="number">.2</span><span class="number">.5</span> (iofopen.c:<span class="number">86</span>)</span><br><span class="line">==<span class="number">333</span>==</span><br><span class="line">==<span class="number">333</span>== LEAK SUMMARY:</span><br><span class="line">==<span class="number">333</span>==    definitely lost: <span class="number">0</span> bytes in <span class="number">0</span> blocks</span><br><span class="line">==<span class="number">333</span>==    indirectly lost: <span class="number">0</span> bytes in <span class="number">0</span> blocks</span><br><span class="line">==<span class="number">333</span>==      possibly lost: <span class="number">0</span> bytes in <span class="number">0</span> blocks</span><br><span class="line">==<span class="number">333</span>==    still reachable: <span class="number">472</span> bytes in <span class="number">1</span> blocks</span><br><span class="line">==<span class="number">333</span>==         suppressed: <span class="number">0</span> bytes in <span class="number">0</span> blocks</span><br><span class="line">==<span class="number">333</span>==</span><br><span class="line">==<span class="number">333</span>== For lists of detected <span class="keyword">and</span> suppressed errors, rerun with: -s</span><br><span class="line">==<span class="number">333</span>== ERROR SUMMARY: <span class="number">0</span> errors from <span class="number">0</span> contexts (suppressed: <span class="number">0</span> from <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="C语言判断文件是否存在"><a href="#C语言判断文件是否存在" class="headerlink" title="C语言判断文件是否存在"></a>C语言判断文件是否存在</h3>access函数判断文件夹或者文件是否存在<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">int</span> mode)</span></span>;</span><br><span class="line"></span><br><span class="line">filename：可以填写文件夹路径或者文件路径</span><br><span class="line"></span><br><span class="line">mode：<span class="number">0</span> （F_OK） 只判断是否存在</span><br><span class="line">      <span class="number">2</span> （R_OK） 判断写入权限</span><br><span class="line">      <span class="number">4</span> （W_OK） 判断读取权限</span><br><span class="line">      <span class="number">6</span> （X_OK） 判断执行权限</span><br></pre></td></tr></table></figure>
用于判断文件夹是否存在的时候，mode取0，判断文件是否存在的时候，mode可以取0、2、4、6。 若存在或者具有权限，返回值为0；<br>不存在或者无权限，返回值为-1。<br>fopen函数判断文件是否存在</li>
</ul>
<p>函数原型：FILE <em>fopen (char </em>filename, char *type);</p>
<p>filename：文件路径</p>
<p>type：打开文件的方式（有r、w、r+、w+、a、rb、wb等等）</p>
<p>用于判断文件是否存在可以使用 r 或者 rb ，因为使用其它方式的话，可能会自动建立文件。 返回值为NULL（打不开）和正数（能打开）。</p>
<h3 id="unlink函数"><a href="#unlink函数" class="headerlink" title="unlink函数"></a>unlink函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unlink</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(unlink(<span class="string">&quot;test.txt&quot;</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;unlink errpr!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>结构体定义在<code>xx.c</code>文件，其他文件通过<code>#include &quot;xx.h&quot;</code>使用该结构体会报错：不允许使用不完整类型<br>只能把结构体定义在.h文件里面</p>
</li>
<li><p>把数据内容type a存入char数组s<br>memcpy(s,&amp;a,sizeof(type))</p>
</li>
<li><p>不能对宏定义的常量进行取地址操作</p>
</li>
</ul>
<h3 id="编译相关"><a href="#编译相关" class="headerlink" title="编译相关"></a>编译相关</h3><ul>
<li>gcc 生成文件跟在-o后面就行</li>
<li>编译含math库函数时，要加-lm</li>
</ul>
<h3 id="多进程相关"><a href="#多进程相关" class="headerlink" title="多进程相关"></a>多进程相关</h3><ul>
<li>创建n个进程<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">   pid = fork();</span><br><span class="line">   <span class="keyword">if</span>(pid == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>子进程会拷贝fork语句之前的内容</li>
<li>共享内存<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;  // for using shared memory</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size_bytes = length * <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">int</span> shmid = shmget(IPC_PRIVATE, size_bytes, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line"><span class="keyword">int</span> * arr = shmat(shmid, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li>
<li>信号<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//向进程pid发送信号</span></span><br><span class="line">kill(pid,SIGCONT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收信号并处理,handler 为处理函数，只带一个int参数，返回值为void</span></span><br><span class="line">signal(SIGCONT,handler);</span><br></pre></td></tr></table></figure></li>
<li>访问临界数据必须加互斥锁</li>
<li>指针 + 1产生的偏移量取决于指针类型</li>
<li>sizeof(size_t) == 8</li>
</ul>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>无关紧要</title>
    <url>/2020/08/16/%E6%9B%B2%E7%8E%87%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="58e3321f1d78afd9ee099f0e06d0ce3d15e09f8d1f028defc5f7ef557bfea515">666645beeeea5721aee53536f3794d0e1a8c34d021b46e3a6f759609fa473fee23d473092b4f639a8899ef2d9ce3a33a1a058d223205e6868160fa8a877e06325e41021cf321501d3ae3df667d4b9e245d93fa520feace262e468078e21c2e5895a43d227dd91b34ffc2b346c546c3dc285c263e0efb51540b85b141ae77324542d790217c7dd0d711e9cd281942a9592b77ae72ec9f0d672502eb7c5ee1e402bed686db033a310a1045c812f22e9cd5604fda80616c1ac9e27851389a494df492f51e588de565534b418db25e059b96bf1dd762430754c4130d8436851eb1e76b73f24248f6cf0c475b1f4e0e25367dbeee49d89ffbe409fffde26196479e9741b7e73c3464e1297ce883e9ea56f19bf23c8d634fcb9b36123fc425153c3dbf7f96fc0d036725c2a2703afd80e39c30783a7a40ebe1db68e4ed25cb68ce4754c6f1b96e17e2a7b7e627eb52592070029c3d1f58e3452568747012aedfdce1f29cfca1e590bb55624404e6442f0f79901762c1ea62309aff8b303e6ae0c81b8b5b29046ff884ec05163b3fbe78cc6ca3405eecd4fca072234cb1e47b1ae8d69094648f5100a3a6a242834daded0a82c113f768426cda499e99f90c0eb7495d9090bc27526a84cb9ec913d27414d4f266c4f25e81d4c5593b867df2250e25f5d716af56d6639651f0cbec9522bba0bd3709cbd861565894c32834e3c9b8fa4b0e7a6c05119246fca9f6ca1f85ba54a3aaac34d015487e6113776e6396f7942bcc6570f36ddba734d211d2e10f79404582838cf4af370e11da3d01508dfa28e6d942801d62ae102e744d5da3c693ec6a836d004ea01c5d6255d3d4cc439418fcd40cceaa212f2bbcca0b3b0b2e2f26c9e3b33f1d1bb30fe690963f147c4801b7dfc9340196b997dda61ed8bc0a1a01e4aa23370e8257d8d610dc1e6a63af588641b740d71acf6f320210bbdbf772145ad380a1840e775445bfe766eeea0952dd4736ac9d53b07a22037e3106a69fe44f4b164b957a2e989d61d6c37c3985714c723c0c0c02cd626e36161ba0af3e6ea80638216d3a145df59c95437006ca8df44815759ecd1ee28c1ad53ccffb06404ed8ed5a107cde2a41ef7c27d4e72bafb03f667b03d30a4bbc977d54dfd3281c77463ff82a981e91f65fc1d6cb9461ae398d20c06252a6a6570e6960dbf5ad7a3fdb0a0d31ab0d2ae77a8bef516f6c35cf5c0bc1e66e365d22701709fcf69b07f5a302e13610e45bdc30129f65dd011207e9ad1d3a3b224c8f0cf5f61b6e87b805d92b7e91f66306a78752510439c3702c2fe7a5e5255becd407c027a057cbdbd9c1d994be7ab117771565404a98696297f7f306a3050fabad5673182d242c3e79de6427f77f59d89daf0ba61e32ebfe6ac7c8ea7f130a6aafc4c39a460f64fe831a7391705f0d6b9c2db92d5a26f06fabea6474f5a9607a5e7a94f2f1f6432d7fe5250661a9220c1b0badeff9a9910ff314fe0b6c25ca6ddcf38850ca555cf49d824dc324e9ad0c11f69336840b20aa3882f204d69b21cbaef8c9d43b873cc4a279fe4baa3f0ff19688099c1a991b7637cc33511a0ff9da35dd808200daf34849ef9809f247256b88df09eadcfde67c555388491c03f229e4d3bdaac6e74f36f7313ded1f5338973bd38666e633f742475ee0dfcf509e24835662261b869306f3b3714340479ca86d50eb8177a94983557a66a6534b8bca890dd6a4616ba90819558a85236bba65a758b2b8c09fa92a8fb28ef03516fa657842c45c0c12689b8a1a42c8c78db75930be07a5340d254f424335fb059f7a765b2e89093faed26e9ff31c5a418e9b98b81dbbff6bf7c9fc642e65cc5ec6447ea12f4bfe3466245a2461be3b46905002655477c8da568a3b7a5f96defb0b7bc19114d9ee87a6af0f866a7535e6db948d89c75f656caf337963eb3d7571f0aee72b696f80c79f91015d2d8a03d0e78fadbbf2b336b9bf6e3bbd55f0998412a0886928ccdd9de7e4cb31c53db1fb21812df20e00ba24f447ac0fb715f292cd25c95148399d1f22ee8d5a70f81970af4fec99f9bbc6a2282cf9cf05fae62ac8282ff672a0b129210b3bc32c1ef2d5cd4db3e44948d59f88202b58826c8f4972903f3b31cdd0d9b805acc0641bad1c2fd4c6d95a2e4ae768115f5275cc2692db02cf8d3bdd1b9be78ced7c5a348ca2e307792079145c4cd961ec2b315d9e3f372d907dc6762c40b5ecac8cfd7b6a19a63ed145658339b5cd00901b1106ab6649228cf74cc15fc3072f6a92a7d76ac39fa3250f70d3053999cc8dfa6f7655f163325fb15b94203a4d6a46d61f259b9466dc6b34ed9fedbb07ec5711ba823f292b3d9e0c1385dfed00e978391f208e8b1cae1462d49784a91f851bc49059bf2616ff420875a0a245fe78869263ae5a5997c56a0bd9bae42389dff7725ccd054dc7a5c4cbed84a07be9a79918780eab21225cfdc8a519453b05875f7e770913188e08e2f6fa2d60ff8f9118139f202b8865e98103b69292a7d7ebd4f3cc6dba114f8f7a97abe7c76b97cac814fc0f9feb6c17d1f00cff91e36f7245090925bd50e844cce490c73a90dc13bcc8b4e931a1fe63c119d655abbb3fdfa89d30fbfe6429c240e84b9e058130e358c619838ac5bba59e470ab800e5046bd095f3667d4b2906e0a94666da55803f8608cb2d44ce9b30b541cf1bf9ad4414fd8cafc4ac613953cbbf1822370dd9b242e0c5d5ed349d32ccafb6f7aed51c2f78ba57948f334e839cd92be949f9919c1542207b0c3210b975b950d5a17cb3db985e1cfc7e86dd02c2443d185bef0bda4e9c209950fd8f54d53b6c03f68341b29e3c8b20c04c0e3bc7a8b0b71fc7de5355c1d895b87cbf7c644efa8bf5a3fcd67289414800f81eb87caca68b3f879add1d753a9ac4d9ac0a0e1c0b85373abbd2e04c9f2af2b3f958aa3c7a7b82236d3802da1c9eaf3df89828a58373a30d8441b971ca164337332b17410fd18c922f385d3a6f4435be234c71a9e07f82b48eff892ef00e3c4ed6037c4903cd432b47000b3718df3a2324f8bff241f49097f8ff66446eac26e41003f76313606851d89562f9666fbf0e157fdb6ecd8b3126737ae2923e</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Ubuntu</title>
    <url>/2020/08/11/%E5%85%B3%E4%BA%8EUbuntu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>关于Ubuntu使用的一些备忘。</p>
<a id="more"></a>
<h2 id="VM虚拟机与win10主机互相复制粘贴文件"><a href="#VM虚拟机与win10主机互相复制粘贴文件" class="headerlink" title="VM虚拟机与win10主机互相复制粘贴文件"></a>VM虚拟机与win10主机互相复制粘贴文件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> <span class="keyword">open</span>-vm-tools</span><br><span class="line">sudo apt <span class="keyword">install</span> <span class="keyword">open</span>-vm-tools-desktop</span><br></pre></td></tr></table></figure>
<h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><p>linux <a href="https://github.com/qingshuisiyuan/electron-ssr-backup">ssr</a></p>
<h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><p>压缩<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">zip</span> -r graphs.<span class="built_in">zip</span> graphs</span><br><span class="line"><span class="built_in">zip</span> -r <span class="number">123.</span><span class="built_in">zip</span> abc.cpp <span class="keyword">def</span>.txt</span><br></pre></td></tr></table></figure><br>解压<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">unzip</span> <span class="selector-tag">graphs</span><span class="selector-class">.zip</span></span><br></pre></td></tr></table></figure><br>tar命令</p>
<p>压缩<br><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -cvf <span class="number">123</span>.tar file<span class="number">1</span> file<span class="number">2</span> dir<span class="number">1</span></span><br></pre></td></tr></table></figure><br>解压</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -xvf file.tar</span><br><span class="line"><span class="attribute">tar</span> -zxvf apache-tomcat-<span class="number">7</span>.<span class="number">0</span>.<span class="number">75</span>.tar.gz </span><br></pre></td></tr></table></figure>
<h2 id="WSL-报错cannot-execute-binary-file-Exec-format"><a href="#WSL-报错cannot-execute-binary-file-Exec-format" class="headerlink" title="WSL 报错cannot execute binary file: Exec format"></a>WSL 报错cannot execute binary file: Exec format</h2><p>Bash On Windows(WSL)无法运行32Bit程序，报错cannot execute binary file: Exec format</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">sudo apt install qemu-user-static</span><br><span class="line">sudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic &#x27;<span class="symbol">\x</span>7fELF<span class="symbol">\x</span>01<span class="symbol">\x</span>01<span class="symbol">\x</span>01<span class="symbol">\x</span>03<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>03<span class="symbol">\x</span>00<span class="symbol">\x</span>03<span class="symbol">\x</span>00<span class="symbol">\x</span>01<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00&#x27; --mask &#x27;<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>fc<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>f8<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff&#x27;</span><br></pre></td></tr></table></figure>
<h1 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h1><p>子系统可以直接访问windows下的任何文件，这也是比虚拟机好用的关键点之一。在 /mnt 目录下就可以访问c、d、e、f等盘符，并且可以直接访问任何一个文件位置。</p>
<p>因为windows的盘符挂载到linux中的时候全部都用了 777 的权限，在一些软件开发上可能会出现一些问题。</p>
<ul>
<li>使用wsl的自动挂载功能，修改 /etc/wsl.conf 文件<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[automount]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">root = /mnt/</span><br><span class="line">options = <span class="string">&quot;metadata,dmask=022,fmask=133&quot;</span></span><br><span class="line">mountFsTab = <span class="literal">false</span></span><br></pre></td></tr></table></figure>
就可以将/mnt下的所有盘都挂载为linux下默认的权限。</li>
<li>windows wsl创建文件权限</li>
</ul>
<p>挂载问题是解决了,但是使用wsl命令打开的终端创建新的文件还是 777。</p>
<p>在/etc/profile或~/.profile或~/.bashrc最后添加一些逻辑。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">if [[ &quot;$(umask)&quot; == &#x27;000&#x27; ]]; then</span><br><span class="line">    umask <span class="number">022</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><br>这样在每次启动终端的时候就会重新设置umask, 之后创建文件就正常了。</p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>百度之星2020</title>
    <url>/2020/08/09/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我好菜呀，再一次被菜哭。。。<a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2020+%C4%EA%B0%D9%B6%C8%D6%AE%D0%C7%A1%A4%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&amp;source=1&amp;searchmode=source">百度之星2020复赛</a><br><a id="more"></a></p>
<h2 id="Binary-Addition"><a href="#Binary-Addition" class="headerlink" title="Binary Addition"></a>Binary Addition</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>你有两个无限长0101串$S$, $T$，分别记作$S<em>{0}S</em>{1}\cdots$…和$T<em>{0}T</em>{1}\cdots$<br>.其中$S$和$T$从$n$位之后都是0，也就是当$i \geq n$，有$S<em>{i}=T</em>{i}=0$<br>你可以对$S$串进行操作：<br>修改$S$串的某一位，从0变成1或者从1变成0。<br>将$S$当成二进制数加1，也就是记$s=\sum<em>{i\geq 0} S</em>{i}2^{i}$，将$S$变成$s+1$二进制表示的形式，其中低位在最前面。<br>问最少的步数将$S$变成$T$。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>答案必定是先将某一前缀修改为全1，然后再加上1，变成$0\cdots01$的形式，然后按位修改。<br><strong><em>注意最高位1的位置如果在原来$S$串中也是1，可以先将1变为0再变回1</em></strong>，找了一晚上bug==</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100010</span>],t[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t);</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    b[n]=<span class="number">0</span>;</span><br><span class="line">    b[n+<span class="number">1</span>] =<span class="number">0</span>;</span><br><span class="line">    s[n] = t[n] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        b[i] = b[i+<span class="number">1</span>]+(s[i]!=t[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span>  d = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;0&#x27;</span>)&#123; d++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(t[i] == <span class="string">&#x27;1&#x27;</span>)&#123; c++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i+<span class="number">1</span>]==<span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, d + c + b[i + <span class="number">2</span>] + (t[i + <span class="number">1</span>] != <span class="string">&#x27;1&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans,d+c+<span class="number">1</span>+b[i+<span class="number">2</span>]+(t[i+<span class="number">1</span>]!=<span class="string">&#x27;1&#x27;</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(d+c&gt;ans)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">signed</span> _;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">        work();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1110111</span></span><br><span class="line"><span class="comment">0000001</span></span><br><span class="line"><span class="comment">3?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="Battle-for-Wosneth"><a href="#Battle-for-Wosneth" class="headerlink" title="Battle for Wosneth"></a>Battle for Wosneth</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>你在打游戏的时候碰到了如下问题：<br>​有两个人记作Alice和Bob，Bob的生命值为$m$，Alice的生命值很高，所以可以认为是无限的。两个人的攻击命中率分别为$p\%,q\%$。两个人轮流攻击对方。从Alice开始攻击，每次攻击的时候，如果Alice命中，那么能让对方的生命值减低1，同时自己的生命值能恢复1，如果Bob命中，那么能让对方的生命值减低1，注意Bob不会自己回血。<br>直到Bob的血量变为0，游戏结束。Alice想知道，游戏结束的时候，自己期望生命值变化是多少，对998244353取模。<br>注意这里的变化量不是绝对值，也就是如果50%的概率加一，50%的概率减一，那么期望的变化量就是0。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>Alice在杀掉Bob之前，即成功击中Bob$m$次之前，失败次数服从帕斯卡分布，期望值$m \times (1-p)/p$。所以留给Bob进攻的次数期望值为$m\times (1-p)/p+m-1$，击中次数期望<br>$(m\times (1-p)/p+m-1)\times q$，因而Alice生命值期望变化量<br>$m - (m\times (1-p)/p+m-1)\times q$。</p>
<h3 id="关于帕斯卡分布"><a href="#关于帕斯卡分布" class="headerlink" title="关于帕斯卡分布"></a>关于帕斯卡分布</h3><p>$X \sim NB(k;p)$，则$P(X=r) = C<em>{k+r-1}^{k-1}p^{k}(1-p)^{r}$,$r$为失败次数。<br>期望：<br>$EX = \sum</em>{r}rP(X=r) $<br>$= \sum<em>{r}r\frac{(r+k-1)!}{(k-1)!r!}p^{k}(1-p)^{r} $<br>$= k\frac{1-p}{p} \sum</em>{r-1} \frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$<br>$= k\frac{1-p}{p}$.<br><strong><em>最后一步是由$\sum_{r-1} \frac{((r-1)+(k+1)-1)!}{(k-1)!r!}p^{k+1}(1-p)^{r-1}$是帕斯卡分布概率求和，故为1得到</em></strong></p>
<img src="/2020/08/09/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020/%E5%85%AC%E5%BC%8F1.png" class="">
<img src="/2020/08/09/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020/%E5%85%AC%E5%BC%8F2.png" class="">
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> si signed</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc(x) scanf(<span class="meta-string">&quot;%lld&quot;</span>,&amp;x);</span></span><br><span class="line"><span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans = (ans*x)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        x = (x*x)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,p,q;</span><br><span class="line">    sc(m)sc(p)sc(q)</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">int</span> in = qp(<span class="number">100</span>,mod<span class="number">-2</span>);</span><br><span class="line">    p = (p*in)%mod;</span><br><span class="line">    q = (q*in)%mod;</span><br><span class="line"></span><br><span class="line">    ans = (m-((m*(<span class="number">1</span>-p+mod)%mod*(qp(p,mod<span class="number">-2</span>))%mod)+m<span class="number">-1</span>)%mod*q%mod+mod)%mod;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    si _;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_--)&#123;</span><br><span class="line">        work();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>百度之星2018复赛</title>
    <url>/2020/08/08/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2018%E5%A4%8D%E8%B5%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>只会两道QAQ,第二题不会。<a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2018%A1%B0%B0%D9%B6%C8%D6%AE%D0%C7%A1%B1%B3%CC%D0%F2%C9%E8%BC%C6%B4%F3%C8%FC+-+%B8%B4%C8%FC&amp;source=1&amp;searchmode=source">2018百度之星复赛</a></p>
<a id="more"></a>
<h2 id="没有兄弟的舞会"><a href="#没有兄弟的舞会" class="headerlink" title="没有兄弟的舞会"></a>没有兄弟的舞会</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>度度熊、光羽、带劲三个人是好朋友。</p>
<p>度度熊有一棵$n$个点的有根树，其中1号点为树根。除根节点之外，每个点都有父节点，记i号点的父节点为$fa[i]$。</p>
<p>度度熊称点$i$和点$j$是<strong>兄弟</strong>（其中$i≠j$）当且仅当$fa[i]=fa[j]$。</p>
<p>第$i$个点的权值为$Ai$。现要求选出一个点集，该点集合法当且仅当<strong>点集中至多只有一对兄弟</strong>。</p>
<p>度度熊想知道，在所有可行的点集中，权值和<strong>最大</strong>以及<strong>最小</strong>的点集权值和分别是多少？</p>
<p>第一行一个数，表示数据组数$T$。</p>
<p>每组数据第一行一个整数$n$；第二行$n−1$个数，表示$fa[2],fa[3],..,fa[n]$；第三行$n$个数，表示$Ai$。</p>
<p>数据组数$T=100$，满足：</p>
<ul>
<li>$1 \leq n \leq 1e5$</li>
<li>$−1e9\leq Ai \leq 1e9$</li>
<li>$1 \leq fa[i]&lt;i$</li>
</ul>
<p>其中90%的数据满足$n \leq 1000$。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>维护每个父节点直接子节点权值的正最大值，正次大值，负最小值，负次小值。最大点集权值为所有正的最大值与最大的正次大值之和，最小点集权值为所有负最小值与最小的负次小值之和。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">//</span><br><span class="line">// <span class="symbol">Created</span> by liulex on <span class="number">2020</span>/<span class="number">7</span>/<span class="number">27.</span></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int fa[<span class="number">100005</span>];</span><br><span class="line">int <span class="symbol">A</span>[<span class="number">100005</span>];</span><br><span class="line">int <span class="symbol">B</span>[<span class="number">100005</span>];</span><br><span class="line">int <span class="symbol">C</span>[<span class="number">100005</span>];</span><br><span class="line">int <span class="symbol">D</span>[<span class="number">100005</span>];</span><br><span class="line">int v[<span class="number">100005</span>]; </span><br><span class="line">signed main()</span><br><span class="line">&#123;</span><br><span class="line">    int <span class="symbol">T</span>,n;</span><br><span class="line">    scanf(<span class="string">&quot;%d&quot;</span>,&amp;<span class="symbol">T</span>);</span><br><span class="line">    while(<span class="symbol">T</span>--)&#123;</span><br><span class="line">        scanf(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">        <span class="symbol">A</span>[<span class="number">0</span>] = <span class="symbol">B</span>[<span class="number">0</span>] = <span class="symbol">C</span>[<span class="number">0</span>] = <span class="symbol">D</span>[<span class="number">0</span>] = <span class="symbol">A</span>[<span class="number">1</span>] = <span class="symbol">B</span>[<span class="number">1</span>] = <span class="symbol">C</span>[<span class="number">1</span>] = <span class="symbol">D</span>[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        for(int i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            scanf(<span class="string">&quot;%d&quot;</span>,&amp;fa[i]);</span><br><span class="line">            <span class="symbol">A</span>[i] = <span class="symbol">B</span>[i] = <span class="symbol">C</span>[i] = <span class="symbol">D</span>[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            scanf(<span class="string">&quot;%d&quot;</span>,&amp;v[i]);</span><br><span class="line">            if(v[i] &gt; <span class="symbol">A</span>[fa[i]] &amp;&amp; v[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">               <span class="symbol">B</span>[fa[i]] = <span class="symbol">A</span>[fa[i]],<span class="symbol">A</span>[fa[i]] = v[i];</span><br><span class="line">            &#125;else if(v[i] &gt; <span class="symbol">B</span>[fa[i]] &amp;&amp; v[i] &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="symbol">B</span>[fa[i]] = v[i];</span><br><span class="line">            &#125;else if(v[i] &lt; <span class="symbol">C</span>[fa[i]] &amp;&amp;v[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="symbol">D</span>[fa[i]] = <span class="symbol">C</span>[fa[i]];</span><br><span class="line">                <span class="symbol">C</span>[fa[i]] = v[i];</span><br><span class="line">            &#125;else if(v[i] &lt; <span class="symbol">D</span>[fa[i]] &amp;&amp; v[i]  &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="symbol">D</span>[fa[i]] = v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        long long  ma = <span class="number">0</span>,mi = <span class="number">0</span>;</span><br><span class="line">        int c = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line">        for(int i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            ma += <span class="symbol">A</span>[i];</span><br><span class="line">            mi += <span class="symbol">C</span>[i];</span><br><span class="line">            c = max(c,<span class="symbol">B</span>[i]);</span><br><span class="line">            d = min(d,<span class="symbol">D</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ma+c&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;mi+d&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="带劲的and和"><a href="#带劲的and和" class="headerlink" title="带劲的and和"></a>带劲的and和</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>度度熊专门研究过“动态传递闭包问题”，他有一万种让大家爆蛋的方法；但此刻，他只想出一道简简单单的题——至繁，归于至简。</p>
<p>度度熊有一张$n$个点$m$条边的<strong>无向图</strong>，第$i$个点的点权为$vi$。</p>
<p>如果图上存在一条<strong>路径</strong>使得点$i$可以走到点$j$，则称$i$,$j$是<strong>带劲</strong>的，记$f(i,j)=1$；否则$f(i,j)=0$。显然有$f(i,j)=f(j,i)$。</p>
<p>度度熊想知道求出：<br>$\sum<em>{i=1}^{n-1}\sum</em>{j=i+1}^{n}f(i,j)×max(vi,vj)×(vi\&amp;vj)$</p>
<p>其中&amp;是C++中的and位运算符，如$1\&amp;3=1, 2\&amp;3=2$。</p>
<p>请将答案对$1e9+7$取模后输出。</p>
<p>第一行一个数，表示数据组数$T$。</p>
<p>每组数据第一行两个整数$n,m$；第二行$n$个数表示$vi$；接下来$m$行，每行两个数u,v，表示点u和点v之间有一条无向边。<strong>可能有重边或自环。</strong></p>
<p>数据组数$T=50$，满足：</p>
<ul>
<li>$1\leq n,m\leq 100000$</li>
<li>$1\leq vi\leq 1e9$。</li>
</ul>
<p>其中90%的数据满足$n,m\leq 1000$。</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>我们可以通过并查集维护任意两点连通关系。当$i,j$属于同一连通分支时，$f(i,j)=1$，我们把这一连通分支里所有顶点权值排序，从前往后遍历，不难发现对于每一个权值$vi$,<br>对答案都有$v<em>{i}\sum</em>{j=1}^{i-1}v<em>{i}\&amp;v</em>{j}$贡献。问题转换成了对这个求和$\sum<em>{j=1}^{i-1}v</em>{i}\&amp;v<em>{j}$的处理，直接考虑与运算对求和没有前缀性质。<br>需要用到二进制思想，维护权值的二进制每一位出现次数的前缀和，(第$k$位记为$A</em>{k}$)，对于当前权值$v<em>{i}$，如果它的二进制第$k$位为1,那么将对求和产生$A</em>{k}*(1&lt;&lt;k)$的贡献。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by liulex on 2020/7/27.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> si signed</span></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">100005</span>];</span><br><span class="line">si fa[<span class="number">100005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> A[<span class="number">33</span>];</span><br><span class="line"><span class="function">si <span class="title">find</span><span class="params">(si x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = (fa[x] == x?x:<span class="built_in">find</span>(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">si <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    si T,n,m,x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">30</span>;i++)A[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;v[i]);</span><br><span class="line">            fa[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x) != <span class="built_in">find</span>(y))&#123;</span><br><span class="line">                fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            G[<span class="built_in">find</span>(i)].push_back(v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>,t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(G[i].<span class="built_in">size</span>()&gt;<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">30</span>;j++)A[j] = <span class="number">0</span>;</span><br><span class="line">                sort(G[i].<span class="built_in">begin</span>(),G[i].<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;G[i].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                        t = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">30</span>; k++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((G[i][j] &gt;&gt; k) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                                t += (A[k] * (<span class="number">1l</span>l &lt;&lt; k)) % mod;</span><br><span class="line">                                t %= mod;</span><br><span class="line">                                A[k]++;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ans += (G[i][j]*t)%mod;</span><br><span class="line">                        ans %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(G[i].<span class="built_in">size</span>())</span><br><span class="line">            G[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>SVD</title>
    <url>/2020/08/06/SVD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一些结论"><a href="#一些结论" class="headerlink" title="一些结论"></a>一些结论</h2><hr>
<p>$rank(A) = rank(A^{T}A)$</p>
<p>只需说明$AX = 0$ 与 $A^{T}AX =0$同解.</p>
<p>若$X$满足$AX = 0$,显然有$A^{T}AX = 0$成立.</p>
<p>反之，若$A^{T}AX = 0$,左乘$X^{T}$,有$X^{T}A^{T}AX = 0$. </p>
<p>即$(AX)^{T}AX = 0$,令$Y=AX$,有$Y^{T}Y = 0$,$Y = AX = 0$.<br><a id="more"></a></p>
<hr>
<p>实矩阵$A_{m\times n}$, $A^{T}A$的特征值都为非负实数。</p>
<p>设$\lambda$ 为$A^{T}A$的复特征值，有$AX=\lambda X$</p>
<p>记$\overline{\lambda}$为$\lambda$的共轭，有</p>
<p>$A\overline{X} = \overline{A}\overline{X} = \overline{AX} = \overline{\lambda X} = \overline{\lambda} \overline{X} $.</p>
<p>从而</p>
<p>$\overline{X}^{T}AX = \overline{X}^{T} \lambda X = \lambda \overline{X}^{T} X$.</p>
<p>和</p>
<p>$\overline{X}^{T}AX = \overline{X}^{T}\overline{A}^{T}X = \overline{AX}^{T}X = (\overline{\lambda} \overline{X})^{T}X = \overline{\lambda} \overline{X}^{T}X $.</p>
<p>进而有$(\lambda - \overline{\lambda})\overline{X}^{T}X = 0$,</p>
<p>所以$\lambda - \overline{\lambda} = 0$，即$\lambda$为实数.</p>
<p>设$\lambda$为$A^{T}A$的特征值，有</p>
<p>$\left | AX \right |^{2} = X^{T}A^{T}AX = \lambda X^{T}X = \lambda \left \| X\right \|^{2}$.</p>
<p>所以$\lambda = \frac{\left \| AX\right \|^{2}}{\left \| X\right \|^{2}} \geq 0$.</p>
<hr>
<p>$A \in \mathbb{R}^{m\times n}$ 则$A$存在奇异值分解：</p>
<p>$A = U\Sigma V^{T}$,其中$U$是$m$阶正交矩阵,$V$是$n$阶正交矩阵,$\Sigma$是$m\times n$矩形对角矩阵,其对角线元素非负,且按降序排列.</p>
<p>证明: $A^{T}A$的特征值都为实数，因而存在有正交矩阵$V$，使得$V^{T}(A^{T}A)V = \Lambda$ 成立.</p>
<p>其中$\Lambda$为对角矩阵，对角线元素为$A^{T}A$的特征值,调整特征值的顺序，使其按降序排列，满足$\lambda<em>{1} \geq \lambda</em>{2} \geq \lambda<em>{3}\cdots \geq \lambda</em>{n} \geq 0$.</p>
<p>令 $V<em>{1} = \begin{bmatrix} \nu </em>{1} &amp; \nu<em>{2}  &amp; \cdots  &amp; \nu</em>{r} \end{bmatrix}$,$V<em>{2} = \begin{bmatrix} \nu </em>{r+1}  &amp; \cdots  &amp; \nu_{n} \end{bmatrix}$</p>
<p>其中$\nu<em>{1} \cdots \nu</em>{r}$为$A^{T}A$正特征值对应的特征向量，$\nu<em>{r+1} \cdots \nu</em>{n}$为$A^{T}A$零特征值的对应的特征向量.</p>
<p>$V = \begin{bmatrix} V<em>{1} &amp; V</em>{2} \end{bmatrix}$即为奇异值分解中的$V$.</p>
<p>记$\sigma<em>{i} = \sqrt\lambda</em>{i}$,令</p>
<p>$\Sigma <em>{1} = \begin{bmatrix} \sigma</em>{1} &amp;  &amp;  &amp;<br>\\ &amp;\sigma<em>{2}  &amp;  &amp;<br>\\  &amp;  &amp;\ddots   &amp;<br>\\  &amp;  &amp;  &amp; \sigma</em>{r} \end{bmatrix}$</p>
<p>于是$m\times n$对角矩阵可以表示为$\Sigma = \begin{bmatrix}\Sigma_{1} &amp; 0<br>\\ 0 &amp; 0 \end{bmatrix}$.</p>
<p>构造$U$,令$u<em>{j} = \frac{1}{\sigma</em>{j}}A\nu_{j}$,</p>
<p>$U<em>{1} = \begin{bmatrix} u</em>{1} &amp; u<em>{2} &amp; \cdots &amp; u</em>{r} \end{bmatrix}$,有$AV<em>{1} = U</em>{1}\Sigma_{1}$</p>
<p>$u<em>{i}^{T}u</em>{j} = (\frac{1}{\sigma<em>{i}}\nu</em>{i}^{T}A^{T})(\frac{1}{\sigma<em>{j}}A\nu</em>{j}) = \frac{1}{\sigma<em>{i}\sigma</em>{j}}\nu<em>{i}^{T}(A^{T}A\nu</em>{j}) = \frac{\sigma<em>{j}}{\sigma</em>{i}}\nu<em>{i}\nu</em>{j}$<br>所以$u<em>{1},u</em>{2},\cdots,u_{r}$构成一组标准正交基.</p>
<p>令$U<em>{2} = u</em>{r+1},\cdots,u<em>{n}$为$R(A)^{\perp }$的一组标准正交基,记$U = \begin{bmatrix} U</em>{1} &amp; U_{2} \end{bmatrix}$</p>
<p>$U\Sigma V^{T} = \begin{bmatrix}U<em>{1} &amp; U</em>{2} \end{bmatrix}\begin{bmatrix}\Sigma<em>{1} &amp; 0\\ 0 &amp; 0 \end{bmatrix}\begin{bmatrix}V</em>{1}^{T}\\<br>                 V<em>{2}^{T}\end{bmatrix}=U</em>{1}\Sigma<em>{1}V</em>{1}^{T} = AV<em>{1}V</em>{1}^{T} = A$.</p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM笔记</title>
    <url>/2020/08/05/jvm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/2020/08/05/jvm/jvmdata.png" class="">
<p>JVM 是 Java 的核心和基础，在 Java 编译器和 os 平台之间的虚拟处理器。它是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。<br><a id="more"></a></p>
<h2 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ol>
<li>当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。</li>
<li>线程私有，各线程之间程序计数器互不影响，每个线程都有一个独立的程序计数器。</li>
<li>当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。</li>
<li>该内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。</li>
</ol>
<h3 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h3><h4 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h4><ol>
<li>线程私有的，它的生命周期也与线程相同。</li>
<li>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。</li>
<li>对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。</li>
<li>栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。</li>
<li>在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。</li>
</ol>
<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。<br>如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。<br>在单线程的操作中,虚拟机抛出的都是 StackOverflowError 异常，在多线程环境下，则会抛出 OutOfMemoryError 异常。</p>
<h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><ol>
<li>一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配。</li>
<li>局部变量表的容量以变量槽（Slot）为最小单位。一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。double,long虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。<br>虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量。</li>
<li>在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，从一开始，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。</li>
<li>局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，当前字节码PC计数器的值超过某个变量的作用域时，该变量对应的 Slot 就可以交给其他变量使用。节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。</li>
</ol>
<h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><ol>
<li>操作数栈又称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位为 2。</li>
<li>当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）入栈和出栈。</li>
<li>Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。</li>
</ol>
<p>基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；<br>而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。</p>
<h4 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h4><ol>
<li>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。</li>
<li>Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。</li>
<li>这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。</li>
</ol>
<h4 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h4><ol>
<li>方法退出：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。</li>
<li>在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。</li>
<li>方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</li>
<li>方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。</li>
</ol>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>与虚拟机栈所发挥的作用类似，本地方法栈则为使用到的本地操作系统（Native）方法服务。</p>
<h3 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h3><ol>
<li>Java Heap 是 Java 虚拟机所管理的内存中最大的一块，所有线程共享的一块内存区域。</li>
<li>对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。</li>
<li>Java 堆可以处在物理不连续，逻辑连续的内存空间。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。</li>
</ol>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ol>
<li>所有线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等信息。方法区域被称为永久代。</li>
<li>不需要物理连续内存，可选择固定大小或可扩展，可以不实现垃圾回收，回收针对废弃常量、无用类。</li>
<li>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），运行时常量池用于存放编译器生成的各种字面量和符号引用。Java 语言并不要求常量一定只能在编译期产生，运行期间也可能将新的常量放入池中，如String 类的 intern（）方法。</li>
<li>方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</li>
</ol>
<h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><ol>
<li>在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。<br>操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。</li>
<li>内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，<br>内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。</li>
</ol>
<h3 id="引用定位方式"><a href="#引用定位方式" class="headerlink" title="引用定位方式"></a>引用定位方式</h3><h4 id="使用句柄池"><a href="#使用句柄池" class="headerlink" title="使用句柄池"></a>使用句柄池</h4><img src="/2020/08/05/jvm/javastack.png" class="">
<p>reference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改.</p>
<h4 id="直接使用指针"><a href="#直接使用指针" class="headerlink" title="直接使用指针"></a>直接使用指针</h4><img src="/2020/08/05/jvm/javastack1.png" class="">
<p>速度快，它节省了一次指针定位的时间开销。</p>
<h2 id="类初始化"><a href="#类初始化" class="headerlink" title="类初始化"></a>类初始化</h2><p>类初始化是类加载过程的最后一个阶段，到初始化阶段，才真正开始执行类中的 Java 程序代码。</p>
<h3 id="执行类初始化情形"><a href="#执行类初始化情形" class="headerlink" title="执行类初始化情形"></a>执行类初始化情形</h3><ol>
<li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。<br>生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时<br>（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。</li>
<li>使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。</li>
<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。</li>
</ol>
<p>虚拟机规定只有这四种情况才会触发类的初始化，称为对一个类进行主动引用，除此之外所有引用类的方式都不会触发其初始化，称为被动引用。</p>
<p>通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">33</span>;  </span><br><span class="line">    <span class="keyword">static</span>&#123;  </span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;父类被初始化&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="title">extends</span> <span class="title">Father</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">static</span>&#123;  </span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;子类被初始化&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span>&#123;</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;  </span><br><span class="line">        System.out.<span class="built_in">println</span>(Child.m);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">父类被初始化</span></span><br><span class="line"><span class="comment">    33</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br>常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化：<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Const</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> NAME = <span class="string">&quot;我是常量&quot;</span>;  </span><br><span class="line">    <span class="keyword">static</span>&#123;  </span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;初始化Const类&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span>&#123;</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;  </span><br><span class="line">        System.out.<span class="built_in">println</span>(Const.NAME);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">我是常量</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br>通过数组定义来引用类，不会触发类的初始化：<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Const</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">static</span>&#123;  </span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;初始化Const类&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span>&#123;</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;  </span><br><span class="line">        Const[] con = <span class="keyword">new</span> Const[<span class="number">5</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br>段代码里触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初始化。</p>
<h3 id="接口的初始化过程与类初始化过程的不同"><a href="#接口的初始化过程与类初始化过程的不同" class="headerlink" title="接口的初始化过程与类初始化过程的不同"></a>接口的初始化过程与类初始化过程的不同</h3><p>接口也有初始化过程，上面的代码中我们都是用静态语句块来输出初始化信息的，而在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。</p>
<p>当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。</p>
<p>调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。</p>
]]></content>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>前端杂项</title>
    <url>/2020/08/03/%E5%89%8D%E7%AB%AF%E6%9D%82%E9%A1%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/2020/08/03/%E5%89%8D%E7%AB%AF%E6%9D%82%E9%A1%B9/htm.jpg" class="">
<p>一些杂乱的东西。</p>
<a id="more"></a>
<h2 id="html-标签"><a href="#html-标签" class="headerlink" title="html 标签"></a>html 标签</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- 1级标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h6</span>&gt;</span> <span class="comment">&lt;!-- 2级标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>...<span class="tag">&lt;/<span class="name">i</span>&gt;</span>  <span class="comment">&lt;!-- 文字斜体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 段落标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>...<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="comment">&lt;!-- 文字加粗 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="comment">&lt;!-- 换行标记 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span> <span class="comment">&lt;!-- 水平线 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span> <span class="comment">&lt;!-- 空格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;images/1.png&quot;</span> <span class="attr">width</span> = <span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;images/1.png&quot;</span> <span class="attr">height</span> = <span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;https://www.baidu.com/s?cl=3&amp;tn=baidutop10&amp;fr=top1000&amp;wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&amp;rsv_idx=2&amp;rsv_dl=fyb_n_homepage&amp;hisfilter=1&quot;</span>&gt;</span></span><br><span class="line">                钟南山成为共和国勋章建议人选</span><br><span class="line">             <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;https://www.baidu.com/s?cl=3&amp;tn=baidutop10&amp;fr=top1000&amp;wd=%E9%92%9F%E5%8D%97%E5%B1%B1%E6%88%90%E4%B8%BA%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8B%8B%E7%AB%A0%E5%BB%BA%E8%AE%AE%E4%BA%BA%E9%80%89&amp;rsv_idx=2&amp;rsv_dl=fyb_n_homepage&amp;hisfilter=1&quot;</span>&gt;</span></span><br><span class="line">                钟南山成为共和国勋章建议人选</span><br><span class="line">             <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&quot;</span> <span class="attr">target</span> = <span class="string">&quot;_blank&quot;</span>&gt;</span>在新窗口打开链接 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span> = <span class="string">&quot;disc&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span> = <span class="string">&quot;circle&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span> = <span class="string">&quot;square&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> = <span class="string">&quot;1&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> = <span class="string">&quot;a&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> = <span class="string">&quot;A&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> = <span class="string">&quot;i&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span> = <span class="string">&quot;I&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;&quot;</span> <span class="attr">title</span> = <span class="string">&quot;鼠标划上去时的提示&quot;</span> <span class="attr">alt</span> = <span class="string">&quot;图片加载失败时的提示文字&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>给文字增加删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>把文字变成上标</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>...<span class="tag">&lt;/<span class="name">u</span>&gt;</span>给文字加下划线</span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>文字居中<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">表格</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">&quot;1px&quot;</span> <span class="attr">cellspacing</span> = <span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span> = <span class="string">&quot;200px&quot;</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">&quot;1px&quot;</span> <span class="attr">cellspacing</span> = <span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span> = <span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">行列合并</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span> = <span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span> = <span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span> 表头</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">colgroup</span> <span class="attr">span</span> = <span class="string">&quot;6&quot;</span> <span class="attr">width</span> = <span class="string">&quot;100px&quot;</span>&gt;</span>前六列设为一组，宽均为100px</span><br><span class="line"></span><br><span class="line">表单</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;&quot;</span>&gt;</span> <span class="comment">&lt;!-- action 表单信息提交地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span>&gt;</span> <span class="comment">&lt;!-- password,button,radio,checkbox,submit,reset,file --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;loginname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;password&quot;</span> <span class="attr">name</span> = <span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;提交&quot;</span>&gt;</span> <span class="comment">&lt;!-- value 按钮文字--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="post-get"><a href="#post-get" class="headerlink" title="post get"></a>post get</h2><p>提交数据:post<br>获取数据:get<br><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">&lt;form <span class="function"><span class="keyword">method</span> = &quot;<span class="title">post</span>&quot;/&quot;<span class="title">get</span>&quot;&gt;</span></span><br></pre></td></tr></table></figure><br>get请求发送的数据都会写在地址栏上，用户可见<br>post请求发送的数据用户不可见<br>post请求能发送大量数据，而get不能</p>
<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center; 文字居中方式</span><br><span class="line"><span class="attribute">background-color</span>:gray;</span><br><span class="line">&lt;span&gt;容器标签，包裹文本，不具有特殊功能&lt;/span&gt;</span><br><span class="line">&lt;div&gt;容器标签，可以包裹任何内容，也可以容器直接相互包裹&lt;/div&gt;</span><br><span class="line"><span class="attribute">color</span>: white;文字颜色</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">24px</span>;字体大小</span><br><span class="line"><span class="attribute">margin</span>:auto; 让容器本身水平居中</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">&quot;banner&quot;</span>&gt;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">80px</span>;行高</span><br><span class="line"><span class="attribute">height</span>:<span class="number">80px</span>; 高</span><br><span class="line"><span class="attribute">text-decoration</span>:none;去除超链接下划线</span><br><span class="line"><span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#808080</span>;设置边框</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span> <span class="number">15px</span>;变宽拉长</span><br><span class="line"><span class="attribute">border-right</span>:solid <span class="number">1px</span> <span class="number">#808080</span>;只保留右边框</span><br><span class="line"><span class="attribute">border-bottom</span>: dash <span class="number">1px</span> grey;虚下边框</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span>,img标签名 根据标签名称选择对应的所有标签</span><br><span class="line">    <span class="selector-id">#id</span> id选择器，同一个页面元素id不允许重复，因此id选择器只能选择单个元素</span><br><span class="line">    .class名 类别选择器 选择拥有该类别的多个元素</span><br><span class="line">    *通用选择器，选择所有标签</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="attribute">float</span>:left;容器浮动</span><br><span class="line"><span class="attribute">clear</span>:left/right/both表示该元素不受左右元素浮动影响</span><br><span class="line"><span class="attribute">overflow</span>:auto;让父元素自动适应子浮动元素大小</span><br><span class="line"><span class="attribute">margin-top</span>,margin-right,margin-bottom,margin-left</span><br><span class="line"><span class="attribute">padding</span>:内边距</span><br></pre></td></tr></table></figure>
<h2 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h2><p>行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通用选择器</p>
<h2 id="CSS文本属性"><a href="#CSS文本属性" class="headerlink" title="CSS文本属性"></a>CSS文本属性</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>:red;<span class="comment">/*文字颜色*/</span></span><br><span class="line"><span class="attribute">font-family</span>:<span class="string">&quot;华文中宋&quot;</span>;<span class="comment">/*字体类型*/</span></span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">26px</span>;<span class="comment">/*字体大小*/</span></span><br><span class="line"><span class="attribute">font-weight</span>:bold;<span class="comment">/*文字加粗*/</span></span><br><span class="line"><span class="attribute">font-style</span>:italic;<span class="comment">/*文字倾斜*/</span></span><br><span class="line"><span class="attribute">text-indent</span>:<span class="number">60px</span>;<span class="comment">/*首行缩进*/</span></span><br><span class="line"><span class="attribute">text-align</span>:center;<span class="comment">/*水平对齐方式*/</span></span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">100px</span>;<span class="comment">/*行高*/</span></span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">background-color</span>:gray;<span class="attribute">line-height</span>:<span class="number">100px</span>;<span class="comment">/*垂直居中*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>:underline;<span class="comment">/*文本修饰*/</span></span><br></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>：url();</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;<span class="comment">//不让背景图平铺</span></span><br><span class="line"><span class="attribute">background-position</span><span class="selector-pseudo">:right</span> <span class="attribute">bottom</span>;<span class="comment">//背景图位置</span></span><br></pre></td></tr></table></figure>
<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h3><p>变量必须以字母开头</p>
<p>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</p>
<p>变量名称对大小写敏感（y 和 Y 是不同的变量）</p>
<p>可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">var <span class="attribute">lastname</span>=<span class="string">&quot;Doe&quot;</span>, <span class="attribute">age</span>=30, <span class="attribute">job</span>=<span class="string">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>重新声明 JavaScript 变量</p>
<p>如果重新声明 JavaScript 变量，该变量的值不会丢失：</p>
<p>在以下两条语句执行后，变量 carname 的值依然是 “Volvo”：<br><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">var carname=<span class="string">&quot;Volvo&quot;</span><span class="comment">;</span></span><br><span class="line">var carname<span class="comment">;</span></span><br></pre></td></tr></table></figure><br>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：<br><figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="symbol">x</span>;               <span class="comment">// x 为 undefined</span></span><br><span class="line"><span class="keyword">var</span> <span class="symbol">x</span> = <span class="number">5</span>;           <span class="comment">// 现在 x 为数字</span></span><br><span class="line"><span class="keyword">var</span> <span class="symbol">x</span> = <span class="string">&quot;John&quot;</span>;      <span class="comment">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure><br>JavaScript字符串可以使用单引号或双引号。</p>
<p>可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var answer</span>=<span class="string">&quot;It&#x27;s alright&quot;</span>;</span><br><span class="line"><span class="attribute">var answer</span>=<span class="string">&quot;He is called &#x27;Johnny&#x27;&quot;</span>;</span><br><span class="line"><span class="attribute">var answer</span>=<span class="string">&#x27;He is called &quot;Johnny&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>JavaScript 只有一种数字类型。极大或极小的数字可以通过科学（指数）计数法来书写。<br><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var</span> y=<span class="number">123</span>e<span class="number">5</span>;      // <span class="number">12300000</span></span><br><span class="line"><span class="attribute">var</span> z=<span class="number">123</span>e-<span class="number">5</span>;     // <span class="number">0</span>.<span class="number">00123</span></span><br></pre></td></tr></table></figure><br>JavaScript 数组<br><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">var cars=new Array()<span class="comment">;</span></span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">&quot;Saab&quot;</span><span class="comment">;</span></span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">&quot;Volvo&quot;</span><span class="comment">;</span></span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">&quot;BMW&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var cars</span>=new Array(<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>);</span><br><span class="line"><span class="attribute">var cars</span>=[<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>];</span><br></pre></td></tr></table></figure><br>JavaScript 对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">var person=&#123;<span class="attr">firstname:</span><span class="string">&quot;John&quot;</span>, <span class="attr">lastname:</span><span class="string">&quot;Doe&quot;</span>, <span class="attr">id:</span><span class="number">5566</span>&#125;;</span><br></pre></td></tr></table></figure><br>对象属性有两种寻址方式:<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=person.lastname<span class="comment">;</span></span><br><span class="line"><span class="attr">name</span>=person[<span class="string">&quot;lastname&quot;</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><br>Undefined 这个值表示变量不含有值。</p>
<p>可以通过将变量的值设置为 null 来清空变量。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">cars</span>=null<span class="comment">;</span></span><br><span class="line"><span class="attr">person</span>=null<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于本站</title>
    <url>/2020/08/02/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/2020/08/02/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99/test.jpg" class="">
<p>本站诞生史。</p>
<a id="more"></a>
<h2 id="hexo-初始化"><a href="#hexo-初始化" class="headerlink" title="hexo 初始化"></a>hexo 初始化</h2>
    <div id="aplayer-FUohMUUE" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="2909007895" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm <span class="keyword">install</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br><span class="line">hexo s -d</span><br></pre></td></tr></table></figure>
<h2 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h2><p>最新next仓库<br><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/next-theme/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<h2 id="文本添加音乐"><a href="#文本添加音乐" class="headerlink" title="文本添加音乐"></a>文本添加音乐</h2><h3 id="安装hexo-tag-aplayer"><a href="#安装hexo-tag-aplayer" class="headerlink" title="安装hexo-tag-aplayer"></a>安装hexo-tag-aplayer</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-tag-aplayer</span></span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<p>title : 曲目标题</p>
<p>author: 曲目作者</p>
<p>url: 音乐文件 URL 地址</p>
<p>picture_url: (可选) 音乐对应的图片地址</p>
<p>narrow: （可选）播放器袖珍风格</p>
<p>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</p>
<p>width:xxx: (可选) 播放器宽度 (默认: 100%)</p>
<p>lrc:xxx: （可选）歌词文件 URL 地址</p>
<p>当开启 Hexo 的 文章资源文件夹 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> aplayer <span class="string">&quot;Caffeine&quot;</span> <span class="string">&quot;Jeff Williams&quot;</span> <span class="string">&quot;caffeine.mp3&quot;</span> <span class="string">&quot;picture.jpg&quot;</span> <span class="string">&quot;lrc:caffeine.txt&quot;</span> <span class="meta">%</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;narrow&quot;</span>: false,                          <span class="regexp">//</span> （可选）播放器袖珍风格</span><br><span class="line">    <span class="string">&quot;autoplay&quot;</span>: true,                         <span class="regexp">//</span> （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;random&quot;</span>,                         <span class="regexp">//</span> （可选）曲目循环类型，有 <span class="string">&#x27;random&#x27;</span>（随机播放）, <span class="string">&#x27;single&#x27;</span> (单曲播放), <span class="string">&#x27;circulation&#x27;</span> (循环播放), <span class="string">&#x27;order&#x27;</span> (列表播放)， 默认：<span class="string">&#x27;circulation&#x27;</span> </span><br><span class="line">    <span class="string">&quot;showlrc&quot;</span>: <span class="number">3</span>,                             <span class="regexp">//</span> （可选）歌词显示配置项，可选项有：<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">    <span class="string">&quot;mutex&quot;</span>: true,                            <span class="regexp">//</span> （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class="line">    <span class="string">&quot;theme&quot;</span>: <span class="string">&quot;#e6d0b2&quot;</span>,	                      <span class="regexp">//</span> （可选）播放器风格色彩设置，默认：<span class="comment">#b7daff</span></span><br><span class="line">    <span class="string">&quot;preload&quot;</span>: <span class="string">&quot;metadata&quot;</span>,                    <span class="regexp">//</span> （可选）音乐文件预载入模式，可选项： <span class="string">&#x27;none&#x27;</span> <span class="string">&#x27;metadata&#x27;</span> <span class="string">&#x27;auto&#x27;</span>, 默认: <span class="string">&#x27;auto&#x27;</span></span><br><span class="line">    <span class="string">&quot;listmaxheight&quot;</span>: <span class="string">&quot;513px&quot;</span>,                 <span class="regexp">//</span> (可选) 该播放列表的最大长度</span><br><span class="line">    <span class="string">&quot;music&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;CoCo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Jeff Williams&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;caffeine.mp3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pic&quot;</span>: <span class="string">&quot;caffeine.jpeg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;lrc&quot;</span>: <span class="string">&quot;caffeine.txt&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;アイロニ&quot;</span>,</span><br><span class="line">            <span class="string">&quot;author&quot;</span>: <span class="string">&quot;鹿乃&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;irony.mp3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pic&quot;</span>: <span class="string">&quot;irony.jpg&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="MetingJS支持"><a href="#MetingJS支持" class="headerlink" title="MetingJS支持"></a>MetingJS支持</h4><p>如果想在本插件中使用 MetingJS，请在 Hexo 配置文件 _config.yml 中设置：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>接着就可以通过<br><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">meting</span> ...%&#125;</span></span><br></pre></td></tr></table></figure><br> 在文章中使用 MetingJS 播放器了：<br><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 简单示例 (id, server, type)  --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">meting</span> &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 进阶示例 --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">meting</span> &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span></span><br></pre></td></tr></table></figure><br>id    必须值    歌曲 id / 播放列表 id / 相册 id / 搜索关键字</p>
<p>server    必须值    音乐平台: netease, tencent, kugou, xiami, baidu</p>
<p>type    必须值    song, playlist, album, search, artist</p>
<p>fixed    false    开启固定模式</p>
<p>mini    false    开启迷你模式</p>
<p>loop    all    列表循环模式：all, one,none</p>
<p>order    list    列表播放模式： list, random</p>
<p>volume    0.7    播放器音量</p>
<p>lrctype    0    歌词格式类型</p>
<p>listfolded    false    指定音乐播放列表是否折叠</p>
<p>storagename    metingjs    LocalStorage 中存储播放器设定的键名</p>
<p>autoplay    true    自动播放，移动端浏览器暂时不支持此功能</p>
<p>mutex    true    该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</p>
<p>listmaxheight    340px    播放列表的最大长度</p>
<p>preload    auto    音乐文件预载入模式，可选项： none, metadata, auto</p>
<p>theme    #ad7a86    播放器风格色彩设置</p>
<h2 id="全局音乐自动播放"><a href="#全局音乐自动播放" class="headerlink" title="全局音乐自动播放"></a>全局音乐自动播放</h2><p>修改<font color=red>\theme\next\layout_layout.swig</font>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 我使用的APlayer本体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-id</span>=<span class="string">&quot;2465890057&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-server</span>=<span class="string">&quot;netease&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-type</span>=<span class="string">&quot;playlist&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-fixed</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-autoplay</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-order</span>=<span class="string">&quot;random&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-volume</span>=<span class="string">&quot;0.55&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-theme</span>=<span class="string">&quot;#cc543a&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-preload</span>=<span class="string">&quot;auto&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果将本体放在body里面导致页面加载出现问题，请尝试放到body体后面--&gt;</span></span><br></pre></td></tr></table></figure>
<p>Aplayer<a href="https://github.com/metowolf/MetingJS">参数设置</a><br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span>-server: netease, tencent, kugou, xiami, baidu</span></span><br><span class="line"><span class="class"><span class="keyword">data</span>-<span class="keyword">type</span>: song, playlist, album, search, artist</span></span><br><span class="line"><span class="class"><span class="keyword">data</span>-id: song id / playlist id / album id / search keyword</span></span><br><span class="line"><span class="class"><span class="keyword">data</span>-order: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p><font color=red>pjax</font>，页面跳转时不重新播放</p>
<p>pjax安装</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ cd themes/<span class="keyword">next</span></span><br><span class="line">$ git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-pjax source/<span class="class"><span class="keyword">lib</span>/<span class="title">pjax</span></span></span><br></pre></td></tr></table></figure>
<p>设置theme的_config.yml<br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation <span class="keyword">on</span> your website.</span><br><span class="line"># Dependencie<span class="variable">s:</span> http<span class="variable">s:</span>//github.<span class="keyword">com</span>/theme-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-pjax</span><br><span class="line"># For moreinformation: http<span class="variable">s:</span>//github.<span class="keyword">com</span>/MoOx/pjax</span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure></p>
<h2 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h2><p>修改theme _config.yml<br><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  style: <span class="keyword">source</span><span class="regexp">/_data/</span>styles.styl</span><br></pre></td></tr></table></figure><br>在<font color=red>blog根目录下</font>新建_data文件夹</p>
<p>新建styles.styl</p>
<p>内容：<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加背景图片</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: url(https://source.unsplash.com/random/<span class="number">1600</span>x900?wallpapers);<span class="comment">//自己喜欢的图片地址</span></span><br><span class="line">      <span class="attribute">background-size</span>: cover;</span><br><span class="line">      <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">      <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">      <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">   <span class="comment">// margin-top: 60px;</span></span><br><span class="line">   <span class="comment">// padding: 60px 60px 60px 60px;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//博客内容透明化</span></span><br><span class="line"><span class="comment">//文章内容的透明度设置</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单栏的透明度设置</span></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索框（local-search）的透明度设置</span></span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><p>安装相应插件<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb  <span class="comment">--save</span></span><br></pre></td></tr></table></figure><br>设置根目录配置文件<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure><br>设置主题目录配置文件<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><h3 id="安装-hexo-renderer-kramed"><a href="#安装-hexo-renderer-kramed" class="headerlink" title="安装 hexo-renderer-kramed"></a>安装 hexo-renderer-kramed</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">uninstall</span> hexo-renderer-marked <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-kramed <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h3 id="修改-node-modules-kramed-lib-rules-inline-js"><a href="#修改-node-modules-kramed-lib-rules-inline-js" class="headerlink" title="修改/node_modules/kramed/lib/rules/inline.js"></a>修改/node_modules/kramed/lib/rules/inline.js</h3><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">escape: /^<span class="symbol">\\</span>([<span class="symbol">\\</span>`*&#123;&#125;<span class="symbol">\[</span><span class="symbol">\]</span>()#$+<span class="symbol">\-</span>.!_&gt;])/,</span><br><span class="line">改为</span><br><span class="line">escape: /^<span class="symbol">\\</span>([`*<span class="symbol">\[</span><span class="symbol">\]</span>()# +<span class="symbol">\-</span>.!_&gt;])/,</span><br><span class="line"></span><br><span class="line">em: /^<span class="symbol">\b</span>_((?:__|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)_<span class="symbol">\b</span>|^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</span><br><span class="line">改为</span><br><span class="line">em: /^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</span><br></pre></td></tr></table></figure>
<h3 id="修改主题-config-yml"><a href="#修改主题-config-yml" class="headerlink" title="修改主题_config.yml"></a>修改主题_config.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>开启per_page保证只要显示加了mathjax: true的页面才进行渲染。</p>
<h3 id="在md文件开启mathjax"><a href="#在md文件开启mathjax" class="headerlink" title="在md文件开启mathjax"></a>在md文件开启mathjax</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-MathJax-给公式编号并引用公式"><a href="#使用-MathJax-给公式编号并引用公式" class="headerlink" title="使用 MathJax 给公式编号并引用公式"></a>使用 MathJax 给公式编号并引用公式</h3><p>在新版本的 NexT 主题中，我们加入了公式自动编号和引用功能。下面简要介绍一下如何使用这项功能。</p>
<p>为了使用这项功能，一般来说，你必须把所使用的 LaTeX 公式放在 equation 环境里面，采用旧的方法<br>（也就是说，仅仅把公式的每一边用两个 $ 符号包含起来）是无效的。如何引用公式？<br>你只需要在书写公式的时候给公式一个 \label{} 标记（tag），然后在正文中，可以使用 \ref{} 或者 \eqref{} 命令来引用对应的公式。<br>使用 \eqref{} 是推荐的方式，因为如果你使用 \ref{}，公式在文中的引用编号将没有圆括号包围。下面介绍几种常见的公式编号例子。</p>
<p>对于简单的公式，使用下面的方式给公式一个标记，</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$$</span>\<span class="keyword">begin</span>&#123;equation&#125;\label&#123;eq1&#125;</span><br><span class="line">e=mc^<span class="number">2</span></span><br><span class="line">\<span class="keyword">end</span>&#123;equation&#125;<span class="variable">$$</span></span><br></pre></td></tr></table></figure>
<p>然后，在正文中，你可以轻松引用上述公式，一个简单的例子如下：<br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">著名的质能方程 <span class="variable">$\</span>eqref&#123;eq1&#125;<span class="variable">$ </span>由爱因斯坦提出 ...</span><br></pre></td></tr></table></figure></p>
<script type="math/tex; mode=display">\begin{equation}\label{eq1}
e=mc^2
\end{equation}</script><p>著名的质能方程 $\eqref{eq1}$ 由爱因斯坦提出 …</p>
<p>对于多行公式，在 equation 环境中，你可以使用 aligned 环境把公式分成多行，<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>\begin&#123;<span class="keyword">equation</span>&#125;\label&#123;eq2&#125;</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a <span class="comment">&amp;= b + c \\</span></span><br><span class="line">  &amp;= d <span class="comment">+ e + f + g \\</span></span><br><span class="line">  &amp;= h <span class="comment">+ i</span></span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">\end&#123;<span class="keyword">equation</span>&#125;$$</span><br></pre></td></tr></table></figure></p>
<script type="math/tex; mode=display">\begin{equation}\label{eq2}
\begin{aligned}
a &= b + c \\
  &= d + e + f + g \\
  &= h + i
\end{aligned}
\end{equation}</script><p>要对齐多个公式，我们需要使用 align 环境。align 环境中的每个公式都有自己的编号：<br><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">$$\<span class="keyword">begin</span>&#123;<span class="keyword">align</span>&#125;</span><br><span class="line">a &amp;<span class="operator">=</span> b + <span class="keyword">c</span> \label&#123;<span class="keyword">eq</span><span class="number">3</span>&#125; \\</span><br><span class="line"><span class="keyword">x</span> &amp;<span class="operator">=</span> yz \label&#123;<span class="keyword">eq</span><span class="number">4</span>&#125;\\</span><br><span class="line">l &amp;<span class="operator">=</span> m - n \label&#123;<span class="keyword">eq</span><span class="number">5</span>&#125;</span><br><span class="line">\<span class="keyword">end</span>&#123;<span class="keyword">align</span>&#125;$$</span><br></pre></td></tr></table></figure></p>
<script type="math/tex; mode=display">\begin{align}
a &= b + c \label{eq3} \\
x &= yz \label{eq4}\\
l &= m - n \label{eq5}
\end{align}</script><p>在 align 环境中，如果你不想给某个或某几个公式编号，那么在这些公式后面使用 \nonumber 命令即可。例如：<br><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$$<span class="string">\begin&#123;align&#125;</span></span><br><span class="line">-<span class="number">4</span> + <span class="number">5x</span> &amp;= <span class="number">2</span>+y <span class="string">\nonumber</span>  <span class="string">\\</span></span><br><span class="line"> w+<span class="number">2</span> &amp;= -<span class="number">1</span>+w <span class="string">\\</span></span><br><span class="line"> ab &amp;= cb</span><br><span class="line"><span class="string">\end&#123;align&#125;$$</span></span><br></pre></td></tr></table></figure></p>
<script type="math/tex; mode=display">\begin{align}
-4 + 5x &= 2+y \nonumber  \\
 w+2 &= -1+w \\
 ab &= cb
\end{align}</script><p>有时，你可能会希望采用更加奇特的方式来标记和引用你的公式，你可以通过使用 \tag{} 命令来实现，例如：<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>x+<span class="number">1</span>\over\<span class="built_in">sqrt</span>&#123;<span class="number">1</span>-x^<span class="number">2</span>&#125; \tag&#123;i&#125;\label&#123;eq_tag&#125;<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure></p>
<script type="math/tex; mode=display">x+1\over\sqrt{1-x^2} \tag{i}\label{eq_tag}</script><h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p>安装插件<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-blog-encrypt</span></span><br></pre></td></tr></table></figure><br>格式<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">encryptAsDiary</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016-03-30 21:12:21</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">mikemessi</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">Here&#x27;s</span> <span class="string">something</span> <span class="string">encrypted,</span> <span class="string">password</span> <span class="string">is</span> <span class="string">required</span> <span class="string">to</span> <span class="string">continue</span> <span class="string">reading.</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">Hey,</span> <span class="string">password</span> <span class="string">is</span> <span class="string">required</span> <span class="string">here.</span></span><br><span class="line"><span class="attr">wrong_pass_message:</span> <span class="string">Oh,</span> <span class="string">this</span> <span class="string">is</span> <span class="string">an</span> <span class="string">invalid</span> <span class="string">password.</span> <span class="string">Check</span> <span class="string">and</span> <span class="string">try</span> <span class="string">again,</span> <span class="string">please.</span></span><br><span class="line"><span class="attr">wrong_hash_message:</span> <span class="string">Oh,</span> <span class="string">these</span> <span class="string">decrypted</span> <span class="string">content</span> <span class="string">cannot</span> <span class="string">be</span> <span class="string">verified,</span> <span class="string">but</span> <span class="string">you</span> <span class="string">can</span> <span class="string">still</span> <span class="string">have</span> <span class="string">a</span> <span class="string">look.</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></p>
<h3 id="禁用评论"><a href="#禁用评论" class="headerlink" title="禁用评论"></a>禁用评论</h3><p>md文件加<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">uninstall</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span>-pin-top <span class="comment">--save</span></span><br><span class="line">文章内设置：</span><br><span class="line">top: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>修改/themes/next/layout/_macro/post.swig,在</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;post-meta&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>标签下，插入如下代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> post.top %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="首页不显示全文"><a href="#首页不显示全文" class="headerlink" title="首页不显示全文"></a>首页不显示全文</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="替换标签前缀-字符"><a href="#替换标签前缀-字符" class="headerlink" title="替换标签前缀 # 字符"></a>替换标签前缀 # 字符</h3><p>主题_config.yml<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="markdown改变字体颜色"><a href="#markdown改变字体颜色" class="headerlink" title="markdown改变字体颜色"></a>markdown改变字体颜色</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">改变颜色 <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>text<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">改变字体 <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span>微软雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">改变大小 <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span> <span class="attr">size</span>=<span class="string">12</span>&gt;</span>字号12<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">改变背景色 <span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">orange</span>&gt;</span>背景色是：orange<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="markdown插入超链接"><a href="#markdown插入超链接" class="headerlink" title="markdown插入超链接"></a>markdown插入超链接</h3><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">[提示文字](<span class="name">url</span>)</span><br></pre></td></tr></table></figure>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> asset_img test.jpg <span class="meta">%</span>&#125;</span><br><span class="line"><span class="comment">//test.jpg在对应资源文件夹</span></span><br></pre></td></tr></table></figure>
<p>一些图片网站</p>
<p><a href="https://pixabay.com/images/search/">https://pixabay.com/images/search/</a></p>
<p><a href="https://unsplash.com/">https://unsplash.com/</a></p>
<p><a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a></p>
<h3 id="鼠标特效"><a href="#鼠标特效" class="headerlink" title="鼠标特效"></a>鼠标特效</h3><p>在themes\next\source\js目录下新建fire.js,内容如下：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(&#123; origin, speed, color, angle, context &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin</span><br><span class="line">    <span class="keyword">this</span>.position = &#123; ...<span class="keyword">this</span>.origin &#125;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">    <span class="keyword">this</span>.speed = speed</span><br><span class="line">    <span class="keyword">this</span>.angle = angle</span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.renderCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.fillStyle = <span class="keyword">this</span>.color</span><br><span class="line">    <span class="keyword">this</span>.context.beginPath()</span><br><span class="line">    <span class="keyword">this</span>.context.arc(<span class="keyword">this</span>.position.x, <span class="keyword">this</span>.position.y, <span class="number">2</span>, <span class="number">0</span>, Math.PI * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">this</span>.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    <span class="keyword">this</span>.position.x = (Math.sin(<span class="keyword">this</span>.angle) * <span class="keyword">this</span>.speed) + <span class="keyword">this</span>.position.x</span><br><span class="line">    <span class="keyword">this</span>.position.y = (Math.cos(<span class="keyword">this</span>.angle) * <span class="keyword">this</span>.speed) + <span class="keyword">this</span>.position.y + (<span class="keyword">this</span>.renderCount * <span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boom</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (&#123; origin, context, circleCount = <span class="number">16</span>, area &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin</span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.circleCount = circleCount</span><br><span class="line">    <span class="keyword">this</span>.area = area</span><br><span class="line">    <span class="keyword">this</span>.stop = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomArray(range) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = range.length</span><br><span class="line">    <span class="keyword">const</span> randomIndex = Math.floor(length * Math.random())</span><br><span class="line">    <span class="keyword">return</span> range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomColor() &#123;</span><br><span class="line">    <span class="keyword">const</span> range = [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomRange(start, end) &#123;</span><br><span class="line">    <span class="keyword">return</span> (end - start) * Math.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.circleCount; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> circle = new Circle(&#123;</span><br><span class="line">        context: <span class="keyword">this</span>.context,</span><br><span class="line">        origin: <span class="keyword">this</span>.origin,</span><br><span class="line">        color: <span class="keyword">this</span>.randomColor(),</span><br><span class="line">        angle: <span class="keyword">this</span>.randomRange(Math.PI - <span class="number">1</span>, Math.PI + <span class="number">1</span>),</span><br><span class="line">        speed: <span class="keyword">this</span>.randomRange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    <span class="keyword">this</span>.circles.forEach((circle, index) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (circle.position.x &gt; <span class="keyword">this</span>.area.width || circle.position.y &gt; <span class="keyword">this</span>.area.height) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.circles.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.circles.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.stop = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.circles.forEach(circle =&gt; circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CursorSpecialEffects</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.computerCanvas = document.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderCanvas = document.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.computerContext = <span class="keyword">this</span>.computerCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderContext = <span class="keyword">this</span>.renderCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.globalWidth = window.innerWidth</span><br><span class="line">    <span class="keyword">this</span>.globalHeight = window.innerHeight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.booms = []</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseDown(e) &#123;</span><br><span class="line">    <span class="keyword">const</span> boom = new Boom(&#123;</span><br><span class="line">      origin: &#123; x: e.clientX, y: e.clientY &#125;,</span><br><span class="line">      context: <span class="keyword">this</span>.computerContext,</span><br><span class="line">      area: &#123;</span><br><span class="line">        width: <span class="keyword">this</span>.globalWidth,</span><br><span class="line">        height: <span class="keyword">this</span>.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.<span class="keyword">init</span>()</span><br><span class="line">    <span class="keyword">this</span>.booms.push(boom)</span><br><span class="line">    <span class="keyword">this</span>.running || <span class="keyword">this</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handlePageHide() &#123;</span><br><span class="line">    <span class="keyword">this</span>.booms = []</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="keyword">this</span>.renderCanvas.style</span><br><span class="line">    style.position = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    style.top = style.left = <span class="number">0</span></span><br><span class="line">    style.zIndex = <span class="string">&#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class="line">    style.pointerEvents = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line">    style.width = <span class="keyword">this</span>.renderCanvas.width = <span class="keyword">this</span>.computerCanvas.width = <span class="keyword">this</span>.globalWidth</span><br><span class="line">    style.height = <span class="keyword">this</span>.renderCanvas.height = <span class="keyword">this</span>.computerCanvas.height = <span class="keyword">this</span>.globalHeight</span><br><span class="line"></span><br><span class="line">    document.body.append(<span class="keyword">this</span>.renderCanvas)</span><br><span class="line"></span><br><span class="line">    window.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">this</span>.handleMouseDown.bind(<span class="keyword">this</span>))</span><br><span class="line">    window.addEventListener(<span class="string">&#x27;pagehide&#x27;</span>, <span class="keyword">this</span>.handlePageHide.bind(<span class="keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.booms.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.running = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(<span class="keyword">this</span>.run.bind(<span class="keyword">this</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.computerContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.globalWidth, <span class="keyword">this</span>.globalHeight)</span><br><span class="line">    <span class="keyword">this</span>.renderContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.globalWidth, <span class="keyword">this</span>.globalHeight)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.booms.forEach((boom, index) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (boom.stop) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.booms.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.renderContext.drawImage(<span class="keyword">this</span>.computerCanvas, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.globalWidth, <span class="keyword">this</span>.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cursorSpecialEffects = new CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.<span class="keyword">init</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>在themes\next\layout的layout.njk下添加<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/fire.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="自定义回到顶部"><a href="#自定义回到顶部" class="headerlink" title="自定义回到顶部"></a>自定义回到顶部</h3><p>在source\images目录下放入自定义scroll.png，然后在source_data\styles.styl增加</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义回到顶部样式</span></span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70px</span>;  <span class="comment">//图片素材宽度</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">900px</span>;  <span class="comment">//图片素材高度</span></span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: unset;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">5s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&quot;/images/scroll.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//隐藏箭头图标</span></span><br><span class="line">  &gt; <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: unset;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100vh</span> &lt; (<span class="number">900px</span> + <span class="number">200px</span>) ? calc( <span class="number">100vh</span> - <span class="number">900px</span> - <span class="number">200px</span> ) : <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>关于本站</tag>
      </tags>
  </entry>
  <entry>
    <title>胡言乱语</title>
    <url>/2020/08/01/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>
    <div id="aplayer-WopvrxYc" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="442016694" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<p>しつこくあの人に話しかけて、馬鹿みたいにあの人のすべてを気にして、でも知ってる。</p>
<a id="more"></a>
<p>あの人は君のメールをもらった時に、「この人うざい」ってしか思わないょ。</p>
<p>もう君が私のことをすきになるのを期待していない、そろそろ君の世界から行かなきゃ。</p>
<p>君を失うよりは、君が他の人のものになるほうが怖い。</p>
<p>空いてる席にはいずれ誰かが座ることは分かるけど、それでも涙が我慢できない、結局私は出られないんだ。</p>
<p>あなたにメッセージを送るたびに冒険をして、一日の気分の良い悪いを賭けた。</p>
<p>君が好きというのは、多分心の中ではもう千回諦めたけど。</p>
<p>君が一度だけ振り向いてくれるなら、君の愛する希望が改めてもえること。</p>
<p>人はいつも夜で、忘れられないのを思い出す。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
